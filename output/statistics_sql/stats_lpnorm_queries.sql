DROP TABLE IF EXISTS norms;
CREATE TABLE norms (
    
    relation_name TEXT NOT NULL,
    join_var_name TEXT NOT NULL,
    aggregator_name TEXT NOT NULL,
    pred_col_name TEXT,
    pk_relation_name TEXT,
    fk_join_var_name TEXT,
    pk_join_var_name TEXT,
    
    pred_value_id      INTEGER,
    l0 DOUBLE,
    l1 DOUBLE,
    l2 DOUBLE,
    l3 DOUBLE,
    l4 DOUBLE,
    l5 DOUBLE,
    l6 DOUBLE,
    l7 DOUBLE,
    l8 DOUBLE,
    l9 DOUBLE,
    l10 DOUBLE,
    l_inf DOUBLE
);

----------------------------------
-- START: generate all mcvs and histograms
----------------------------------


DROP TABLE IF EXISTS USERS_VIEWS_mcv;

-- Create MCV table for USERS.VIEWS, with a unique mcv_id
CREATE TABLE USERS_VIEWS_mcv AS
WITH base AS (
    SELECT VIEWS, COUNT(*) AS freq
    FROM USERS
    WHERE VIEWS IS NOT NULL
    GROUP BY VIEWS
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    VIEWS,
    freq
FROM base;

DROP TABLE IF EXISTS USERS_UPVOTES_mcv;

-- Create MCV table for USERS.UPVOTES, with a unique mcv_id
CREATE TABLE USERS_UPVOTES_mcv AS
WITH base AS (
    SELECT UPVOTES, COUNT(*) AS freq
    FROM USERS
    WHERE UPVOTES IS NOT NULL
    GROUP BY UPVOTES
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    UPVOTES,
    freq
FROM base;

DROP TABLE IF EXISTS USERS_DOWNVOTES_mcv;

-- Create MCV table for USERS.DOWNVOTES, with a unique mcv_id
CREATE TABLE USERS_DOWNVOTES_mcv AS
WITH base AS (
    SELECT DOWNVOTES, COUNT(*) AS freq
    FROM USERS
    WHERE DOWNVOTES IS NOT NULL
    GROUP BY DOWNVOTES
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    DOWNVOTES,
    freq
FROM base;

DROP TABLE IF EXISTS USERS_CREATIONDATE_histogram;
CREATE TABLE USERS_CREATIONDATE_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound DATETIME,
    upper_bound DATETIME,
    bucket_type TEXT
);


INSERT INTO USERS_CREATIONDATE_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, to_timestamp(1280198718), 'base_1'), (1, 1, to_timestamp(1280198718), to_timestamp(1281398116), 'base_1'), (2, 1, to_timestamp(1281398116), to_timestamp(1284620513), 'base_1'), (3, 1, to_timestamp(1284620513), to_timestamp(1289002797), 'base_1'), (4, 1, to_timestamp(1289002797), to_timestamp(1292397864), 'base_1'), (5, 1, to_timestamp(1292397864), to_timestamp(1295973070), 'base_1'), (6, 1, to_timestamp(1295973070), to_timestamp(1298629453), 'base_1'), (7, 1, to_timestamp(1298629453), to_timestamp(1301547408), 'base_1'), (8, 1, to_timestamp(1301547408), to_timestamp(1304224259), 'base_1'), (9, 1, to_timestamp(1304224259), to_timestamp(1306425652), 'base_1'), (10, 1, to_timestamp(1306425652), to_timestamp(1308775786), 'base_1'), (11, 1, to_timestamp(1308775786), to_timestamp(1311280344), 'base_1'), (12, 1, to_timestamp(1311280344), to_timestamp(1313675640), 'base_1'), (13, 1, to_timestamp(1313675640), to_timestamp(1315831341), 'base_1'), (14, 1, to_timestamp(1315831341), to_timestamp(1317653968), 'base_1'), (15, 1, to_timestamp(1317653968), to_timestamp(1319207061), 'base_1'), (16, 1, to_timestamp(1319207061), to_timestamp(1321052448), 'base_1'), (17, 1, to_timestamp(1321052448), to_timestamp(1322750562), 'base_1'), (18, 1, to_timestamp(1322750562), to_timestamp(1324302408), 'base_1'), (19, 1, to_timestamp(1324302408), to_timestamp(1326192697), 'base_1'), (20, 1, to_timestamp(1326192697), to_timestamp(1327845133), 'base_1'), (21, 1, to_timestamp(1327845133), to_timestamp(1329159403), 'base_1'), (22, 1, to_timestamp(1329159403), to_timestamp(1330597538), 'base_1'), (23, 1, to_timestamp(1330597538), to_timestamp(1331907975), 'base_1'), (24, 1, to_timestamp(1331907975), to_timestamp(1333219977), 'base_1'), (25, 1, to_timestamp(1333219977), to_timestamp(1334573428), 'base_1'), (26, 1, to_timestamp(1334573428), to_timestamp(1335948882), 'base_1'), (27, 1, to_timestamp(1335948882), to_timestamp(1337317916), 'base_1'), (28, 1, to_timestamp(1337317916), to_timestamp(1338899194), 'base_1'), (29, 1, to_timestamp(1338899194), to_timestamp(1340303029), 'base_1'), (30, 1, to_timestamp(1340303029), to_timestamp(1341836440), 'base_1'), (31, 1, to_timestamp(1341836440), to_timestamp(1343286182), 'base_1'), (32, 1, to_timestamp(1343286182), to_timestamp(1344714297), 'base_1'), (33, 1, to_timestamp(1344714297), to_timestamp(1345995522), 'base_1'), (34, 1, to_timestamp(1345995522), to_timestamp(1347374038), 'base_1'), (35, 1, to_timestamp(1347374038), to_timestamp(1348597217), 'base_1'), (36, 1, to_timestamp(1348597217), to_timestamp(1349706373), 'base_1'), (37, 1, to_timestamp(1349706373), to_timestamp(1350847364), 'base_1'), (38, 1, to_timestamp(1350847364), to_timestamp(1351919852), 'base_1'), (39, 1, to_timestamp(1351919852), to_timestamp(1352977181), 'base_1'), (40, 1, to_timestamp(1352977181), to_timestamp(1354019602), 'base_1'), (41, 1, to_timestamp(1354019602), to_timestamp(1354964303), 'base_1'), (42, 1, to_timestamp(1354964303), to_timestamp(1355917258), 'base_1'), (43, 1, to_timestamp(1355917258), to_timestamp(1357322226), 'base_1'), (44, 1, to_timestamp(1357322226), to_timestamp(1358284148), 'base_1'), (45, 1, to_timestamp(1358284148), to_timestamp(1359090576), 'base_1'), (46, 1, to_timestamp(1359090576), to_timestamp(1359992788), 'base_1'), (47, 1, to_timestamp(1359992788), to_timestamp(1360804033), 'base_1'), (48, 1, to_timestamp(1360804033), to_timestamp(1361648185), 'base_1'), (49, 1, to_timestamp(1361648185), to_timestamp(1362497019), 'base_1'), (50, 1, to_timestamp(1362497019), to_timestamp(1363197389), 'base_1'), (51, 1, to_timestamp(1363197389), to_timestamp(1363883139), 'base_1'), (52, 1, to_timestamp(1363883139), to_timestamp(1364678140), 'base_1'), (53, 1, to_timestamp(1364678140), to_timestamp(1365537861), 'base_1'), (54, 1, to_timestamp(1365537861), to_timestamp(1366232428), 'base_1'), (55, 1, to_timestamp(1366232428), to_timestamp(1366932939), 'base_1'), (56, 1, to_timestamp(1366932939), to_timestamp(1367701197), 'base_1'), (57, 1, to_timestamp(1367701197), to_timestamp(1368537498), 'base_1'), (58, 1, to_timestamp(1368537498), to_timestamp(1369274617), 'base_1'), (59, 1, to_timestamp(1369274617), to_timestamp(1370048183), 'base_1'), (60, 1, to_timestamp(1370048183), to_timestamp(1370958777), 'base_1'), (61, 1, to_timestamp(1370958777), to_timestamp(1371735649), 'base_1'), (62, 1, to_timestamp(1371735649), to_timestamp(1372609752), 'base_1'), (63, 1, to_timestamp(1372609752), to_timestamp(1373441982), 'base_1'), (64, 1, to_timestamp(1373441982), to_timestamp(1374243416), 'base_1'), (65, 1, to_timestamp(1374243416), to_timestamp(1375124358), 'base_1'), (66, 1, to_timestamp(1375124358), to_timestamp(1376073713), 'base_1'), (67, 1, to_timestamp(1376073713), to_timestamp(1377044661), 'base_1'), (68, 1, to_timestamp(1377044661), to_timestamp(1377918575), 'base_1'), (69, 1, to_timestamp(1377918575), to_timestamp(1378840763), 'base_1'), (70, 1, to_timestamp(1378840763), to_timestamp(1379631757), 'base_1'), (71, 1, to_timestamp(1379631757), to_timestamp(1380506360), 'base_1'), (72, 1, to_timestamp(1380506360), to_timestamp(1381249192), 'base_1'), (73, 1, to_timestamp(1381249192), to_timestamp(1381996954), 'base_1'), (74, 1, to_timestamp(1381996954), to_timestamp(1382926402), 'base_1'), (75, 1, to_timestamp(1382926402), to_timestamp(1383661579), 'base_1'), (76, 1, to_timestamp(1383661579), to_timestamp(1384264344), 'base_1'), (77, 1, to_timestamp(1384264344), to_timestamp(1384954504), 'base_1'), (78, 1, to_timestamp(1384954504), to_timestamp(1385588343), 'base_1'), (79, 1, to_timestamp(1385588343), to_timestamp(1386320717), 'base_1'), (80, 1, to_timestamp(1386320717), to_timestamp(1386901228), 'base_1'), (81, 1, to_timestamp(1386901228), to_timestamp(1387590402), 'base_1'), (82, 1, to_timestamp(1387590402), to_timestamp(1388778959), 'base_1'), (83, 1, to_timestamp(1388778959), to_timestamp(1389482843), 'base_1'), (84, 1, to_timestamp(1389482843), to_timestamp(1390232275), 'base_1'), (85, 1, to_timestamp(1390232275), to_timestamp(1390664926), 'base_1'), (86, 1, to_timestamp(1390664926), to_timestamp(1391103673), 'base_1'), (87, 1, to_timestamp(1391103673), to_timestamp(1391630659), 'base_1'), (88, 1, to_timestamp(1391630659), to_timestamp(1392058508), 'base_1'), (89, 1, to_timestamp(1392058508), to_timestamp(1392395441), 'base_1'), (90, 1, to_timestamp(1392395441), to_timestamp(1392908579), 'base_1'), (91, 1, to_timestamp(1392908579), to_timestamp(1393448956), 'base_1'), (92, 1, to_timestamp(1393448956), to_timestamp(1393952496), 'base_1'), (93, 1, to_timestamp(1393952496), to_timestamp(1394458997), 'base_1'), (94, 1, to_timestamp(1394458997), to_timestamp(1394885769), 'base_1'), (95, 1, to_timestamp(1394885769), to_timestamp(1395381835), 'base_1'), (96, 1, to_timestamp(1395381835), to_timestamp(1395908273), 'base_1'), (97, 1, to_timestamp(1395908273), to_timestamp(1396431857), 'base_1'), (98, 1, to_timestamp(1396431857), to_timestamp(1396885385), 'base_1'), (99, 1, to_timestamp(1396885385), to_timestamp(1397178633), 'base_1'), (100, 1, to_timestamp(1397178633), to_timestamp(1397655240), 'base_1'), (101, 1, to_timestamp(1397655240), to_timestamp(1398107807), 'base_1'), (102, 1, to_timestamp(1398107807), to_timestamp(1398549283), 'base_1'), (103, 1, to_timestamp(1398549283), to_timestamp(1399043709), 'base_1'), (104, 1, to_timestamp(1399043709), to_timestamp(1399504382), 'base_1'), (105, 1, to_timestamp(1399504382), to_timestamp(1399982314), 'base_1'), (106, 1, to_timestamp(1399982314), to_timestamp(1400503723), 'base_1'), (107, 1, to_timestamp(1400503723), to_timestamp(1400918728), 'base_1'), (108, 1, to_timestamp(1400918728), to_timestamp(1401421877), 'base_1'), (109, 1, to_timestamp(1401421877), to_timestamp(1401923562), 'base_1'), (110, 1, to_timestamp(1401923562), to_timestamp(1402352615), 'base_1'), (111, 1, to_timestamp(1402352615), to_timestamp(1402729249), 'base_1'), (112, 1, to_timestamp(1402729249), to_timestamp(1403206115), 'base_1'), (113, 1, to_timestamp(1403206115), to_timestamp(1403718938), 'base_1'), (114, 1, to_timestamp(1403718938), to_timestamp(1404216033), 'base_1'), (115, 1, to_timestamp(1404216033), to_timestamp(1404734584), 'base_1'), (116, 1, to_timestamp(1404734584), to_timestamp(1405102588), 'base_1'), (117, 1, to_timestamp(1405102588), to_timestamp(1405587687), 'base_1'), (118, 1, to_timestamp(1405587687), to_timestamp(1406060485), 'base_1'), (119, 1, to_timestamp(1406060485), to_timestamp(1406468947), 'base_1'), (120, 1, to_timestamp(1406468947), to_timestamp(1406842293), 'base_1'), (121, 1, to_timestamp(1406842293), to_timestamp(1407321222), 'base_1'), (122, 1, to_timestamp(1407321222), to_timestamp(1407758673), 'base_1'), (123, 1, to_timestamp(1407758673), to_timestamp(1408126945), 'base_1'), (124, 1, to_timestamp(1408126945), to_timestamp(1408641886), 'base_1'), (125, 1, to_timestamp(1408641886), to_timestamp(1409154204), 'base_1'), (126, 1, to_timestamp(1409154204), to_timestamp(1409678147), 'base_1'), (127, 1, to_timestamp(1409678147), to_timestamp(1410196512), 'base_1'), (128, 1, to_timestamp(1410196512), NULL, 'base_1'), (129, 2, NULL, to_timestamp(1281398116), 'base_2'), (130, 2, to_timestamp(1281398116), to_timestamp(1289002797), 'base_2'), (131, 2, to_timestamp(1289002797), to_timestamp(1295973070), 'base_2'), (132, 2, to_timestamp(1295973070), to_timestamp(1301547408), 'base_2'), (133, 2, to_timestamp(1301547408), to_timestamp(1306425652), 'base_2'), (134, 2, to_timestamp(1306425652), to_timestamp(1311280344), 'base_2'), (135, 2, to_timestamp(1311280344), to_timestamp(1315831341), 'base_2'), (136, 2, to_timestamp(1315831341), to_timestamp(1319207061), 'base_2'), (137, 2, to_timestamp(1319207061), to_timestamp(1322750562), 'base_2'), (138, 2, to_timestamp(1322750562), to_timestamp(1326192697), 'base_2'), (139, 2, to_timestamp(1326192697), to_timestamp(1329159403), 'base_2'), (140, 2, to_timestamp(1329159403), to_timestamp(1331907975), 'base_2'), (141, 2, to_timestamp(1331907975), to_timestamp(1334573428), 'base_2'), (142, 2, to_timestamp(1334573428), to_timestamp(1337317916), 'base_2'), (143, 2, to_timestamp(1337317916), to_timestamp(1340303029), 'base_2'), (144, 2, to_timestamp(1340303029), to_timestamp(1343286182), 'base_2'), (145, 2, to_timestamp(1343286182), to_timestamp(1345995522), 'base_2'), (146, 2, to_timestamp(1345995522), to_timestamp(1348597217), 'base_2'), (147, 2, to_timestamp(1348597217), to_timestamp(1350847364), 'base_2'), (148, 2, to_timestamp(1350847364), to_timestamp(1352977181), 'base_2'), (149, 2, to_timestamp(1352977181), to_timestamp(1354964303), 'base_2'), (150, 2, to_timestamp(1354964303), to_timestamp(1357322226), 'base_2'), (151, 2, to_timestamp(1357322226), to_timestamp(1359090576), 'base_2'), (152, 2, to_timestamp(1359090576), to_timestamp(1360804033), 'base_2'), (153, 2, to_timestamp(1360804033), to_timestamp(1362497019), 'base_2'), (154, 2, to_timestamp(1362497019), to_timestamp(1363883139), 'base_2'), (155, 2, to_timestamp(1363883139), to_timestamp(1365537861), 'base_2'), (156, 2, to_timestamp(1365537861), to_timestamp(1366932939), 'base_2'), (157, 2, to_timestamp(1366932939), to_timestamp(1368537498), 'base_2'), (158, 2, to_timestamp(1368537498), to_timestamp(1370048183), 'base_2'), (159, 2, to_timestamp(1370048183), to_timestamp(1371735649), 'base_2'), (160, 2, to_timestamp(1371735649), to_timestamp(1373441982), 'base_2'), (161, 2, to_timestamp(1373441982), to_timestamp(1375124358), 'base_2'), (162, 2, to_timestamp(1375124358), to_timestamp(1377044661), 'base_2'), (163, 2, to_timestamp(1377044661), to_timestamp(1378840763), 'base_2'), (164, 2, to_timestamp(1378840763), to_timestamp(1380506360), 'base_2'), (165, 2, to_timestamp(1380506360), to_timestamp(1381996954), 'base_2'), (166, 2, to_timestamp(1381996954), to_timestamp(1383661579), 'base_2'), (167, 2, to_timestamp(1383661579), to_timestamp(1384954504), 'base_2'), (168, 2, to_timestamp(1384954504), to_timestamp(1386320717), 'base_2'), (169, 2, to_timestamp(1386320717), to_timestamp(1387590402), 'base_2'), (170, 2, to_timestamp(1387590402), to_timestamp(1389482843), 'base_2'), (171, 2, to_timestamp(1389482843), to_timestamp(1390664926), 'base_2'), (172, 2, to_timestamp(1390664926), to_timestamp(1391630659), 'base_2'), (173, 2, to_timestamp(1391630659), to_timestamp(1392395441), 'base_2'), (174, 2, to_timestamp(1392395441), to_timestamp(1393448956), 'base_2'), (175, 2, to_timestamp(1393448956), to_timestamp(1394458997), 'base_2'), (176, 2, to_timestamp(1394458997), to_timestamp(1395381835), 'base_2'), (177, 2, to_timestamp(1395381835), to_timestamp(1396431857), 'base_2'), (178, 2, to_timestamp(1396431857), to_timestamp(1397178633), 'base_2'), (179, 2, to_timestamp(1397178633), to_timestamp(1398107807), 'base_2'), (180, 2, to_timestamp(1398107807), to_timestamp(1399043709), 'base_2'), (181, 2, to_timestamp(1399043709), to_timestamp(1399982314), 'base_2'), (182, 2, to_timestamp(1399982314), to_timestamp(1400918728), 'base_2'), (183, 2, to_timestamp(1400918728), to_timestamp(1401923562), 'base_2'), (184, 2, to_timestamp(1401923562), to_timestamp(1402729249), 'base_2'), (185, 2, to_timestamp(1402729249), to_timestamp(1403718938), 'base_2'), (186, 2, to_timestamp(1403718938), to_timestamp(1404734584), 'base_2'), (187, 2, to_timestamp(1404734584), to_timestamp(1405587687), 'base_2'), (188, 2, to_timestamp(1405587687), to_timestamp(1406468947), 'base_2'), (189, 2, to_timestamp(1406468947), to_timestamp(1407321222), 'base_2'), (190, 2, to_timestamp(1407321222), to_timestamp(1408126945), 'base_2'), (191, 2, to_timestamp(1408126945), to_timestamp(1409154204), 'base_2'), (192, 2, to_timestamp(1409154204), to_timestamp(1410196512), 'base_2'), (193, 2, to_timestamp(1410196512), NULL, 'base_2'), (194, 4, NULL, to_timestamp(1289002797), 'base_4'), (195, 4, to_timestamp(1289002797), to_timestamp(1301547408), 'base_4'), (196, 4, to_timestamp(1301547408), to_timestamp(1311280344), 'base_4'), (197, 4, to_timestamp(1311280344), to_timestamp(1319207061), 'base_4'), (198, 4, to_timestamp(1319207061), to_timestamp(1326192697), 'base_4'), (199, 4, to_timestamp(1326192697), to_timestamp(1331907975), 'base_4'), (200, 4, to_timestamp(1331907975), to_timestamp(1337317916), 'base_4'), (201, 4, to_timestamp(1337317916), to_timestamp(1343286182), 'base_4'), (202, 4, to_timestamp(1343286182), to_timestamp(1348597217), 'base_4'), (203, 4, to_timestamp(1348597217), to_timestamp(1352977181), 'base_4'), (204, 4, to_timestamp(1352977181), to_timestamp(1357322226), 'base_4'), (205, 4, to_timestamp(1357322226), to_timestamp(1360804033), 'base_4'), (206, 4, to_timestamp(1360804033), to_timestamp(1363883139), 'base_4'), (207, 4, to_timestamp(1363883139), to_timestamp(1366932939), 'base_4'), (208, 4, to_timestamp(1366932939), to_timestamp(1370048183), 'base_4'), (209, 4, to_timestamp(1370048183), to_timestamp(1373441982), 'base_4'), (210, 4, to_timestamp(1373441982), to_timestamp(1377044661), 'base_4'), (211, 4, to_timestamp(1377044661), to_timestamp(1380506360), 'base_4'), (212, 4, to_timestamp(1380506360), to_timestamp(1383661579), 'base_4'), (213, 4, to_timestamp(1383661579), to_timestamp(1386320717), 'base_4'), (214, 4, to_timestamp(1386320717), to_timestamp(1389482843), 'base_4'), (215, 4, to_timestamp(1389482843), to_timestamp(1391630659), 'base_4'), (216, 4, to_timestamp(1391630659), to_timestamp(1393448956), 'base_4'), (217, 4, to_timestamp(1393448956), to_timestamp(1395381835), 'base_4'), (218, 4, to_timestamp(1395381835), to_timestamp(1397178633), 'base_4'), (219, 4, to_timestamp(1397178633), to_timestamp(1399043709), 'base_4'), (220, 4, to_timestamp(1399043709), to_timestamp(1400918728), 'base_4'), (221, 4, to_timestamp(1400918728), to_timestamp(1402729249), 'base_4'), (222, 4, to_timestamp(1402729249), to_timestamp(1404734584), 'base_4'), (223, 4, to_timestamp(1404734584), to_timestamp(1406468947), 'base_4'), (224, 4, to_timestamp(1406468947), to_timestamp(1408126945), 'base_4'), (225, 4, to_timestamp(1408126945), to_timestamp(1410196512), 'base_4'), (226, 4, to_timestamp(1410196512), NULL, 'base_4'), (227, 4, NULL, to_timestamp(1284620513), 'offset_4'), (228, 4, to_timestamp(1284620513), to_timestamp(1298629453), 'offset_4'), (229, 4, to_timestamp(1298629453), to_timestamp(1308775786), 'offset_4'), (230, 4, to_timestamp(1308775786), to_timestamp(1317653968), 'offset_4'), (231, 4, to_timestamp(1317653968), to_timestamp(1324302408), 'offset_4'), (232, 4, to_timestamp(1324302408), to_timestamp(1330597538), 'offset_4'), (233, 4, to_timestamp(1330597538), to_timestamp(1335948882), 'offset_4'), (234, 4, to_timestamp(1335948882), to_timestamp(1341836440), 'offset_4'), (235, 4, to_timestamp(1341836440), to_timestamp(1347374038), 'offset_4'), (236, 4, to_timestamp(1347374038), to_timestamp(1351919852), 'offset_4'), (237, 4, to_timestamp(1351919852), to_timestamp(1355917258), 'offset_4'), (238, 4, to_timestamp(1355917258), to_timestamp(1359992788), 'offset_4'), (239, 4, to_timestamp(1359992788), to_timestamp(1363197389), 'offset_4'), (240, 4, to_timestamp(1363197389), to_timestamp(1366232428), 'offset_4'), (241, 4, to_timestamp(1366232428), to_timestamp(1369274617), 'offset_4'), (242, 4, to_timestamp(1369274617), to_timestamp(1372609752), 'offset_4'), (243, 4, to_timestamp(1372609752), to_timestamp(1376073713), 'offset_4'), (244, 4, to_timestamp(1376073713), to_timestamp(1379631757), 'offset_4'), (245, 4, to_timestamp(1379631757), to_timestamp(1382926402), 'offset_4'), (246, 4, to_timestamp(1382926402), to_timestamp(1385588343), 'offset_4'), (247, 4, to_timestamp(1385588343), to_timestamp(1388778959), 'offset_4'), (248, 4, to_timestamp(1388778959), to_timestamp(1391103673), 'offset_4'), (249, 4, to_timestamp(1391103673), to_timestamp(1392908579), 'offset_4'), (250, 4, to_timestamp(1392908579), to_timestamp(1394885769), 'offset_4'), (251, 4, to_timestamp(1394885769), to_timestamp(1396885385), 'offset_4'), (252, 4, to_timestamp(1396885385), to_timestamp(1398549283), 'offset_4'), (253, 4, to_timestamp(1398549283), to_timestamp(1400503723), 'offset_4'), (254, 4, to_timestamp(1400503723), to_timestamp(1402352615), 'offset_4'), (255, 4, to_timestamp(1402352615), to_timestamp(1404216033), 'offset_4'), (256, 4, to_timestamp(1404216033), to_timestamp(1406060485), 'offset_4'), (257, 4, to_timestamp(1406060485), to_timestamp(1407758673), 'offset_4'), (258, 4, to_timestamp(1407758673), to_timestamp(1409678147), 'offset_4'), (259, 4, to_timestamp(1409678147), NULL, 'offset_4'), (260, 8, NULL, to_timestamp(1301547408), 'base_8'), (261, 8, to_timestamp(1301547408), to_timestamp(1319207061), 'base_8'), (262, 8, to_timestamp(1319207061), to_timestamp(1331907975), 'base_8'), (263, 8, to_timestamp(1331907975), to_timestamp(1343286182), 'base_8'), (264, 8, to_timestamp(1343286182), to_timestamp(1352977181), 'base_8'), (265, 8, to_timestamp(1352977181), to_timestamp(1360804033), 'base_8'), (266, 8, to_timestamp(1360804033), to_timestamp(1366932939), 'base_8'), (267, 8, to_timestamp(1366932939), to_timestamp(1373441982), 'base_8'), (268, 8, to_timestamp(1373441982), to_timestamp(1380506360), 'base_8'), (269, 8, to_timestamp(1380506360), to_timestamp(1386320717), 'base_8'), (270, 8, to_timestamp(1386320717), to_timestamp(1391630659), 'base_8'), (271, 8, to_timestamp(1391630659), to_timestamp(1395381835), 'base_8'), (272, 8, to_timestamp(1395381835), to_timestamp(1399043709), 'base_8'), (273, 8, to_timestamp(1399043709), to_timestamp(1402729249), 'base_8'), (274, 8, to_timestamp(1402729249), to_timestamp(1406468947), 'base_8'), (275, 8, to_timestamp(1406468947), to_timestamp(1410196512), 'base_8'), (276, 8, to_timestamp(1410196512), NULL, 'base_8'), (277, 8, NULL, to_timestamp(1292397864), 'offset_8'), (278, 8, to_timestamp(1292397864), to_timestamp(1313675640), 'offset_8'), (279, 8, to_timestamp(1313675640), to_timestamp(1327845133), 'offset_8'), (280, 8, to_timestamp(1327845133), to_timestamp(1338899194), 'offset_8'), (281, 8, to_timestamp(1338899194), to_timestamp(1349706373), 'offset_8'), (282, 8, to_timestamp(1349706373), to_timestamp(1358284148), 'offset_8'), (283, 8, to_timestamp(1358284148), to_timestamp(1364678140), 'offset_8'), (284, 8, to_timestamp(1364678140), to_timestamp(1370958777), 'offset_8'), (285, 8, to_timestamp(1370958777), to_timestamp(1377918575), 'offset_8'), (286, 8, to_timestamp(1377918575), to_timestamp(1384264344), 'offset_8'), (287, 8, to_timestamp(1384264344), to_timestamp(1390232275), 'offset_8'), (288, 8, to_timestamp(1390232275), to_timestamp(1393952496), 'offset_8'), (289, 8, to_timestamp(1393952496), to_timestamp(1397655240), 'offset_8'), (290, 8, to_timestamp(1397655240), to_timestamp(1401421877), 'offset_8'), (291, 8, to_timestamp(1401421877), to_timestamp(1405102588), 'offset_8'), (292, 8, to_timestamp(1405102588), to_timestamp(1408641886), 'offset_8'), (293, 8, to_timestamp(1408641886), NULL, 'offset_8'), (294, 16, NULL, to_timestamp(1319207061), 'base_16'), (295, 16, to_timestamp(1319207061), to_timestamp(1343286182), 'base_16'), (296, 16, to_timestamp(1343286182), to_timestamp(1360804033), 'base_16'), (297, 16, to_timestamp(1360804033), to_timestamp(1373441982), 'base_16'), (298, 16, to_timestamp(1373441982), to_timestamp(1386320717), 'base_16'), (299, 16, to_timestamp(1386320717), to_timestamp(1395381835), 'base_16'), (300, 16, to_timestamp(1395381835), to_timestamp(1402729249), 'base_16'), (301, 16, to_timestamp(1402729249), to_timestamp(1410196512), 'base_16'), (302, 16, to_timestamp(1410196512), NULL, 'base_16'), (303, 16, NULL, to_timestamp(1304224259), 'offset_16'), (304, 16, to_timestamp(1304224259), to_timestamp(1333219977), 'offset_16'), (305, 16, to_timestamp(1333219977), to_timestamp(1354019602), 'offset_16'), (306, 16, to_timestamp(1354019602), to_timestamp(1367701197), 'offset_16'), (307, 16, to_timestamp(1367701197), to_timestamp(1381249192), 'offset_16'), (308, 16, to_timestamp(1381249192), to_timestamp(1392058508), 'offset_16'), (309, 16, to_timestamp(1392058508), to_timestamp(1399504382), 'offset_16'), (310, 16, to_timestamp(1399504382), to_timestamp(1406842293), 'offset_16'), (311, 16, to_timestamp(1406842293), NULL, 'offset_16'), (312, 32, NULL, to_timestamp(1343286182), 'base_32'), (313, 32, to_timestamp(1343286182), to_timestamp(1373441982), 'base_32'), (314, 32, to_timestamp(1373441982), to_timestamp(1395381835), 'base_32'), (315, 32, to_timestamp(1395381835), to_timestamp(1410196512), 'base_32'), (316, 32, to_timestamp(1410196512), NULL, 'base_32'), (317, 32, NULL, to_timestamp(1321052448), 'offset_32'), (318, 32, to_timestamp(1321052448), to_timestamp(1361648185), 'offset_32'), (319, 32, to_timestamp(1361648185), to_timestamp(1386901228), 'offset_32'), (320, 32, to_timestamp(1386901228), to_timestamp(1403206115), 'offset_32'), (321, 32, to_timestamp(1403206115), NULL, 'offset_32'), (322, 64, NULL, to_timestamp(1373441982), 'base_64'), (323, 64, to_timestamp(1373441982), to_timestamp(1410196512), 'base_64'), (324, 64, to_timestamp(1410196512), NULL, 'base_64'), (325, 64, NULL, to_timestamp(1344714297), 'offset_64'), (326, 64, to_timestamp(1344714297), to_timestamp(1395908273), 'offset_64'), (327, 64, to_timestamp(1395908273), NULL, 'offset_64'), (328, 128, NULL, to_timestamp(1410196512), 'base_128'), (329, 128, to_timestamp(1410196512), NULL, 'base_128'), (330, 128, NULL, to_timestamp(1374243416), 'offset_128'), (331, 128, to_timestamp(1374243416), NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS USERS_VIEWS_histogram;
CREATE TABLE USERS_VIEWS_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO USERS_VIEWS_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 2, 'base_1'), (1, 1, 2, 5, 'base_1'), (2, 1, 5, 8, 'base_1'), (3, 1, 8, 11, 'base_1'), (4, 1, 11, 14, 'base_1'), (5, 1, 14, 16, 'base_1'), (6, 1, 16, 19, 'base_1'), (7, 1, 19, 22, 'base_1'), (8, 1, 22, 25, 'base_1'), (9, 1, 25, 28, 'base_1'), (10, 1, 28, 30, 'base_1'), (11, 1, 30, 33, 'base_1'), (12, 1, 33, 36, 'base_1'), (13, 1, 36, 39, 'base_1'), (14, 1, 39, 42, 'base_1'), (15, 1, 42, 44, 'base_1'), (16, 1, 44, 47, 'base_1'), (17, 1, 47, 50, 'base_1'), (18, 1, 50, 53, 'base_1'), (19, 1, 53, 56, 'base_1'), (20, 1, 56, 58, 'base_1'), (21, 1, 58, 61, 'base_1'), (22, 1, 61, 64, 'base_1'), (23, 1, 64, 67, 'base_1'), (24, 1, 67, 70, 'base_1'), (25, 1, 70, 72, 'base_1'), (26, 1, 72, 75, 'base_1'), (27, 1, 75, 78, 'base_1'), (28, 1, 78, 81, 'base_1'), (29, 1, 81, 84, 'base_1'), (30, 1, 84, 86, 'base_1'), (31, 1, 86, 89, 'base_1'), (32, 1, 89, 92, 'base_1'), (33, 1, 92, 95, 'base_1'), (34, 1, 95, 98, 'base_1'), (35, 1, 98, 101, 'base_1'), (36, 1, 101, 103, 'base_1'), (37, 1, 103, 106, 'base_1'), (38, 1, 106, 110, 'base_1'), (39, 1, 110, 113, 'base_1'), (40, 1, 113, 117, 'base_1'), (41, 1, 117, 120, 'base_1'), (42, 1, 120, 123, 'base_1'), (43, 1, 123, 126, 'base_1'), (44, 1, 126, 130, 'base_1'), (45, 1, 130, 134, 'base_1'), (46, 1, 134, 137, 'base_1'), (47, 1, 137, 140, 'base_1'), (48, 1, 140, 146, 'base_1'), (49, 1, 146, 149, 'base_1'), (50, 1, 149, 153, 'base_1'), (51, 1, 153, 156, 'base_1'), (52, 1, 156, 160, 'base_1'), (53, 1, 160, 164, 'base_1'), (54, 1, 164, 168, 'base_1'), (55, 1, 168, 171, 'base_1'), (56, 1, 171, 174, 'base_1'), (57, 1, 174, 178, 'base_1'), (58, 1, 178, 182, 'base_1'), (59, 1, 182, 186, 'base_1'), (60, 1, 186, 190, 'base_1'), (61, 1, 190, 192, 'base_1'), (62, 1, 192, 195, 'base_1'), (63, 1, 195, 198, 'base_1'), (64, 1, 198, 202, 'base_1'), (65, 1, 202, 205, 'base_1'), (66, 1, 205, 209, 'base_1'), (67, 1, 209, 212, 'base_1'), (68, 1, 212, 216, 'base_1'), (69, 1, 216, 221, 'base_1'), (70, 1, 221, 227, 'base_1'), (71, 1, 227, 233, 'base_1'), (72, 1, 233, 240, 'base_1'), (73, 1, 240, 249, 'base_1'), (74, 1, 249, 255, 'base_1'), (75, 1, 255, 261, 'base_1'), (76, 1, 261, 264, 'base_1'), (77, 1, 264, 266, 'base_1'), (78, 1, 266, 269, 'base_1'), (79, 1, 269, 273, 'base_1'), (80, 1, 273, 279, 'base_1'), (81, 1, 279, 287, 'base_1'), (82, 1, 287, 294, 'base_1'), (83, 1, 294, 301, 'base_1'), (84, 1, 301, 309, 'base_1'), (85, 1, 309, 318, 'base_1'), (86, 1, 318, 328, 'base_1'), (87, 1, 328, 331, 'base_1'), (88, 1, 331, 336, 'base_1'), (89, 1, 336, 343, 'base_1'), (90, 1, 343, 356, 'base_1'), (91, 1, 356, 363, 'base_1'), (92, 1, 363, 378, 'base_1'), (93, 1, 378, 385, 'base_1'), (94, 1, 385, 393, 'base_1'), (95, 1, 393, 430, 'base_1'), (96, 1, 430, 445, 'base_1'), (97, 1, 445, 462, 'base_1'), (98, 1, 462, 488, 'base_1'), (99, 1, 488, 515, 'base_1'), (100, 1, 515, 538, 'base_1'), (101, 1, 538, 582, 'base_1'), (102, 1, 582, 591, 'base_1'), (103, 1, 591, 627, 'base_1'), (104, 1, 627, 641, 'base_1'), (105, 1, 641, 655, 'base_1'), (106, 1, 655, 671, 'base_1'), (107, 1, 671, 764, 'base_1'), (108, 1, 764, 783, 'base_1'), (109, 1, 783, 839, 'base_1'), (110, 1, 839, 878, 'base_1'), (111, 1, 878, 967, 'base_1'), (112, 1, 967, 991, 'base_1'), (113, 1, 991, 1050, 'base_1'), (114, 1, 1050, 1088, 'base_1'), (115, 1, 1088, 1126, 'base_1'), (116, 1, 1126, 1165, 'base_1'), (117, 1, 1165, 1245, 'base_1'), (118, 1, 1245, 1286, 'base_1'), (119, 1, 1286, 1319, 'base_1'), (120, 1, 1319, 1604, 'base_1'), (121, 1, 1604, 2252, 'base_1'), (122, 1, 2252, 2722, 'base_1'), (123, 1, 2722, 3320, 'base_1'), (124, 1, 3320, 3899, 'base_1'), (125, 1, 3899, 5441, 'base_1'), (126, 1, 5441, 5680, 'base_1'), (127, 1, 5680, 7357, 'base_1'), (128, 1, 7357, NULL, 'base_1'), (129, 2, NULL, 5, 'base_2'), (130, 2, 5, 11, 'base_2'), (131, 2, 11, 16, 'base_2'), (132, 2, 16, 22, 'base_2'), (133, 2, 22, 28, 'base_2'), (134, 2, 28, 33, 'base_2'), (135, 2, 33, 39, 'base_2'), (136, 2, 39, 44, 'base_2'), (137, 2, 44, 50, 'base_2'), (138, 2, 50, 56, 'base_2'), (139, 2, 56, 61, 'base_2'), (140, 2, 61, 67, 'base_2'), (141, 2, 67, 72, 'base_2'), (142, 2, 72, 78, 'base_2'), (143, 2, 78, 84, 'base_2'), (144, 2, 84, 89, 'base_2'), (145, 2, 89, 95, 'base_2'), (146, 2, 95, 101, 'base_2'), (147, 2, 101, 106, 'base_2'), (148, 2, 106, 113, 'base_2'), (149, 2, 113, 120, 'base_2'), (150, 2, 120, 126, 'base_2'), (151, 2, 126, 134, 'base_2'), (152, 2, 134, 140, 'base_2'), (153, 2, 140, 149, 'base_2'), (154, 2, 149, 156, 'base_2'), (155, 2, 156, 164, 'base_2'), (156, 2, 164, 171, 'base_2'), (157, 2, 171, 178, 'base_2'), (158, 2, 178, 186, 'base_2'), (159, 2, 186, 192, 'base_2'), (160, 2, 192, 198, 'base_2'), (161, 2, 198, 205, 'base_2'), (162, 2, 205, 212, 'base_2'), (163, 2, 212, 221, 'base_2'), (164, 2, 221, 233, 'base_2'), (165, 2, 233, 249, 'base_2'), (166, 2, 249, 261, 'base_2'), (167, 2, 261, 266, 'base_2'), (168, 2, 266, 273, 'base_2'), (169, 2, 273, 287, 'base_2'), (170, 2, 287, 301, 'base_2'), (171, 2, 301, 318, 'base_2'), (172, 2, 318, 331, 'base_2'), (173, 2, 331, 343, 'base_2'), (174, 2, 343, 363, 'base_2'), (175, 2, 363, 385, 'base_2'), (176, 2, 385, 430, 'base_2'), (177, 2, 430, 462, 'base_2'), (178, 2, 462, 515, 'base_2'), (179, 2, 515, 582, 'base_2'), (180, 2, 582, 627, 'base_2'), (181, 2, 627, 655, 'base_2'), (182, 2, 655, 764, 'base_2'), (183, 2, 764, 839, 'base_2'), (184, 2, 839, 967, 'base_2'), (185, 2, 967, 1050, 'base_2'), (186, 2, 1050, 1126, 'base_2'), (187, 2, 1126, 1245, 'base_2'), (188, 2, 1245, 1319, 'base_2'), (189, 2, 1319, 2252, 'base_2'), (190, 2, 2252, 3320, 'base_2'), (191, 2, 3320, 5441, 'base_2'), (192, 2, 5441, 7357, 'base_2'), (193, 2, 7357, NULL, 'base_2'), (194, 4, NULL, 11, 'base_4'), (195, 4, 11, 22, 'base_4'), (196, 4, 22, 33, 'base_4'), (197, 4, 33, 44, 'base_4'), (198, 4, 44, 56, 'base_4'), (199, 4, 56, 67, 'base_4'), (200, 4, 67, 78, 'base_4'), (201, 4, 78, 89, 'base_4'), (202, 4, 89, 101, 'base_4'), (203, 4, 101, 113, 'base_4'), (204, 4, 113, 126, 'base_4'), (205, 4, 126, 140, 'base_4'), (206, 4, 140, 156, 'base_4'), (207, 4, 156, 171, 'base_4'), (208, 4, 171, 186, 'base_4'), (209, 4, 186, 198, 'base_4'), (210, 4, 198, 212, 'base_4'), (211, 4, 212, 233, 'base_4'), (212, 4, 233, 261, 'base_4'), (213, 4, 261, 273, 'base_4'), (214, 4, 273, 301, 'base_4'), (215, 4, 301, 331, 'base_4'), (216, 4, 331, 363, 'base_4'), (217, 4, 363, 430, 'base_4'), (218, 4, 430, 515, 'base_4'), (219, 4, 515, 627, 'base_4'), (220, 4, 627, 764, 'base_4'), (221, 4, 764, 967, 'base_4'), (222, 4, 967, 1126, 'base_4'), (223, 4, 1126, 1319, 'base_4'), (224, 4, 1319, 3320, 'base_4'), (225, 4, 3320, 7357, 'base_4'), (226, 4, 7357, NULL, 'base_4'), (227, 4, NULL, 8, 'offset_4'), (228, 4, 8, 19, 'offset_4'), (229, 4, 19, 30, 'offset_4'), (230, 4, 30, 42, 'offset_4'), (231, 4, 42, 53, 'offset_4'), (232, 4, 53, 64, 'offset_4'), (233, 4, 64, 75, 'offset_4'), (234, 4, 75, 86, 'offset_4'), (235, 4, 86, 98, 'offset_4'), (236, 4, 98, 110, 'offset_4'), (237, 4, 110, 123, 'offset_4'), (238, 4, 123, 137, 'offset_4'), (239, 4, 137, 153, 'offset_4'), (240, 4, 153, 168, 'offset_4'), (241, 4, 168, 182, 'offset_4'), (242, 4, 182, 195, 'offset_4'), (243, 4, 195, 209, 'offset_4'), (244, 4, 209, 227, 'offset_4'), (245, 4, 227, 255, 'offset_4'), (246, 4, 255, 269, 'offset_4'), (247, 4, 269, 294, 'offset_4'), (248, 4, 294, 328, 'offset_4'), (249, 4, 328, 356, 'offset_4'), (250, 4, 356, 393, 'offset_4'), (251, 4, 393, 488, 'offset_4'), (252, 4, 488, 591, 'offset_4'), (253, 4, 591, 671, 'offset_4'), (254, 4, 671, 878, 'offset_4'), (255, 4, 878, 1088, 'offset_4'), (256, 4, 1088, 1286, 'offset_4'), (257, 4, 1286, 2722, 'offset_4'), (258, 4, 2722, 5680, 'offset_4'), (259, 4, 5680, NULL, 'offset_4'), (260, 8, NULL, 22, 'base_8'), (261, 8, 22, 44, 'base_8'), (262, 8, 44, 67, 'base_8'), (263, 8, 67, 89, 'base_8'), (264, 8, 89, 113, 'base_8'), (265, 8, 113, 140, 'base_8'), (266, 8, 140, 171, 'base_8'), (267, 8, 171, 198, 'base_8'), (268, 8, 198, 233, 'base_8'), (269, 8, 233, 273, 'base_8'), (270, 8, 273, 331, 'base_8'), (271, 8, 331, 430, 'base_8'), (272, 8, 430, 627, 'base_8'), (273, 8, 627, 967, 'base_8'), (274, 8, 967, 1319, 'base_8'), (275, 8, 1319, 7357, 'base_8'), (276, 8, 7357, NULL, 'base_8'), (277, 8, NULL, 14, 'offset_8'), (278, 8, 14, 36, 'offset_8'), (279, 8, 36, 58, 'offset_8'), (280, 8, 58, 81, 'offset_8'), (281, 8, 81, 103, 'offset_8'), (282, 8, 103, 130, 'offset_8'), (283, 8, 130, 160, 'offset_8'), (284, 8, 160, 190, 'offset_8'), (285, 8, 190, 216, 'offset_8'), (286, 8, 216, 264, 'offset_8'), (287, 8, 264, 309, 'offset_8'), (288, 8, 309, 378, 'offset_8'), (289, 8, 378, 538, 'offset_8'), (290, 8, 538, 783, 'offset_8'), (291, 8, 783, 1165, 'offset_8'), (292, 8, 1165, 3899, 'offset_8'), (293, 8, 3899, NULL, 'offset_8'), (294, 16, NULL, 44, 'base_16'), (295, 16, 44, 89, 'base_16'), (296, 16, 89, 140, 'base_16'), (297, 16, 140, 198, 'base_16'), (298, 16, 198, 273, 'base_16'), (299, 16, 273, 430, 'base_16'), (300, 16, 430, 967, 'base_16'), (301, 16, 967, 7357, 'base_16'), (302, 16, 7357, NULL, 'base_16'), (303, 16, NULL, 25, 'offset_16'), (304, 16, 25, 70, 'offset_16'), (305, 16, 70, 117, 'offset_16'), (306, 16, 117, 174, 'offset_16'), (307, 16, 174, 240, 'offset_16'), (308, 16, 240, 336, 'offset_16'), (309, 16, 336, 641, 'offset_16'), (310, 16, 641, 1604, 'offset_16'), (311, 16, 1604, NULL, 'offset_16'), (312, 32, NULL, 89, 'base_32'), (313, 32, 89, 198, 'base_32'), (314, 32, 198, 430, 'base_32'), (315, 32, 430, 7357, 'base_32'), (316, 32, 7357, NULL, 'base_32'), (317, 32, NULL, 47, 'offset_32'), (318, 32, 47, 146, 'offset_32'), (319, 32, 146, 279, 'offset_32'), (320, 32, 279, 991, 'offset_32'), (321, 32, 991, NULL, 'offset_32'), (322, 64, NULL, 198, 'base_64'), (323, 64, 198, 7357, 'base_64'), (324, 64, 7357, NULL, 'base_64'), (325, 64, NULL, 92, 'offset_64'), (326, 64, 92, 445, 'offset_64'), (327, 64, 445, NULL, 'offset_64'), (328, 128, NULL, 7357, 'base_128'), (329, 128, 7357, NULL, 'base_128'), (330, 128, NULL, 202, 'offset_128'), (331, 128, 202, NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS USERS_UPVOTES_histogram;
CREATE TABLE USERS_UPVOTES_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO USERS_UPVOTES_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 2, 'base_1'), (1, 1, 2, 5, 'base_1'), (2, 1, 5, 7, 'base_1'), (3, 1, 7, 10, 'base_1'), (4, 1, 10, 12, 'base_1'), (5, 1, 12, 15, 'base_1'), (6, 1, 15, 18, 'base_1'), (7, 1, 18, 20, 'base_1'), (8, 1, 20, 23, 'base_1'), (9, 1, 23, 25, 'base_1'), (10, 1, 25, 28, 'base_1'), (11, 1, 28, 30, 'base_1'), (12, 1, 30, 33, 'base_1'), (13, 1, 33, 36, 'base_1'), (14, 1, 36, 38, 'base_1'), (15, 1, 38, 41, 'base_1'), (16, 1, 41, 43, 'base_1'), (17, 1, 43, 46, 'base_1'), (18, 1, 46, 48, 'base_1'), (19, 1, 48, 51, 'base_1'), (20, 1, 51, 54, 'base_1'), (21, 1, 54, 56, 'base_1'), (22, 1, 56, 59, 'base_1'), (23, 1, 59, 61, 'base_1'), (24, 1, 61, 64, 'base_1'), (25, 1, 64, 66, 'base_1'), (26, 1, 66, 69, 'base_1'), (27, 1, 69, 72, 'base_1'), (28, 1, 72, 74, 'base_1'), (29, 1, 74, 77, 'base_1'), (30, 1, 77, 79, 'base_1'), (31, 1, 79, 82, 'base_1'), (32, 1, 82, 84, 'base_1'), (33, 1, 84, 87, 'base_1'), (34, 1, 87, 90, 'base_1'), (35, 1, 90, 92, 'base_1'), (36, 1, 92, 95, 'base_1'), (37, 1, 95, 97, 'base_1'), (38, 1, 97, 100, 'base_1'), (39, 1, 100, 103, 'base_1'), (40, 1, 103, 106, 'base_1'), (41, 1, 106, 109, 'base_1'), (42, 1, 109, 111, 'base_1'), (43, 1, 111, 115, 'base_1'), (44, 1, 115, 117, 'base_1'), (45, 1, 117, 120, 'base_1'), (46, 1, 120, 123, 'base_1'), (47, 1, 123, 126, 'base_1'), (48, 1, 126, 131, 'base_1'), (49, 1, 131, 135, 'base_1'), (50, 1, 135, 138, 'base_1'), (51, 1, 138, 140, 'base_1'), (52, 1, 140, 144, 'base_1'), (53, 1, 144, 147, 'base_1'), (54, 1, 147, 150, 'base_1'), (55, 1, 150, 154, 'base_1'), (56, 1, 154, 156, 'base_1'), (57, 1, 156, 161, 'base_1'), (58, 1, 161, 164, 'base_1'), (59, 1, 164, 169, 'base_1'), (60, 1, 169, 171, 'base_1'), (61, 1, 171, 175, 'base_1'), (62, 1, 175, 178, 'base_1'), (63, 1, 178, 183, 'base_1'), (64, 1, 183, 187, 'base_1'), (65, 1, 187, 190, 'base_1'), (66, 1, 190, 194, 'base_1'), (67, 1, 194, 198, 'base_1'), (68, 1, 198, 201, 'base_1'), (69, 1, 201, 205, 'base_1'), (70, 1, 205, 212, 'base_1'), (71, 1, 212, 218, 'base_1'), (72, 1, 218, 221, 'base_1'), (73, 1, 221, 225, 'base_1'), (74, 1, 225, 229, 'base_1'), (75, 1, 229, 233, 'base_1'), (76, 1, 233, 238, 'base_1'), (77, 1, 238, 242, 'base_1'), (78, 1, 242, 252, 'base_1'), (79, 1, 252, 262, 'base_1'), (80, 1, 262, 283, 'base_1'), (81, 1, 283, 296, 'base_1'), (82, 1, 296, 300, 'base_1'), (83, 1, 300, 323, 'base_1'), (84, 1, 323, 326, 'base_1'), (85, 1, 326, 333, 'base_1'), (86, 1, 333, 339, 'base_1'), (87, 1, 339, 347, 'base_1'), (88, 1, 347, 355, 'base_1'), (89, 1, 355, 360, 'base_1'), (90, 1, 360, 368, 'base_1'), (91, 1, 368, 386, 'base_1'), (92, 1, 386, 403, 'base_1'), (93, 1, 403, 406, 'base_1'), (94, 1, 406, 418, 'base_1'), (95, 1, 418, 428, 'base_1'), (96, 1, 428, 444, 'base_1'), (97, 1, 444, 456, 'base_1'), (98, 1, 456, 460, 'base_1'), (99, 1, 460, 477, 'base_1'), (100, 1, 477, 489, 'base_1'), (101, 1, 489, 505, 'base_1'), (102, 1, 505, 550, 'base_1'), (103, 1, 550, 582, 'base_1'), (104, 1, 582, 600, 'base_1'), (105, 1, 600, 604, 'base_1'), (106, 1, 604, 625, 'base_1'), (107, 1, 625, 630, 'base_1'), (108, 1, 630, 662, 'base_1'), (109, 1, 662, 693, 'base_1'), (110, 1, 693, 729, 'base_1'), (111, 1, 729, 804, 'base_1'), (112, 1, 804, 857, 'base_1'), (113, 1, 857, 910, 'base_1'), (114, 1, 910, 1014, 'base_1'), (115, 1, 1014, 1230, 'base_1'), (116, 1, 1230, 1273, 'base_1'), (117, 1, 1273, 1346, 'base_1'), (118, 1, 1346, 1547, 'base_1'), (119, 1, 1547, 1607, 'base_1'), (120, 1, 1607, 2122, 'base_1'), (121, 1, 2122, 2219, 'base_1'), (122, 1, 2219, 2468, 'base_1'), (123, 1, 2468, 2664, 'base_1'), (124, 1, 2664, 3079, 'base_1'), (125, 1, 3079, 4235, 'base_1'), (126, 1, 4235, 6054, 'base_1'), (127, 1, 6054, 10523, 'base_1'), (128, 1, 10523, NULL, 'base_1'), (129, 2, NULL, 5, 'base_2'), (130, 2, 5, 10, 'base_2'), (131, 2, 10, 15, 'base_2'), (132, 2, 15, 20, 'base_2'), (133, 2, 20, 25, 'base_2'), (134, 2, 25, 30, 'base_2'), (135, 2, 30, 36, 'base_2'), (136, 2, 36, 41, 'base_2'), (137, 2, 41, 46, 'base_2'), (138, 2, 46, 51, 'base_2'), (139, 2, 51, 56, 'base_2'), (140, 2, 56, 61, 'base_2'), (141, 2, 61, 66, 'base_2'), (142, 2, 66, 72, 'base_2'), (143, 2, 72, 77, 'base_2'), (144, 2, 77, 82, 'base_2'), (145, 2, 82, 87, 'base_2'), (146, 2, 87, 92, 'base_2'), (147, 2, 92, 97, 'base_2'), (148, 2, 97, 103, 'base_2'), (149, 2, 103, 109, 'base_2'), (150, 2, 109, 115, 'base_2'), (151, 2, 115, 120, 'base_2'), (152, 2, 120, 126, 'base_2'), (153, 2, 126, 135, 'base_2'), (154, 2, 135, 140, 'base_2'), (155, 2, 140, 147, 'base_2'), (156, 2, 147, 154, 'base_2'), (157, 2, 154, 161, 'base_2'), (158, 2, 161, 169, 'base_2'), (159, 2, 169, 175, 'base_2'), (160, 2, 175, 183, 'base_2'), (161, 2, 183, 190, 'base_2'), (162, 2, 190, 198, 'base_2'), (163, 2, 198, 205, 'base_2'), (164, 2, 205, 218, 'base_2'), (165, 2, 218, 225, 'base_2'), (166, 2, 225, 233, 'base_2'), (167, 2, 233, 242, 'base_2'), (168, 2, 242, 262, 'base_2'), (169, 2, 262, 296, 'base_2'), (170, 2, 296, 323, 'base_2'), (171, 2, 323, 333, 'base_2'), (172, 2, 333, 347, 'base_2'), (173, 2, 347, 360, 'base_2'), (174, 2, 360, 386, 'base_2'), (175, 2, 386, 406, 'base_2'), (176, 2, 406, 428, 'base_2'), (177, 2, 428, 456, 'base_2'), (178, 2, 456, 477, 'base_2'), (179, 2, 477, 505, 'base_2'), (180, 2, 505, 582, 'base_2'), (181, 2, 582, 604, 'base_2'), (182, 2, 604, 630, 'base_2'), (183, 2, 630, 693, 'base_2'), (184, 2, 693, 804, 'base_2'), (185, 2, 804, 910, 'base_2'), (186, 2, 910, 1230, 'base_2'), (187, 2, 1230, 1346, 'base_2'), (188, 2, 1346, 1607, 'base_2'), (189, 2, 1607, 2219, 'base_2'), (190, 2, 2219, 2664, 'base_2'), (191, 2, 2664, 4235, 'base_2'), (192, 2, 4235, 10523, 'base_2'), (193, 2, 10523, NULL, 'base_2'), (194, 4, NULL, 10, 'base_4'), (195, 4, 10, 20, 'base_4'), (196, 4, 20, 30, 'base_4'), (197, 4, 30, 41, 'base_4'), (198, 4, 41, 51, 'base_4'), (199, 4, 51, 61, 'base_4'), (200, 4, 61, 72, 'base_4'), (201, 4, 72, 82, 'base_4'), (202, 4, 82, 92, 'base_4'), (203, 4, 92, 103, 'base_4'), (204, 4, 103, 115, 'base_4'), (205, 4, 115, 126, 'base_4'), (206, 4, 126, 140, 'base_4'), (207, 4, 140, 154, 'base_4'), (208, 4, 154, 169, 'base_4'), (209, 4, 169, 183, 'base_4'), (210, 4, 183, 198, 'base_4'), (211, 4, 198, 218, 'base_4'), (212, 4, 218, 233, 'base_4'), (213, 4, 233, 262, 'base_4'), (214, 4, 262, 323, 'base_4'), (215, 4, 323, 347, 'base_4'), (216, 4, 347, 386, 'base_4'), (217, 4, 386, 428, 'base_4'), (218, 4, 428, 477, 'base_4'), (219, 4, 477, 582, 'base_4'), (220, 4, 582, 630, 'base_4'), (221, 4, 630, 804, 'base_4'), (222, 4, 804, 1230, 'base_4'), (223, 4, 1230, 1607, 'base_4'), (224, 4, 1607, 2664, 'base_4'), (225, 4, 2664, 10523, 'base_4'), (226, 4, 10523, NULL, 'base_4'), (227, 4, NULL, 7, 'offset_4'), (228, 4, 7, 18, 'offset_4'), (229, 4, 18, 28, 'offset_4'), (230, 4, 28, 38, 'offset_4'), (231, 4, 38, 48, 'offset_4'), (232, 4, 48, 59, 'offset_4'), (233, 4, 59, 69, 'offset_4'), (234, 4, 69, 79, 'offset_4'), (235, 4, 79, 90, 'offset_4'), (236, 4, 90, 100, 'offset_4'), (237, 4, 100, 111, 'offset_4'), (238, 4, 111, 123, 'offset_4'), (239, 4, 123, 138, 'offset_4'), (240, 4, 138, 150, 'offset_4'), (241, 4, 150, 164, 'offset_4'), (242, 4, 164, 178, 'offset_4'), (243, 4, 178, 194, 'offset_4'), (244, 4, 194, 212, 'offset_4'), (245, 4, 212, 229, 'offset_4'), (246, 4, 229, 252, 'offset_4'), (247, 4, 252, 300, 'offset_4'), (248, 4, 300, 339, 'offset_4'), (249, 4, 339, 368, 'offset_4'), (250, 4, 368, 418, 'offset_4'), (251, 4, 418, 460, 'offset_4'), (252, 4, 460, 550, 'offset_4'), (253, 4, 550, 625, 'offset_4'), (254, 4, 625, 729, 'offset_4'), (255, 4, 729, 1014, 'offset_4'), (256, 4, 1014, 1547, 'offset_4'), (257, 4, 1547, 2468, 'offset_4'), (258, 4, 2468, 6054, 'offset_4'), (259, 4, 6054, NULL, 'offset_4'), (260, 8, NULL, 20, 'base_8'), (261, 8, 20, 41, 'base_8'), (262, 8, 41, 61, 'base_8'), (263, 8, 61, 82, 'base_8'), (264, 8, 82, 103, 'base_8'), (265, 8, 103, 126, 'base_8'), (266, 8, 126, 154, 'base_8'), (267, 8, 154, 183, 'base_8'), (268, 8, 183, 218, 'base_8'), (269, 8, 218, 262, 'base_8'), (270, 8, 262, 347, 'base_8'), (271, 8, 347, 428, 'base_8'), (272, 8, 428, 582, 'base_8'), (273, 8, 582, 804, 'base_8'), (274, 8, 804, 1607, 'base_8'), (275, 8, 1607, 10523, 'base_8'), (276, 8, 10523, NULL, 'base_8'), (277, 8, NULL, 12, 'offset_8'), (278, 8, 12, 33, 'offset_8'), (279, 8, 33, 54, 'offset_8'), (280, 8, 54, 74, 'offset_8'), (281, 8, 74, 95, 'offset_8'), (282, 8, 95, 117, 'offset_8'), (283, 8, 117, 144, 'offset_8'), (284, 8, 144, 171, 'offset_8'), (285, 8, 171, 201, 'offset_8'), (286, 8, 201, 238, 'offset_8'), (287, 8, 238, 326, 'offset_8'), (288, 8, 326, 403, 'offset_8'), (289, 8, 403, 489, 'offset_8'), (290, 8, 489, 662, 'offset_8'), (291, 8, 662, 1273, 'offset_8'), (292, 8, 1273, 3079, 'offset_8'), (293, 8, 3079, NULL, 'offset_8'), (294, 16, NULL, 41, 'base_16'), (295, 16, 41, 82, 'base_16'), (296, 16, 82, 126, 'base_16'), (297, 16, 126, 183, 'base_16'), (298, 16, 183, 262, 'base_16'), (299, 16, 262, 428, 'base_16'), (300, 16, 428, 804, 'base_16'), (301, 16, 804, 10523, 'base_16'), (302, 16, 10523, NULL, 'base_16'), (303, 16, NULL, 23, 'offset_16'), (304, 16, 23, 64, 'offset_16'), (305, 16, 64, 106, 'offset_16'), (306, 16, 106, 156, 'offset_16'), (307, 16, 156, 221, 'offset_16'), (308, 16, 221, 355, 'offset_16'), (309, 16, 355, 600, 'offset_16'), (310, 16, 600, 2122, 'offset_16'), (311, 16, 2122, NULL, 'offset_16'), (312, 32, NULL, 82, 'base_32'), (313, 32, 82, 183, 'base_32'), (314, 32, 183, 428, 'base_32'), (315, 32, 428, 10523, 'base_32'), (316, 32, 10523, NULL, 'base_32'), (317, 32, NULL, 43, 'offset_32'), (318, 32, 43, 131, 'offset_32'), (319, 32, 131, 283, 'offset_32'), (320, 32, 283, 857, 'offset_32'), (321, 32, 857, NULL, 'offset_32'), (322, 64, NULL, 183, 'base_64'), (323, 64, 183, 10523, 'base_64'), (324, 64, 10523, NULL, 'base_64'), (325, 64, NULL, 84, 'offset_64'), (326, 64, 84, 444, 'offset_64'), (327, 64, 444, NULL, 'offset_64'), (328, 128, NULL, 10523, 'base_128'), (329, 128, 10523, NULL, 'base_128'), (330, 128, NULL, 187, 'offset_128'), (331, 128, 187, NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS USERS_REPUTATION_histogram;
CREATE TABLE USERS_REPUTATION_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO USERS_REPUTATION_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 8, 'base_1'), (1, 1, 8, 15, 'base_1'), (2, 1, 15, 23, 'base_1'), (3, 1, 23, 30, 'base_1'), (4, 1, 30, 38, 'base_1'), (5, 1, 38, 45, 'base_1'), (6, 1, 45, 53, 'base_1'), (7, 1, 53, 60, 'base_1'), (8, 1, 60, 68, 'base_1'), (9, 1, 68, 75, 'base_1'), (10, 1, 75, 83, 'base_1'), (11, 1, 83, 90, 'base_1'), (12, 1, 90, 98, 'base_1'), (13, 1, 98, 105, 'base_1'), (14, 1, 105, 113, 'base_1'), (15, 1, 113, 120, 'base_1'), (16, 1, 120, 128, 'base_1'), (17, 1, 128, 135, 'base_1'), (18, 1, 135, 143, 'base_1'), (19, 1, 143, 150, 'base_1'), (20, 1, 150, 158, 'base_1'), (21, 1, 158, 165, 'base_1'), (22, 1, 165, 173, 'base_1'), (23, 1, 173, 180, 'base_1'), (24, 1, 180, 188, 'base_1'), (25, 1, 188, 195, 'base_1'), (26, 1, 195, 202, 'base_1'), (27, 1, 202, 211, 'base_1'), (28, 1, 211, 218, 'base_1'), (29, 1, 218, 226, 'base_1'), (30, 1, 226, 233, 'base_1'), (31, 1, 233, 241, 'base_1'), (32, 1, 241, 248, 'base_1'), (33, 1, 248, 256, 'base_1'), (34, 1, 256, 263, 'base_1'), (35, 1, 263, 271, 'base_1'), (36, 1, 271, 279, 'base_1'), (37, 1, 279, 288, 'base_1'), (38, 1, 288, 295, 'base_1'), (39, 1, 295, 304, 'base_1'), (40, 1, 304, 311, 'base_1'), (41, 1, 311, 319, 'base_1'), (42, 1, 319, 327, 'base_1'), (43, 1, 327, 336, 'base_1'), (44, 1, 336, 344, 'base_1'), (45, 1, 344, 352, 'base_1'), (46, 1, 352, 360, 'base_1'), (47, 1, 360, 368, 'base_1'), (48, 1, 368, 375, 'base_1'), (49, 1, 375, 386, 'base_1'), (50, 1, 386, 393, 'base_1'), (51, 1, 393, 401, 'base_1'), (52, 1, 401, 410, 'base_1'), (53, 1, 410, 417, 'base_1'), (54, 1, 417, 425, 'base_1'), (55, 1, 425, 437, 'base_1'), (56, 1, 437, 446, 'base_1'), (57, 1, 446, 455, 'base_1'), (58, 1, 455, 466, 'base_1'), (59, 1, 466, 476, 'base_1'), (60, 1, 476, 486, 'base_1'), (61, 1, 486, 496, 'base_1'), (62, 1, 496, 506, 'base_1'), (63, 1, 506, 521, 'base_1'), (64, 1, 521, 533, 'base_1'), (65, 1, 533, 548, 'base_1'), (66, 1, 548, 559, 'base_1'), (67, 1, 559, 572, 'base_1'), (68, 1, 572, 586, 'base_1'), (69, 1, 586, 597, 'base_1'), (70, 1, 597, 606, 'base_1'), (71, 1, 606, 619, 'base_1'), (72, 1, 619, 639, 'base_1'), (73, 1, 639, 651, 'base_1'), (74, 1, 651, 669, 'base_1'), (75, 1, 669, 683, 'base_1'), (76, 1, 683, 701, 'base_1'), (77, 1, 701, 719, 'base_1'), (78, 1, 719, 738, 'base_1'), (79, 1, 738, 750, 'base_1'), (80, 1, 750, 763, 'base_1'), (81, 1, 763, 790, 'base_1'), (82, 1, 790, 804, 'base_1'), (83, 1, 804, 829, 'base_1'), (84, 1, 829, 844, 'base_1'), (85, 1, 844, 869, 'base_1'), (86, 1, 869, 890, 'base_1'), (87, 1, 890, 913, 'base_1'), (88, 1, 913, 931, 'base_1'), (89, 1, 931, 961, 'base_1'), (90, 1, 961, 1006, 'base_1'), (91, 1, 1006, 1054, 'base_1'), (92, 1, 1054, 1075, 'base_1'), (93, 1, 1075, 1097, 'base_1'), (94, 1, 1097, 1137, 'base_1'), (95, 1, 1137, 1175, 'base_1'), (96, 1, 1175, 1207, 'base_1'), (97, 1, 1207, 1249, 'base_1'), (98, 1, 1249, 1282, 'base_1'), (99, 1, 1282, 1318, 'base_1'), (100, 1, 1318, 1376, 'base_1'), (101, 1, 1376, 1410, 'base_1'), (102, 1, 1410, 1463, 'base_1'), (103, 1, 1463, 1525, 'base_1'), (104, 1, 1525, 1621, 'base_1'), (105, 1, 1621, 1683, 'base_1'), (106, 1, 1683, 1815, 'base_1'), (107, 1, 1815, 1917, 'base_1'), (108, 1, 1917, 2002, 'base_1'), (109, 1, 2002, 2090, 'base_1'), (110, 1, 2090, 2185, 'base_1'), (111, 1, 2185, 2316, 'base_1'), (112, 1, 2316, 2452, 'base_1'), (113, 1, 2452, 2594, 'base_1'), (114, 1, 2594, 2951, 'base_1'), (115, 1, 2951, 3101, 'base_1'), (116, 1, 3101, 3536, 'base_1'), (117, 1, 3536, 3773, 'base_1'), (118, 1, 3773, 4546, 'base_1'), (119, 1, 4546, 4968, 'base_1'), (120, 1, 4968, 5807, 'base_1'), (121, 1, 5807, 6216, 'base_1'), (122, 1, 6216, 7227, 'base_1'), (123, 1, 7227, 8045, 'base_1'), (124, 1, 8045, 9800, 'base_1'), (125, 1, 9800, 11631, 'base_1'), (126, 1, 11631, 15236, 'base_1'), (127, 1, 15236, 22275, 'base_1'), (128, 1, 22275, NULL, 'base_1'), (129, 2, NULL, 15, 'base_2'), (130, 2, 15, 30, 'base_2'), (131, 2, 30, 45, 'base_2'), (132, 2, 45, 60, 'base_2'), (133, 2, 60, 75, 'base_2'), (134, 2, 75, 90, 'base_2'), (135, 2, 90, 105, 'base_2'), (136, 2, 105, 120, 'base_2'), (137, 2, 120, 135, 'base_2'), (138, 2, 135, 150, 'base_2'), (139, 2, 150, 165, 'base_2'), (140, 2, 165, 180, 'base_2'), (141, 2, 180, 195, 'base_2'), (142, 2, 195, 211, 'base_2'), (143, 2, 211, 226, 'base_2'), (144, 2, 226, 241, 'base_2'), (145, 2, 241, 256, 'base_2'), (146, 2, 256, 271, 'base_2'), (147, 2, 271, 288, 'base_2'), (148, 2, 288, 304, 'base_2'), (149, 2, 304, 319, 'base_2'), (150, 2, 319, 336, 'base_2'), (151, 2, 336, 352, 'base_2'), (152, 2, 352, 368, 'base_2'), (153, 2, 368, 386, 'base_2'), (154, 2, 386, 401, 'base_2'), (155, 2, 401, 417, 'base_2'), (156, 2, 417, 437, 'base_2'), (157, 2, 437, 455, 'base_2'), (158, 2, 455, 476, 'base_2'), (159, 2, 476, 496, 'base_2'), (160, 2, 496, 521, 'base_2'), (161, 2, 521, 548, 'base_2'), (162, 2, 548, 572, 'base_2'), (163, 2, 572, 597, 'base_2'), (164, 2, 597, 619, 'base_2'), (165, 2, 619, 651, 'base_2'), (166, 2, 651, 683, 'base_2'), (167, 2, 683, 719, 'base_2'), (168, 2, 719, 750, 'base_2'), (169, 2, 750, 790, 'base_2'), (170, 2, 790, 829, 'base_2'), (171, 2, 829, 869, 'base_2'), (172, 2, 869, 913, 'base_2'), (173, 2, 913, 961, 'base_2'), (174, 2, 961, 1054, 'base_2'), (175, 2, 1054, 1097, 'base_2'), (176, 2, 1097, 1175, 'base_2'), (177, 2, 1175, 1249, 'base_2'), (178, 2, 1249, 1318, 'base_2'), (179, 2, 1318, 1410, 'base_2'), (180, 2, 1410, 1525, 'base_2'), (181, 2, 1525, 1683, 'base_2'), (182, 2, 1683, 1917, 'base_2'), (183, 2, 1917, 2090, 'base_2'), (184, 2, 2090, 2316, 'base_2'), (185, 2, 2316, 2594, 'base_2'), (186, 2, 2594, 3101, 'base_2'), (187, 2, 3101, 3773, 'base_2'), (188, 2, 3773, 4968, 'base_2'), (189, 2, 4968, 6216, 'base_2'), (190, 2, 6216, 8045, 'base_2'), (191, 2, 8045, 11631, 'base_2'), (192, 2, 11631, 22275, 'base_2'), (193, 2, 22275, NULL, 'base_2'), (194, 4, NULL, 30, 'base_4'), (195, 4, 30, 60, 'base_4'), (196, 4, 60, 90, 'base_4'), (197, 4, 90, 120, 'base_4'), (198, 4, 120, 150, 'base_4'), (199, 4, 150, 180, 'base_4'), (200, 4, 180, 211, 'base_4'), (201, 4, 211, 241, 'base_4'), (202, 4, 241, 271, 'base_4'), (203, 4, 271, 304, 'base_4'), (204, 4, 304, 336, 'base_4'), (205, 4, 336, 368, 'base_4'), (206, 4, 368, 401, 'base_4'), (207, 4, 401, 437, 'base_4'), (208, 4, 437, 476, 'base_4'), (209, 4, 476, 521, 'base_4'), (210, 4, 521, 572, 'base_4'), (211, 4, 572, 619, 'base_4'), (212, 4, 619, 683, 'base_4'), (213, 4, 683, 750, 'base_4'), (214, 4, 750, 829, 'base_4'), (215, 4, 829, 913, 'base_4'), (216, 4, 913, 1054, 'base_4'), (217, 4, 1054, 1175, 'base_4'), (218, 4, 1175, 1318, 'base_4'), (219, 4, 1318, 1525, 'base_4'), (220, 4, 1525, 1917, 'base_4'), (221, 4, 1917, 2316, 'base_4'), (222, 4, 2316, 3101, 'base_4'), (223, 4, 3101, 4968, 'base_4'), (224, 4, 4968, 8045, 'base_4'), (225, 4, 8045, 22275, 'base_4'), (226, 4, 22275, NULL, 'base_4'), (227, 4, NULL, 23, 'offset_4'), (228, 4, 23, 53, 'offset_4'), (229, 4, 53, 83, 'offset_4'), (230, 4, 83, 113, 'offset_4'), (231, 4, 113, 143, 'offset_4'), (232, 4, 143, 173, 'offset_4'), (233, 4, 173, 202, 'offset_4'), (234, 4, 202, 233, 'offset_4'), (235, 4, 233, 263, 'offset_4'), (236, 4, 263, 295, 'offset_4'), (237, 4, 295, 327, 'offset_4'), (238, 4, 327, 360, 'offset_4'), (239, 4, 360, 393, 'offset_4'), (240, 4, 393, 425, 'offset_4'), (241, 4, 425, 466, 'offset_4'), (242, 4, 466, 506, 'offset_4'), (243, 4, 506, 559, 'offset_4'), (244, 4, 559, 606, 'offset_4'), (245, 4, 606, 669, 'offset_4'), (246, 4, 669, 738, 'offset_4'), (247, 4, 738, 804, 'offset_4'), (248, 4, 804, 890, 'offset_4'), (249, 4, 890, 1006, 'offset_4'), (250, 4, 1006, 1137, 'offset_4'), (251, 4, 1137, 1282, 'offset_4'), (252, 4, 1282, 1463, 'offset_4'), (253, 4, 1463, 1815, 'offset_4'), (254, 4, 1815, 2185, 'offset_4'), (255, 4, 2185, 2951, 'offset_4'), (256, 4, 2951, 4546, 'offset_4'), (257, 4, 4546, 7227, 'offset_4'), (258, 4, 7227, 15236, 'offset_4'), (259, 4, 15236, NULL, 'offset_4'), (260, 8, NULL, 60, 'base_8'), (261, 8, 60, 120, 'base_8'), (262, 8, 120, 180, 'base_8'), (263, 8, 180, 241, 'base_8'), (264, 8, 241, 304, 'base_8'), (265, 8, 304, 368, 'base_8'), (266, 8, 368, 437, 'base_8'), (267, 8, 437, 521, 'base_8'), (268, 8, 521, 619, 'base_8'), (269, 8, 619, 750, 'base_8'), (270, 8, 750, 913, 'base_8'), (271, 8, 913, 1175, 'base_8'), (272, 8, 1175, 1525, 'base_8'), (273, 8, 1525, 2316, 'base_8'), (274, 8, 2316, 4968, 'base_8'), (275, 8, 4968, 22275, 'base_8'), (276, 8, 22275, NULL, 'base_8'), (277, 8, NULL, 38, 'offset_8'), (278, 8, 38, 98, 'offset_8'), (279, 8, 98, 158, 'offset_8'), (280, 8, 158, 218, 'offset_8'), (281, 8, 218, 279, 'offset_8'), (282, 8, 279, 344, 'offset_8'), (283, 8, 344, 410, 'offset_8'), (284, 8, 410, 486, 'offset_8'), (285, 8, 486, 586, 'offset_8'), (286, 8, 586, 701, 'offset_8'), (287, 8, 701, 844, 'offset_8'), (288, 8, 844, 1075, 'offset_8'), (289, 8, 1075, 1376, 'offset_8'), (290, 8, 1376, 2002, 'offset_8'), (291, 8, 2002, 3536, 'offset_8'), (292, 8, 3536, 9800, 'offset_8'), (293, 8, 9800, NULL, 'offset_8'), (294, 16, NULL, 120, 'base_16'), (295, 16, 120, 241, 'base_16'), (296, 16, 241, 368, 'base_16'), (297, 16, 368, 521, 'base_16'), (298, 16, 521, 750, 'base_16'), (299, 16, 750, 1175, 'base_16'), (300, 16, 1175, 2316, 'base_16'), (301, 16, 2316, 22275, 'base_16'), (302, 16, 22275, NULL, 'base_16'), (303, 16, NULL, 68, 'offset_16'), (304, 16, 68, 188, 'offset_16'), (305, 16, 188, 311, 'offset_16'), (306, 16, 311, 446, 'offset_16'), (307, 16, 446, 639, 'offset_16'), (308, 16, 639, 931, 'offset_16'), (309, 16, 931, 1621, 'offset_16'), (310, 16, 1621, 5807, 'offset_16'), (311, 16, 5807, NULL, 'offset_16'), (312, 32, NULL, 241, 'base_32'), (313, 32, 241, 521, 'base_32'), (314, 32, 521, 1175, 'base_32'), (315, 32, 1175, 22275, 'base_32'), (316, 32, 22275, NULL, 'base_32'), (317, 32, NULL, 128, 'offset_32'), (318, 32, 128, 375, 'offset_32'), (319, 32, 375, 763, 'offset_32'), (320, 32, 763, 2452, 'offset_32'), (321, 32, 2452, NULL, 'offset_32'), (322, 64, NULL, 521, 'base_64'), (323, 64, 521, 22275, 'base_64'), (324, 64, 22275, NULL, 'base_64'), (325, 64, NULL, 248, 'offset_64'), (326, 64, 248, 1207, 'offset_64'), (327, 64, 1207, NULL, 'offset_64'), (328, 128, NULL, 22275, 'base_128'), (329, 128, 22275, NULL, 'base_128'), (330, 128, NULL, 533, 'offset_128'), (331, 128, 533, NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS USERS_DOWNVOTES_histogram;
CREATE TABLE USERS_DOWNVOTES_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO USERS_DOWNVOTES_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 0, 'base_1'), (1, 1, 0, 1, 'base_1'), (2, 1, 1, 1, 'base_1'), (3, 1, 1, 2, 'base_1'), (4, 1, 2, 2, 'base_1'), (5, 1, 2, 3, 'base_1'), (6, 1, 3, 4, 'base_1'), (7, 1, 4, 4, 'base_1'), (8, 1, 4, 5, 'base_1'), (9, 1, 5, 5, 'base_1'), (10, 1, 5, 6, 'base_1'), (11, 1, 6, 7, 'base_1'), (12, 1, 7, 7, 'base_1'), (13, 1, 7, 8, 'base_1'), (14, 1, 8, 8, 'base_1'), (15, 1, 8, 9, 'base_1'), (16, 1, 9, 10, 'base_1'), (17, 1, 10, 10, 'base_1'), (18, 1, 10, 11, 'base_1'), (19, 1, 11, 11, 'base_1'), (20, 1, 11, 12, 'base_1'), (21, 1, 12, 12, 'base_1'), (22, 1, 12, 13, 'base_1'), (23, 1, 13, 14, 'base_1'), (24, 1, 14, 14, 'base_1'), (25, 1, 14, 15, 'base_1'), (26, 1, 15, 15, 'base_1'), (27, 1, 15, 16, 'base_1'), (28, 1, 16, 17, 'base_1'), (29, 1, 17, 17, 'base_1'), (30, 1, 17, 18, 'base_1'), (31, 1, 18, 18, 'base_1'), (32, 1, 18, 19, 'base_1'), (33, 1, 19, 20, 'base_1'), (34, 1, 20, 20, 'base_1'), (35, 1, 20, 21, 'base_1'), (36, 1, 21, 21, 'base_1'), (37, 1, 21, 22, 'base_1'), (38, 1, 22, 22, 'base_1'), (39, 1, 22, 23, 'base_1'), (40, 1, 23, 24, 'base_1'), (41, 1, 24, 24, 'base_1'), (42, 1, 24, 25, 'base_1'), (43, 1, 25, 25, 'base_1'), (44, 1, 25, 26, 'base_1'), (45, 1, 26, 27, 'base_1'), (46, 1, 27, 27, 'base_1'), (47, 1, 27, 30, 'base_1'), (48, 1, 30, 30, 'base_1'), (49, 1, 30, 31, 'base_1'), (50, 1, 31, 34, 'base_1'), (51, 1, 34, 34, 'base_1'), (52, 1, 34, 35, 'base_1'), (53, 1, 35, 35, 'base_1'), (54, 1, 35, 36, 'base_1'), (55, 1, 36, 36, 'base_1'), (56, 1, 36, 37, 'base_1'), (57, 1, 37, 39, 'base_1'), (58, 1, 39, 39, 'base_1'), (59, 1, 39, 40, 'base_1'), (60, 1, 40, 40, 'base_1'), (61, 1, 40, 41, 'base_1'), (62, 1, 41, 42, 'base_1'), (63, 1, 42, 42, 'base_1'), (64, 1, 42, 43, 'base_1'), (65, 1, 43, 43, 'base_1'), (66, 1, 43, 44, 'base_1'), (67, 1, 44, 45, 'base_1'), (68, 1, 45, 45, 'base_1'), (69, 1, 45, 47, 'base_1'), (70, 1, 47, 47, 'base_1'), (71, 1, 47, 48, 'base_1'), (72, 1, 48, 49, 'base_1'), (73, 1, 49, 49, 'base_1'), (74, 1, 49, 54, 'base_1'), (75, 1, 54, 54, 'base_1'), (76, 1, 54, 55, 'base_1'), (77, 1, 55, 55, 'base_1'), (78, 1, 55, 56, 'base_1'), (79, 1, 56, 57, 'base_1'), (80, 1, 57, 57, 'base_1'), (81, 1, 57, 59, 'base_1'), (82, 1, 59, 59, 'base_1'), (83, 1, 59, 60, 'base_1'), (84, 1, 60, 63, 'base_1'), (85, 1, 63, 63, 'base_1'), (86, 1, 63, 65, 'base_1'), (87, 1, 65, 65, 'base_1'), (88, 1, 65, 82, 'base_1'), (89, 1, 82, 88, 'base_1'), (90, 1, 88, 88, 'base_1'), (91, 1, 88, 91, 'base_1'), (92, 1, 91, 91, 'base_1'), (93, 1, 91, 103, 'base_1'), (94, 1, 103, 103, 'base_1'), (95, 1, 103, 104, 'base_1'), (96, 1, 104, 110, 'base_1'), (97, 1, 110, 110, 'base_1'), (98, 1, 110, 113, 'base_1'), (99, 1, 113, 113, 'base_1'), (100, 1, 113, 114, 'base_1'), (101, 1, 114, 119, 'base_1'), (102, 1, 119, 119, 'base_1'), (103, 1, 119, 125, 'base_1'), (104, 1, 125, 125, 'base_1'), (105, 1, 125, 126, 'base_1'), (106, 1, 126, 131, 'base_1'), (107, 1, 131, 131, 'base_1'), (108, 1, 131, 139, 'base_1'), (109, 1, 139, 139, 'base_1'), (110, 1, 139, 143, 'base_1'), (111, 1, 143, 143, 'base_1'), (112, 1, 143, 145, 'base_1'), (113, 1, 145, 163, 'base_1'), (114, 1, 163, 163, 'base_1'), (115, 1, 163, 187, 'base_1'), (116, 1, 187, 187, 'base_1'), (117, 1, 187, 200, 'base_1'), (118, 1, 200, 212, 'base_1'), (119, 1, 212, 212, 'base_1'), (120, 1, 212, 214, 'base_1'), (121, 1, 214, 214, 'base_1'), (122, 1, 214, 351, 'base_1'), (123, 1, 351, 412, 'base_1'), (124, 1, 412, 412, 'base_1'), (125, 1, 412, 779, 'base_1'), (126, 1, 779, 779, 'base_1'), (127, 1, 779, NULL, 'base_1'), (128, 2, NULL, 1, 'base_2'), (129, 2, 1, 2, 'base_2'), (130, 2, 2, 3, 'base_2'), (131, 2, 3, 4, 'base_2'), (132, 2, 4, 5, 'base_2'), (133, 2, 5, 7, 'base_2'), (134, 2, 7, 8, 'base_2'), (135, 2, 8, 9, 'base_2'), (136, 2, 9, 10, 'base_2'), (137, 2, 10, 11, 'base_2'), (138, 2, 11, 12, 'base_2'), (139, 2, 12, 14, 'base_2'), (140, 2, 14, 15, 'base_2'), (141, 2, 15, 16, 'base_2'), (142, 2, 16, 17, 'base_2'), (143, 2, 17, 18, 'base_2'), (144, 2, 18, 20, 'base_2'), (145, 2, 20, 21, 'base_2'), (146, 2, 21, 22, 'base_2'), (147, 2, 22, 23, 'base_2'), (148, 2, 23, 24, 'base_2'), (149, 2, 24, 25, 'base_2'), (150, 2, 25, 27, 'base_2'), (151, 2, 27, 30, 'base_2'), (152, 2, 30, 31, 'base_2'), (153, 2, 31, 34, 'base_2'), (154, 2, 34, 35, 'base_2'), (155, 2, 35, 36, 'base_2'), (156, 2, 36, 39, 'base_2'), (157, 2, 39, 40, 'base_2'), (158, 2, 40, 41, 'base_2'), (159, 2, 41, 42, 'base_2'), (160, 2, 42, 43, 'base_2'), (161, 2, 43, 45, 'base_2'), (162, 2, 45, 47, 'base_2'), (163, 2, 47, 48, 'base_2'), (164, 2, 48, 49, 'base_2'), (165, 2, 49, 54, 'base_2'), (166, 2, 54, 55, 'base_2'), (167, 2, 55, 57, 'base_2'), (168, 2, 57, 59, 'base_2'), (169, 2, 59, 60, 'base_2'), (170, 2, 60, 63, 'base_2'), (171, 2, 63, 65, 'base_2'), (172, 2, 65, 88, 'base_2'), (173, 2, 88, 91, 'base_2'), (174, 2, 91, 103, 'base_2'), (175, 2, 103, 104, 'base_2'), (176, 2, 104, 110, 'base_2'), (177, 2, 110, 113, 'base_2'), (178, 2, 113, 119, 'base_2'), (179, 2, 119, 125, 'base_2'), (180, 2, 125, 126, 'base_2'), (181, 2, 126, 131, 'base_2'), (182, 2, 131, 139, 'base_2'), (183, 2, 139, 143, 'base_2'), (184, 2, 143, 163, 'base_2'), (185, 2, 163, 187, 'base_2'), (186, 2, 187, 200, 'base_2'), (187, 2, 200, 212, 'base_2'), (188, 2, 212, 214, 'base_2'), (189, 2, 214, 412, 'base_2'), (190, 2, 412, 779, 'base_2'), (191, 2, 779, NULL, 'base_2'), (192, 4, NULL, 2, 'base_4'), (193, 4, 2, 4, 'base_4'), (194, 4, 4, 7, 'base_4'), (195, 4, 7, 9, 'base_4'), (196, 4, 9, 11, 'base_4'), (197, 4, 11, 14, 'base_4'), (198, 4, 14, 16, 'base_4'), (199, 4, 16, 18, 'base_4'), (200, 4, 18, 21, 'base_4'), (201, 4, 21, 23, 'base_4'), (202, 4, 23, 25, 'base_4'), (203, 4, 25, 30, 'base_4'), (204, 4, 30, 34, 'base_4'), (205, 4, 34, 36, 'base_4'), (206, 4, 36, 40, 'base_4'), (207, 4, 40, 42, 'base_4'), (208, 4, 42, 45, 'base_4'), (209, 4, 45, 48, 'base_4'), (210, 4, 48, 54, 'base_4'), (211, 4, 54, 57, 'base_4'), (212, 4, 57, 60, 'base_4'), (213, 4, 60, 65, 'base_4'), (214, 4, 65, 91, 'base_4'), (215, 4, 91, 104, 'base_4'), (216, 4, 104, 113, 'base_4'), (217, 4, 113, 125, 'base_4'), (218, 4, 125, 131, 'base_4'), (219, 4, 131, 143, 'base_4'), (220, 4, 143, 187, 'base_4'), (221, 4, 187, 212, 'base_4'), (222, 4, 212, 412, 'base_4'), (223, 4, 412, NULL, 'base_4'), (224, 4, NULL, 1, 'offset_4'), (225, 4, 1, 4, 'offset_4'), (226, 4, 4, 6, 'offset_4'), (227, 4, 6, 8, 'offset_4'), (228, 4, 8, 11, 'offset_4'), (229, 4, 11, 13, 'offset_4'), (230, 4, 13, 15, 'offset_4'), (231, 4, 15, 18, 'offset_4'), (232, 4, 18, 20, 'offset_4'), (233, 4, 20, 22, 'offset_4'), (234, 4, 22, 25, 'offset_4'), (235, 4, 25, 27, 'offset_4'), (236, 4, 27, 34, 'offset_4'), (237, 4, 34, 36, 'offset_4'), (238, 4, 36, 39, 'offset_4'), (239, 4, 39, 42, 'offset_4'), (240, 4, 42, 44, 'offset_4'), (241, 4, 44, 47, 'offset_4'), (242, 4, 47, 54, 'offset_4'), (243, 4, 54, 56, 'offset_4'), (244, 4, 56, 59, 'offset_4'), (245, 4, 59, 65, 'offset_4'), (246, 4, 65, 88, 'offset_4'), (247, 4, 88, 103, 'offset_4'), (248, 4, 103, 113, 'offset_4'), (249, 4, 113, 119, 'offset_4'), (250, 4, 119, 131, 'offset_4'), (251, 4, 131, 143, 'offset_4'), (252, 4, 143, 163, 'offset_4'), (253, 4, 163, 212, 'offset_4'), (254, 4, 212, 351, 'offset_4'), (255, 4, 351, 779, 'offset_4'), (256, 4, 779, NULL, 'offset_4'), (257, 8, NULL, 4, 'base_8'), (258, 8, 4, 9, 'base_8'), (259, 8, 9, 14, 'base_8'), (260, 8, 14, 18, 'base_8'), (261, 8, 18, 23, 'base_8'), (262, 8, 23, 30, 'base_8'), (263, 8, 30, 36, 'base_8'), (264, 8, 36, 42, 'base_8'), (265, 8, 42, 48, 'base_8'), (266, 8, 48, 57, 'base_8'), (267, 8, 57, 65, 'base_8'), (268, 8, 65, 104, 'base_8'), (269, 8, 104, 125, 'base_8'), (270, 8, 125, 143, 'base_8'), (271, 8, 143, 212, 'base_8'), (272, 8, 212, NULL, 'base_8'), (273, 8, NULL, 2, 'offset_8'), (274, 8, 2, 7, 'offset_8'), (275, 8, 7, 12, 'offset_8'), (276, 8, 12, 17, 'offset_8'), (277, 8, 17, 21, 'offset_8'), (278, 8, 21, 26, 'offset_8'), (279, 8, 26, 35, 'offset_8'), (280, 8, 35, 40, 'offset_8'), (281, 8, 40, 45, 'offset_8'), (282, 8, 45, 55, 'offset_8'), (283, 8, 55, 63, 'offset_8'), (284, 8, 63, 91, 'offset_8'), (285, 8, 91, 114, 'offset_8'), (286, 8, 114, 139, 'offset_8'), (287, 8, 139, 187, 'offset_8'), (288, 8, 187, 412, 'offset_8'), (289, 8, 412, NULL, 'offset_8'), (290, 16, NULL, 9, 'base_16'), (291, 16, 9, 18, 'base_16'), (292, 16, 18, 30, 'base_16'), (293, 16, 30, 42, 'base_16'), (294, 16, 42, 57, 'base_16'), (295, 16, 57, 104, 'base_16'), (296, 16, 104, 143, 'base_16'), (297, 16, 143, NULL, 'base_16'), (298, 16, NULL, 5, 'offset_16'), (299, 16, 5, 14, 'offset_16'), (300, 16, 14, 24, 'offset_16'), (301, 16, 24, 37, 'offset_16'), (302, 16, 37, 49, 'offset_16'), (303, 16, 49, 82, 'offset_16'), (304, 16, 82, 125, 'offset_16'), (305, 16, 125, 214, 'offset_16'), (306, 16, 214, NULL, 'offset_16'), (307, 32, NULL, 18, 'base_32'), (308, 32, 18, 42, 'base_32'), (309, 32, 42, 104, 'base_32'), (310, 32, 104, NULL, 'base_32'), (311, 32, NULL, 10, 'offset_32'), (312, 32, 10, 30, 'offset_32'), (313, 32, 30, 57, 'offset_32'), (314, 32, 57, 145, 'offset_32'), (315, 32, 145, NULL, 'offset_32'), (316, 64, NULL, 42, 'base_64'), (317, 64, 42, NULL, 'base_64'), (318, 64, NULL, 19, 'offset_64'), (319, 64, 19, 110, 'offset_64'), (320, 64, 110, NULL, 'offset_64'), (321, 128, NULL, NULL, 'base_128'), (322, 128, NULL, 43, 'offset_128'), (323, 128, 43, NULL, 'offset_128'), (324, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS POSTS_ANSWERCOUNT_mcv;

-- Create MCV table for POSTS.ANSWERCOUNT, with a unique mcv_id
CREATE TABLE POSTS_ANSWERCOUNT_mcv AS
WITH base AS (
    SELECT ANSWERCOUNT, COUNT(*) AS freq
    FROM POSTS
    WHERE ANSWERCOUNT IS NOT NULL
    GROUP BY ANSWERCOUNT
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    ANSWERCOUNT,
    freq
FROM base;

DROP TABLE IF EXISTS POSTS_FAVORITECOUNT_mcv;

-- Create MCV table for POSTS.FAVORITECOUNT, with a unique mcv_id
CREATE TABLE POSTS_FAVORITECOUNT_mcv AS
WITH base AS (
    SELECT FAVORITECOUNT, COUNT(*) AS freq
    FROM POSTS
    WHERE FAVORITECOUNT IS NOT NULL
    GROUP BY FAVORITECOUNT
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    FAVORITECOUNT,
    freq
FROM base;

DROP TABLE IF EXISTS POSTS_POSTTYPEID_mcv;

-- Create MCV table for POSTS.POSTTYPEID, with a unique mcv_id
CREATE TABLE POSTS_POSTTYPEID_mcv AS
WITH base AS (
    SELECT POSTTYPEID, COUNT(*) AS freq
    FROM POSTS
    WHERE POSTTYPEID IS NOT NULL
    GROUP BY POSTTYPEID
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    POSTTYPEID,
    freq
FROM base;

DROP TABLE IF EXISTS POSTS_SCORE_mcv;

-- Create MCV table for POSTS.SCORE, with a unique mcv_id
CREATE TABLE POSTS_SCORE_mcv AS
WITH base AS (
    SELECT SCORE, COUNT(*) AS freq
    FROM POSTS
    WHERE SCORE IS NOT NULL
    GROUP BY SCORE
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    SCORE,
    freq
FROM base;

DROP TABLE IF EXISTS POSTS_COMMENTCOUNT_mcv;

-- Create MCV table for POSTS.COMMENTCOUNT, with a unique mcv_id
CREATE TABLE POSTS_COMMENTCOUNT_mcv AS
WITH base AS (
    SELECT COMMENTCOUNT, COUNT(*) AS freq
    FROM POSTS
    WHERE COMMENTCOUNT IS NOT NULL
    GROUP BY COMMENTCOUNT
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    COMMENTCOUNT,
    freq
FROM base;

DROP TABLE IF EXISTS POSTS_CREATIONDATE_histogram;
CREATE TABLE POSTS_CREATIONDATE_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound DATETIME,
    upper_bound DATETIME,
    bucket_type TEXT
);


INSERT INTO POSTS_CREATIONDATE_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, to_timestamp(1280212650), 'base_1'), (1, 1, to_timestamp(1280212650), to_timestamp(1281438406), 'base_1'), (2, 1, to_timestamp(1281438406), to_timestamp(1283283715), 'base_1'), (3, 1, to_timestamp(1283283715), to_timestamp(1285344195), 'base_1'), (4, 1, to_timestamp(1285344195), to_timestamp(1287602969), 'base_1'), (5, 1, to_timestamp(1287602969), to_timestamp(1289948261), 'base_1'), (6, 1, to_timestamp(1289948261), to_timestamp(1292038455), 'base_1'), (7, 1, to_timestamp(1292038455), to_timestamp(1294681485), 'base_1'), (8, 1, to_timestamp(1294681485), to_timestamp(1296924417), 'base_1'), (9, 1, to_timestamp(1296924417), to_timestamp(1298873693), 'base_1'), (10, 1, to_timestamp(1298873693), to_timestamp(1300495870), 'base_1'), (11, 1, to_timestamp(1300495870), to_timestamp(1302120092), 'base_1'), (12, 1, to_timestamp(1302120092), to_timestamp(1303937101), 'base_1'), (13, 1, to_timestamp(1303937101), to_timestamp(1305465475), 'base_1'), (14, 1, to_timestamp(1305465475), to_timestamp(1307301190), 'base_1'), (15, 1, to_timestamp(1307301190), to_timestamp(1309176463), 'base_1'), (16, 1, to_timestamp(1309176463), to_timestamp(1310993611), 'base_1'), (17, 1, to_timestamp(1310993611), to_timestamp(1312801564), 'base_1'), (18, 1, to_timestamp(1312801564), to_timestamp(1314224413), 'base_1'), (19, 1, to_timestamp(1314224413), to_timestamp(1316023926), 'base_1'), (20, 1, to_timestamp(1316023926), to_timestamp(1317563717), 'base_1'), (21, 1, to_timestamp(1317563717), to_timestamp(1318870051), 'base_1'), (22, 1, to_timestamp(1318870051), to_timestamp(1320410943), 'base_1'), (23, 1, to_timestamp(1320410943), to_timestamp(1321904621), 'base_1'), (24, 1, to_timestamp(1321904621), to_timestamp(1323351912), 'base_1'), (25, 1, to_timestamp(1323351912), to_timestamp(1325107620), 'base_1'), (26, 1, to_timestamp(1325107620), to_timestamp(1326699701), 'base_1'), (27, 1, to_timestamp(1326699701), to_timestamp(1327947557), 'base_1'), (28, 1, to_timestamp(1327947557), to_timestamp(1329086311), 'base_1'), (29, 1, to_timestamp(1329086311), to_timestamp(1330002828), 'base_1'), (30, 1, to_timestamp(1330002828), to_timestamp(1331316029), 'base_1'), (31, 1, to_timestamp(1331316029), to_timestamp(1332645134), 'base_1'), (32, 1, to_timestamp(1332645134), to_timestamp(1333835320), 'base_1'), (33, 1, to_timestamp(1333835320), to_timestamp(1335006879), 'base_1'), (34, 1, to_timestamp(1335006879), to_timestamp(1336150581), 'base_1'), (35, 1, to_timestamp(1336150581), to_timestamp(1337175084), 'base_1'), (36, 1, to_timestamp(1337175084), to_timestamp(1338318612), 'base_1'), (37, 1, to_timestamp(1338318612), to_timestamp(1339381960), 'base_1'), (38, 1, to_timestamp(1339381960), to_timestamp(1340512246), 'base_1'), (39, 1, to_timestamp(1340512246), to_timestamp(1341661357), 'base_1'), (40, 1, to_timestamp(1341661357), to_timestamp(1342720947), 'base_1'), (41, 1, to_timestamp(1342720947), to_timestamp(1343806675), 'base_1'), (42, 1, to_timestamp(1343806675), to_timestamp(1344933549), 'base_1'), (43, 1, to_timestamp(1344933549), to_timestamp(1345929416), 'base_1'), (44, 1, to_timestamp(1345929416), to_timestamp(1347228319), 'base_1'), (45, 1, to_timestamp(1347228319), to_timestamp(1348322159), 'base_1'), (46, 1, to_timestamp(1348322159), to_timestamp(1349328179), 'base_1'), (47, 1, to_timestamp(1349328179), to_timestamp(1350301572), 'base_1'), (48, 1, to_timestamp(1350301572), to_timestamp(1351337121), 'base_1'), (49, 1, to_timestamp(1351337121), to_timestamp(1352354526), 'base_1'), (50, 1, to_timestamp(1352354526), to_timestamp(1353359095), 'base_1'), (51, 1, to_timestamp(1353359095), to_timestamp(1354309048), 'base_1'), (52, 1, to_timestamp(1354309048), to_timestamp(1355207557), 'base_1'), (53, 1, to_timestamp(1355207557), to_timestamp(1356301462), 'base_1'), (54, 1, to_timestamp(1356301462), to_timestamp(1357764163), 'base_1'), (55, 1, to_timestamp(1357764163), to_timestamp(1358839374), 'base_1'), (56, 1, to_timestamp(1358839374), to_timestamp(1359749932), 'base_1'), (57, 1, to_timestamp(1359749932), to_timestamp(1360856044), 'base_1'), (58, 1, to_timestamp(1360856044), to_timestamp(1361894551), 'base_1'), (59, 1, to_timestamp(1361894551), to_timestamp(1362859353), 'base_1'), (60, 1, to_timestamp(1362859353), to_timestamp(1363660126), 'base_1'), (61, 1, to_timestamp(1363660126), to_timestamp(1364479861), 'base_1'), (62, 1, to_timestamp(1364479861), to_timestamp(1365405971), 'base_1'), (63, 1, to_timestamp(1365405971), to_timestamp(1366164102), 'base_1'), (64, 1, to_timestamp(1366164102), to_timestamp(1366896042), 'base_1'), (65, 1, to_timestamp(1366896042), to_timestamp(1367685902), 'base_1'), (66, 1, to_timestamp(1367685902), to_timestamp(1368553189), 'base_1'), (67, 1, to_timestamp(1368553189), to_timestamp(1369316485), 'base_1'), (68, 1, to_timestamp(1369316485), to_timestamp(1370240283), 'base_1'), (69, 1, to_timestamp(1370240283), to_timestamp(1371066825), 'base_1'), (70, 1, to_timestamp(1371066825), to_timestamp(1372066329), 'base_1'), (71, 1, to_timestamp(1372066329), to_timestamp(1372900560), 'base_1'), (72, 1, to_timestamp(1372900560), to_timestamp(1373633029), 'base_1'), (73, 1, to_timestamp(1373633029), to_timestamp(1374372521), 'base_1'), (74, 1, to_timestamp(1374372521), to_timestamp(1375025661), 'base_1'), (75, 1, to_timestamp(1375025661), to_timestamp(1375816341), 'base_1'), (76, 1, to_timestamp(1375816341), to_timestamp(1376589011), 'base_1'), (77, 1, to_timestamp(1376589011), to_timestamp(1377528061), 'base_1'), (78, 1, to_timestamp(1377528061), to_timestamp(1378363210), 'base_1'), (79, 1, to_timestamp(1378363210), to_timestamp(1379343753), 'base_1'), (80, 1, to_timestamp(1379343753), to_timestamp(1380058144), 'base_1'), (81, 1, to_timestamp(1380058144), to_timestamp(1380776560), 'base_1'), (82, 1, to_timestamp(1380776560), to_timestamp(1381559645), 'base_1'), (83, 1, to_timestamp(1381559645), to_timestamp(1382417939), 'base_1'), (84, 1, to_timestamp(1382417939), to_timestamp(1383238247), 'base_1'), (85, 1, to_timestamp(1383238247), to_timestamp(1384042749), 'base_1'), (86, 1, to_timestamp(1384042749), to_timestamp(1384800074), 'base_1'), (87, 1, to_timestamp(1384800074), to_timestamp(1385487463), 'base_1'), (88, 1, to_timestamp(1385487463), to_timestamp(1386187413), 'base_1'), (89, 1, to_timestamp(1386187413), to_timestamp(1386801359), 'base_1'), (90, 1, to_timestamp(1386801359), to_timestamp(1387551686), 'base_1'), (91, 1, to_timestamp(1387551686), to_timestamp(1388677967), 'base_1'), (92, 1, to_timestamp(1388677967), to_timestamp(1389380162), 'base_1'), (93, 1, to_timestamp(1389380162), to_timestamp(1390066970), 'base_1'), (94, 1, to_timestamp(1390066970), to_timestamp(1390839836), 'base_1'), (95, 1, to_timestamp(1390839836), to_timestamp(1391457667), 'base_1'), (96, 1, to_timestamp(1391457667), to_timestamp(1392051769), 'base_1'), (97, 1, to_timestamp(1392051769), to_timestamp(1392662644), 'base_1'), (98, 1, to_timestamp(1392662644), to_timestamp(1393305169), 'base_1'), (99, 1, to_timestamp(1393305169), to_timestamp(1393867077), 'base_1'), (100, 1, to_timestamp(1393867077), to_timestamp(1394449013), 'base_1'), (101, 1, to_timestamp(1394449013), to_timestamp(1395047498), 'base_1'), (102, 1, to_timestamp(1395047498), to_timestamp(1395616066), 'base_1'), (103, 1, to_timestamp(1395616066), to_timestamp(1396258279), 'base_1'), (104, 1, to_timestamp(1396258279), to_timestamp(1396873033), 'base_1'), (105, 1, to_timestamp(1396873033), to_timestamp(1397447681), 'base_1'), (106, 1, to_timestamp(1397447681), to_timestamp(1398030610), 'base_1'), (107, 1, to_timestamp(1398030610), to_timestamp(1398523725), 'base_1'), (108, 1, to_timestamp(1398523725), to_timestamp(1399043397), 'base_1'), (109, 1, to_timestamp(1399043397), to_timestamp(1399558681), 'base_1'), (110, 1, to_timestamp(1399558681), to_timestamp(1400104814), 'base_1'), (111, 1, to_timestamp(1400104814), to_timestamp(1400681763), 'base_1'), (112, 1, to_timestamp(1400681763), to_timestamp(1401289323), 'base_1'), (113, 1, to_timestamp(1401289323), to_timestamp(1401900204), 'base_1'), (114, 1, to_timestamp(1401900204), to_timestamp(1402493675), 'base_1'), (115, 1, to_timestamp(1402493675), to_timestamp(1403091238), 'base_1'), (116, 1, to_timestamp(1403091238), to_timestamp(1403668306), 'base_1'), (117, 1, to_timestamp(1403668306), to_timestamp(1404271922), 'base_1'), (118, 1, to_timestamp(1404271922), to_timestamp(1404912081), 'base_1'), (119, 1, to_timestamp(1404912081), to_timestamp(1405508709), 'base_1'), (120, 1, to_timestamp(1405508709), to_timestamp(1406080053), 'base_1'), (121, 1, to_timestamp(1406080053), to_timestamp(1406592135), 'base_1'), (122, 1, to_timestamp(1406592135), to_timestamp(1407170973), 'base_1'), (123, 1, to_timestamp(1407170973), to_timestamp(1407728436), 'base_1'), (124, 1, to_timestamp(1407728436), to_timestamp(1408297250), 'base_1'), (125, 1, to_timestamp(1408297250), to_timestamp(1408823633), 'base_1'), (126, 1, to_timestamp(1408823633), to_timestamp(1409414363), 'base_1'), (127, 1, to_timestamp(1409414363), to_timestamp(1410094068), 'base_1'), (128, 1, to_timestamp(1410094068), NULL, 'base_1'), (129, 2, NULL, to_timestamp(1281438406), 'base_2'), (130, 2, to_timestamp(1281438406), to_timestamp(1285344195), 'base_2'), (131, 2, to_timestamp(1285344195), to_timestamp(1289948261), 'base_2'), (132, 2, to_timestamp(1289948261), to_timestamp(1294681485), 'base_2'), (133, 2, to_timestamp(1294681485), to_timestamp(1298873693), 'base_2'), (134, 2, to_timestamp(1298873693), to_timestamp(1302120092), 'base_2'), (135, 2, to_timestamp(1302120092), to_timestamp(1305465475), 'base_2'), (136, 2, to_timestamp(1305465475), to_timestamp(1309176463), 'base_2'), (137, 2, to_timestamp(1309176463), to_timestamp(1312801564), 'base_2'), (138, 2, to_timestamp(1312801564), to_timestamp(1316023926), 'base_2'), (139, 2, to_timestamp(1316023926), to_timestamp(1318870051), 'base_2'), (140, 2, to_timestamp(1318870051), to_timestamp(1321904621), 'base_2'), (141, 2, to_timestamp(1321904621), to_timestamp(1325107620), 'base_2'), (142, 2, to_timestamp(1325107620), to_timestamp(1327947557), 'base_2'), (143, 2, to_timestamp(1327947557), to_timestamp(1330002828), 'base_2'), (144, 2, to_timestamp(1330002828), to_timestamp(1332645134), 'base_2'), (145, 2, to_timestamp(1332645134), to_timestamp(1335006879), 'base_2'), (146, 2, to_timestamp(1335006879), to_timestamp(1337175084), 'base_2'), (147, 2, to_timestamp(1337175084), to_timestamp(1339381960), 'base_2'), (148, 2, to_timestamp(1339381960), to_timestamp(1341661357), 'base_2'), (149, 2, to_timestamp(1341661357), to_timestamp(1343806675), 'base_2'), (150, 2, to_timestamp(1343806675), to_timestamp(1345929416), 'base_2'), (151, 2, to_timestamp(1345929416), to_timestamp(1348322159), 'base_2'), (152, 2, to_timestamp(1348322159), to_timestamp(1350301572), 'base_2'), (153, 2, to_timestamp(1350301572), to_timestamp(1352354526), 'base_2'), (154, 2, to_timestamp(1352354526), to_timestamp(1354309048), 'base_2'), (155, 2, to_timestamp(1354309048), to_timestamp(1356301462), 'base_2'), (156, 2, to_timestamp(1356301462), to_timestamp(1358839374), 'base_2'), (157, 2, to_timestamp(1358839374), to_timestamp(1360856044), 'base_2'), (158, 2, to_timestamp(1360856044), to_timestamp(1362859353), 'base_2'), (159, 2, to_timestamp(1362859353), to_timestamp(1364479861), 'base_2'), (160, 2, to_timestamp(1364479861), to_timestamp(1366164102), 'base_2'), (161, 2, to_timestamp(1366164102), to_timestamp(1367685902), 'base_2'), (162, 2, to_timestamp(1367685902), to_timestamp(1369316485), 'base_2'), (163, 2, to_timestamp(1369316485), to_timestamp(1371066825), 'base_2'), (164, 2, to_timestamp(1371066825), to_timestamp(1372900560), 'base_2'), (165, 2, to_timestamp(1372900560), to_timestamp(1374372521), 'base_2'), (166, 2, to_timestamp(1374372521), to_timestamp(1375816341), 'base_2'), (167, 2, to_timestamp(1375816341), to_timestamp(1377528061), 'base_2'), (168, 2, to_timestamp(1377528061), to_timestamp(1379343753), 'base_2'), (169, 2, to_timestamp(1379343753), to_timestamp(1380776560), 'base_2'), (170, 2, to_timestamp(1380776560), to_timestamp(1382417939), 'base_2'), (171, 2, to_timestamp(1382417939), to_timestamp(1384042749), 'base_2'), (172, 2, to_timestamp(1384042749), to_timestamp(1385487463), 'base_2'), (173, 2, to_timestamp(1385487463), to_timestamp(1386801359), 'base_2'), (174, 2, to_timestamp(1386801359), to_timestamp(1388677967), 'base_2'), (175, 2, to_timestamp(1388677967), to_timestamp(1390066970), 'base_2'), (176, 2, to_timestamp(1390066970), to_timestamp(1391457667), 'base_2'), (177, 2, to_timestamp(1391457667), to_timestamp(1392662644), 'base_2'), (178, 2, to_timestamp(1392662644), to_timestamp(1393867077), 'base_2'), (179, 2, to_timestamp(1393867077), to_timestamp(1395047498), 'base_2'), (180, 2, to_timestamp(1395047498), to_timestamp(1396258279), 'base_2'), (181, 2, to_timestamp(1396258279), to_timestamp(1397447681), 'base_2'), (182, 2, to_timestamp(1397447681), to_timestamp(1398523725), 'base_2'), (183, 2, to_timestamp(1398523725), to_timestamp(1399558681), 'base_2'), (184, 2, to_timestamp(1399558681), to_timestamp(1400681763), 'base_2'), (185, 2, to_timestamp(1400681763), to_timestamp(1401900204), 'base_2'), (186, 2, to_timestamp(1401900204), to_timestamp(1403091238), 'base_2'), (187, 2, to_timestamp(1403091238), to_timestamp(1404271922), 'base_2'), (188, 2, to_timestamp(1404271922), to_timestamp(1405508709), 'base_2'), (189, 2, to_timestamp(1405508709), to_timestamp(1406592135), 'base_2'), (190, 2, to_timestamp(1406592135), to_timestamp(1407728436), 'base_2'), (191, 2, to_timestamp(1407728436), to_timestamp(1408823633), 'base_2'), (192, 2, to_timestamp(1408823633), to_timestamp(1410094068), 'base_2'), (193, 2, to_timestamp(1410094068), NULL, 'base_2'), (194, 4, NULL, to_timestamp(1285344195), 'base_4'), (195, 4, to_timestamp(1285344195), to_timestamp(1294681485), 'base_4'), (196, 4, to_timestamp(1294681485), to_timestamp(1302120092), 'base_4'), (197, 4, to_timestamp(1302120092), to_timestamp(1309176463), 'base_4'), (198, 4, to_timestamp(1309176463), to_timestamp(1316023926), 'base_4'), (199, 4, to_timestamp(1316023926), to_timestamp(1321904621), 'base_4'), (200, 4, to_timestamp(1321904621), to_timestamp(1327947557), 'base_4'), (201, 4, to_timestamp(1327947557), to_timestamp(1332645134), 'base_4'), (202, 4, to_timestamp(1332645134), to_timestamp(1337175084), 'base_4'), (203, 4, to_timestamp(1337175084), to_timestamp(1341661357), 'base_4'), (204, 4, to_timestamp(1341661357), to_timestamp(1345929416), 'base_4'), (205, 4, to_timestamp(1345929416), to_timestamp(1350301572), 'base_4'), (206, 4, to_timestamp(1350301572), to_timestamp(1354309048), 'base_4'), (207, 4, to_timestamp(1354309048), to_timestamp(1358839374), 'base_4'), (208, 4, to_timestamp(1358839374), to_timestamp(1362859353), 'base_4'), (209, 4, to_timestamp(1362859353), to_timestamp(1366164102), 'base_4'), (210, 4, to_timestamp(1366164102), to_timestamp(1369316485), 'base_4'), (211, 4, to_timestamp(1369316485), to_timestamp(1372900560), 'base_4'), (212, 4, to_timestamp(1372900560), to_timestamp(1375816341), 'base_4'), (213, 4, to_timestamp(1375816341), to_timestamp(1379343753), 'base_4'), (214, 4, to_timestamp(1379343753), to_timestamp(1382417939), 'base_4'), (215, 4, to_timestamp(1382417939), to_timestamp(1385487463), 'base_4'), (216, 4, to_timestamp(1385487463), to_timestamp(1388677967), 'base_4'), (217, 4, to_timestamp(1388677967), to_timestamp(1391457667), 'base_4'), (218, 4, to_timestamp(1391457667), to_timestamp(1393867077), 'base_4'), (219, 4, to_timestamp(1393867077), to_timestamp(1396258279), 'base_4'), (220, 4, to_timestamp(1396258279), to_timestamp(1398523725), 'base_4'), (221, 4, to_timestamp(1398523725), to_timestamp(1400681763), 'base_4'), (222, 4, to_timestamp(1400681763), to_timestamp(1403091238), 'base_4'), (223, 4, to_timestamp(1403091238), to_timestamp(1405508709), 'base_4'), (224, 4, to_timestamp(1405508709), to_timestamp(1407728436), 'base_4'), (225, 4, to_timestamp(1407728436), to_timestamp(1410094068), 'base_4'), (226, 4, to_timestamp(1410094068), NULL, 'base_4'), (227, 4, NULL, to_timestamp(1283283715), 'offset_4'), (228, 4, to_timestamp(1283283715), to_timestamp(1292038455), 'offset_4'), (229, 4, to_timestamp(1292038455), to_timestamp(1300495870), 'offset_4'), (230, 4, to_timestamp(1300495870), to_timestamp(1307301190), 'offset_4'), (231, 4, to_timestamp(1307301190), to_timestamp(1314224413), 'offset_4'), (232, 4, to_timestamp(1314224413), to_timestamp(1320410943), 'offset_4'), (233, 4, to_timestamp(1320410943), to_timestamp(1326699701), 'offset_4'), (234, 4, to_timestamp(1326699701), to_timestamp(1331316029), 'offset_4'), (235, 4, to_timestamp(1331316029), to_timestamp(1336150581), 'offset_4'), (236, 4, to_timestamp(1336150581), to_timestamp(1340512246), 'offset_4'), (237, 4, to_timestamp(1340512246), to_timestamp(1344933549), 'offset_4'), (238, 4, to_timestamp(1344933549), to_timestamp(1349328179), 'offset_4'), (239, 4, to_timestamp(1349328179), to_timestamp(1353359095), 'offset_4'), (240, 4, to_timestamp(1353359095), to_timestamp(1357764163), 'offset_4'), (241, 4, to_timestamp(1357764163), to_timestamp(1361894551), 'offset_4'), (242, 4, to_timestamp(1361894551), to_timestamp(1365405971), 'offset_4'), (243, 4, to_timestamp(1365405971), to_timestamp(1368553189), 'offset_4'), (244, 4, to_timestamp(1368553189), to_timestamp(1372066329), 'offset_4'), (245, 4, to_timestamp(1372066329), to_timestamp(1375025661), 'offset_4'), (246, 4, to_timestamp(1375025661), to_timestamp(1378363210), 'offset_4'), (247, 4, to_timestamp(1378363210), to_timestamp(1381559645), 'offset_4'), (248, 4, to_timestamp(1381559645), to_timestamp(1384800074), 'offset_4'), (249, 4, to_timestamp(1384800074), to_timestamp(1387551686), 'offset_4'), (250, 4, to_timestamp(1387551686), to_timestamp(1390839836), 'offset_4'), (251, 4, to_timestamp(1390839836), to_timestamp(1393305169), 'offset_4'), (252, 4, to_timestamp(1393305169), to_timestamp(1395616066), 'offset_4'), (253, 4, to_timestamp(1395616066), to_timestamp(1398030610), 'offset_4'), (254, 4, to_timestamp(1398030610), to_timestamp(1400104814), 'offset_4'), (255, 4, to_timestamp(1400104814), to_timestamp(1402493675), 'offset_4'), (256, 4, to_timestamp(1402493675), to_timestamp(1404912081), 'offset_4'), (257, 4, to_timestamp(1404912081), to_timestamp(1407170973), 'offset_4'), (258, 4, to_timestamp(1407170973), to_timestamp(1409414363), 'offset_4'), (259, 4, to_timestamp(1409414363), NULL, 'offset_4'), (260, 8, NULL, to_timestamp(1294681485), 'base_8'), (261, 8, to_timestamp(1294681485), to_timestamp(1309176463), 'base_8'), (262, 8, to_timestamp(1309176463), to_timestamp(1321904621), 'base_8'), (263, 8, to_timestamp(1321904621), to_timestamp(1332645134), 'base_8'), (264, 8, to_timestamp(1332645134), to_timestamp(1341661357), 'base_8'), (265, 8, to_timestamp(1341661357), to_timestamp(1350301572), 'base_8'), (266, 8, to_timestamp(1350301572), to_timestamp(1358839374), 'base_8'), (267, 8, to_timestamp(1358839374), to_timestamp(1366164102), 'base_8'), (268, 8, to_timestamp(1366164102), to_timestamp(1372900560), 'base_8'), (269, 8, to_timestamp(1372900560), to_timestamp(1379343753), 'base_8'), (270, 8, to_timestamp(1379343753), to_timestamp(1385487463), 'base_8'), (271, 8, to_timestamp(1385487463), to_timestamp(1391457667), 'base_8'), (272, 8, to_timestamp(1391457667), to_timestamp(1396258279), 'base_8'), (273, 8, to_timestamp(1396258279), to_timestamp(1400681763), 'base_8'), (274, 8, to_timestamp(1400681763), to_timestamp(1405508709), 'base_8'), (275, 8, to_timestamp(1405508709), to_timestamp(1410094068), 'base_8'), (276, 8, to_timestamp(1410094068), NULL, 'base_8'), (277, 8, NULL, to_timestamp(1287602969), 'offset_8'), (278, 8, to_timestamp(1287602969), to_timestamp(1303937101), 'offset_8'), (279, 8, to_timestamp(1303937101), to_timestamp(1317563717), 'offset_8'), (280, 8, to_timestamp(1317563717), to_timestamp(1329086311), 'offset_8'), (281, 8, to_timestamp(1329086311), to_timestamp(1338318612), 'offset_8'), (282, 8, to_timestamp(1338318612), to_timestamp(1347228319), 'offset_8'), (283, 8, to_timestamp(1347228319), to_timestamp(1355207557), 'offset_8'), (284, 8, to_timestamp(1355207557), to_timestamp(1363660126), 'offset_8'), (285, 8, to_timestamp(1363660126), to_timestamp(1370240283), 'offset_8'), (286, 8, to_timestamp(1370240283), to_timestamp(1376589011), 'offset_8'), (287, 8, to_timestamp(1376589011), to_timestamp(1383238247), 'offset_8'), (288, 8, to_timestamp(1383238247), to_timestamp(1389380162), 'offset_8'), (289, 8, to_timestamp(1389380162), to_timestamp(1394449013), 'offset_8'), (290, 8, to_timestamp(1394449013), to_timestamp(1399043397), 'offset_8'), (291, 8, to_timestamp(1399043397), to_timestamp(1403668306), 'offset_8'), (292, 8, to_timestamp(1403668306), to_timestamp(1408297250), 'offset_8'), (293, 8, to_timestamp(1408297250), NULL, 'offset_8'), (294, 16, NULL, to_timestamp(1309176463), 'base_16'), (295, 16, to_timestamp(1309176463), to_timestamp(1332645134), 'base_16'), (296, 16, to_timestamp(1332645134), to_timestamp(1350301572), 'base_16'), (297, 16, to_timestamp(1350301572), to_timestamp(1366164102), 'base_16'), (298, 16, to_timestamp(1366164102), to_timestamp(1379343753), 'base_16'), (299, 16, to_timestamp(1379343753), to_timestamp(1391457667), 'base_16'), (300, 16, to_timestamp(1391457667), to_timestamp(1400681763), 'base_16'), (301, 16, to_timestamp(1400681763), to_timestamp(1410094068), 'base_16'), (302, 16, to_timestamp(1410094068), NULL, 'base_16'), (303, 16, NULL, to_timestamp(1296924417), 'offset_16'), (304, 16, to_timestamp(1296924417), to_timestamp(1323351912), 'offset_16'), (305, 16, to_timestamp(1323351912), to_timestamp(1342720947), 'offset_16'), (306, 16, to_timestamp(1342720947), to_timestamp(1359749932), 'offset_16'), (307, 16, to_timestamp(1359749932), to_timestamp(1373633029), 'offset_16'), (308, 16, to_timestamp(1373633029), to_timestamp(1386187413), 'offset_16'), (309, 16, to_timestamp(1386187413), to_timestamp(1396873033), 'offset_16'), (310, 16, to_timestamp(1396873033), to_timestamp(1406080053), 'offset_16'), (311, 16, to_timestamp(1406080053), NULL, 'offset_16'), (312, 32, NULL, to_timestamp(1332645134), 'base_32'), (313, 32, to_timestamp(1332645134), to_timestamp(1366164102), 'base_32'), (314, 32, to_timestamp(1366164102), to_timestamp(1391457667), 'base_32'), (315, 32, to_timestamp(1391457667), to_timestamp(1410094068), 'base_32'), (316, 32, to_timestamp(1410094068), NULL, 'base_32'), (317, 32, NULL, to_timestamp(1310993611), 'offset_32'), (318, 32, to_timestamp(1310993611), to_timestamp(1351337121), 'offset_32'), (319, 32, to_timestamp(1351337121), to_timestamp(1380058144), 'offset_32'), (320, 32, to_timestamp(1380058144), to_timestamp(1401289323), 'offset_32'), (321, 32, to_timestamp(1401289323), NULL, 'offset_32'), (322, 64, NULL, to_timestamp(1366164102), 'base_64'), (323, 64, to_timestamp(1366164102), to_timestamp(1410094068), 'base_64'), (324, 64, to_timestamp(1410094068), NULL, 'base_64'), (325, 64, NULL, to_timestamp(1333835320), 'offset_64'), (326, 64, to_timestamp(1333835320), to_timestamp(1392051769), 'offset_64'), (327, 64, to_timestamp(1392051769), NULL, 'offset_64'), (328, 128, NULL, to_timestamp(1410094068), 'base_128'), (329, 128, to_timestamp(1410094068), NULL, 'base_128'), (330, 128, NULL, to_timestamp(1366896042), 'offset_128'), (331, 128, to_timestamp(1366896042), NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS POSTS_ANSWERCOUNT_histogram;
CREATE TABLE POSTS_ANSWERCOUNT_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO POSTS_ANSWERCOUNT_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 0, 'base_1'), (1, 1, 0, 1, 'base_1'), (2, 1, 1, 2, 'base_1'), (3, 1, 2, 3, 'base_1'), (4, 1, 3, 4, 'base_1'), (5, 1, 4, 5, 'base_1'), (6, 1, 5, 6, 'base_1'), (7, 1, 6, 7, 'base_1'), (8, 1, 7, 8, 'base_1'), (9, 1, 8, 9, 'base_1'), (10, 1, 9, 10, 'base_1'), (11, 1, 10, 11, 'base_1'), (12, 1, 11, 12, 'base_1'), (13, 1, 12, 13, 'base_1'), (14, 1, 13, 14, 'base_1'), (15, 1, 14, 15, 'base_1'), (16, 1, 15, 15, 'base_1'), (17, 1, 15, 16, 'base_1'), (18, 1, 16, 18, 'base_1'), (19, 1, 18, 19, 'base_1'), (20, 1, 19, 21, 'base_1'), (21, 1, 21, 23, 'base_1'), (22, 1, 23, 24, 'base_1'), (23, 1, 24, 25, 'base_1'), (24, 1, 25, 26, 'base_1'), (25, 1, 26, 27, 'base_1'), (26, 1, 27, 28, 'base_1'), (27, 1, 28, 35, 'base_1'), (28, 1, 35, 42, 'base_1'), (29, 1, 42, 56, 'base_1'), (30, 1, 56, 58, 'base_1'), (31, 1, 58, NULL, 'base_1'), (32, 2, NULL, 1, 'base_2'), (33, 2, 1, 3, 'base_2'), (34, 2, 3, 5, 'base_2'), (35, 2, 5, 7, 'base_2'), (36, 2, 7, 9, 'base_2'), (37, 2, 9, 11, 'base_2'), (38, 2, 11, 13, 'base_2'), (39, 2, 13, 15, 'base_2'), (40, 2, 15, 16, 'base_2'), (41, 2, 16, 19, 'base_2'), (42, 2, 19, 23, 'base_2'), (43, 2, 23, 25, 'base_2'), (44, 2, 25, 27, 'base_2'), (45, 2, 27, 35, 'base_2'), (46, 2, 35, 56, 'base_2'), (47, 2, 56, NULL, 'base_2'), (48, 4, NULL, 3, 'base_4'), (49, 4, 3, 7, 'base_4'), (50, 4, 7, 11, 'base_4'), (51, 4, 11, 15, 'base_4'), (52, 4, 15, 19, 'base_4'), (53, 4, 19, 25, 'base_4'), (54, 4, 25, 35, 'base_4'), (55, 4, 35, NULL, 'base_4'), (56, 4, NULL, 2, 'offset_4'), (57, 4, 2, 6, 'offset_4'), (58, 4, 6, 10, 'offset_4'), (59, 4, 10, 14, 'offset_4'), (60, 4, 14, 18, 'offset_4'), (61, 4, 18, 24, 'offset_4'), (62, 4, 24, 28, 'offset_4'), (63, 4, 28, 58, 'offset_4'), (64, 4, 58, NULL, 'offset_4'), (65, 8, NULL, 7, 'base_8'), (66, 8, 7, 15, 'base_8'), (67, 8, 15, 25, 'base_8'), (68, 8, 25, NULL, 'base_8'), (69, 8, NULL, 4, 'offset_8'), (70, 8, 4, 12, 'offset_8'), (71, 8, 12, 21, 'offset_8'), (72, 8, 21, 42, 'offset_8'), (73, 8, 42, NULL, 'offset_8'), (74, 16, NULL, 15, 'base_16'), (75, 16, 15, NULL, 'base_16'), (76, 16, NULL, 8, 'offset_16'), (77, 16, 8, 26, 'offset_16'), (78, 16, 26, NULL, 'offset_16'), (79, 32, NULL, NULL, 'base_32'), (80, 32, NULL, 15, 'offset_32'), (81, 32, 15, NULL, 'offset_32'), (82, 64, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS POSTS_FAVORITECOUNT_histogram;
CREATE TABLE POSTS_FAVORITECOUNT_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO POSTS_FAVORITECOUNT_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 0, 'base_1'), (1, 1, 0, 1, 'base_1'), (2, 1, 1, 1, 'base_1'), (3, 1, 1, 2, 'base_1'), (4, 1, 2, 2, 'base_1'), (5, 1, 2, 3, 'base_1'), (6, 1, 3, 4, 'base_1'), (7, 1, 4, 4, 'base_1'), (8, 1, 4, 5, 'base_1'), (9, 1, 5, 5, 'base_1'), (10, 1, 5, 6, 'base_1'), (11, 1, 6, 7, 'base_1'), (12, 1, 7, 7, 'base_1'), (13, 1, 7, 8, 'base_1'), (14, 1, 8, 8, 'base_1'), (15, 1, 8, 9, 'base_1'), (16, 1, 9, 10, 'base_1'), (17, 1, 10, 10, 'base_1'), (18, 1, 10, 11, 'base_1'), (19, 1, 11, 11, 'base_1'), (20, 1, 11, 12, 'base_1'), (21, 1, 12, 13, 'base_1'), (22, 1, 13, 13, 'base_1'), (23, 1, 13, 14, 'base_1'), (24, 1, 14, 14, 'base_1'), (25, 1, 14, 15, 'base_1'), (26, 1, 15, 16, 'base_1'), (27, 1, 16, 16, 'base_1'), (28, 1, 16, 17, 'base_1'), (29, 1, 17, 17, 'base_1'), (30, 1, 17, 18, 'base_1'), (31, 1, 18, 19, 'base_1'), (32, 1, 19, 19, 'base_1'), (33, 1, 19, 20, 'base_1'), (34, 1, 20, 20, 'base_1'), (35, 1, 20, 21, 'base_1'), (36, 1, 21, 22, 'base_1'), (37, 1, 22, 22, 'base_1'), (38, 1, 22, 23, 'base_1'), (39, 1, 23, 23, 'base_1'), (40, 1, 23, 24, 'base_1'), (41, 1, 24, 25, 'base_1'), (42, 1, 25, 25, 'base_1'), (43, 1, 25, 26, 'base_1'), (44, 1, 26, 26, 'base_1'), (45, 1, 26, 27, 'base_1'), (46, 1, 27, 28, 'base_1'), (47, 1, 28, 28, 'base_1'), (48, 1, 28, 29, 'base_1'), (49, 1, 29, 29, 'base_1'), (50, 1, 29, 30, 'base_1'), (51, 1, 30, 31, 'base_1'), (52, 1, 31, 31, 'base_1'), (53, 1, 31, 32, 'base_1'), (54, 1, 32, 32, 'base_1'), (55, 1, 32, 33, 'base_1'), (56, 1, 33, 34, 'base_1'), (57, 1, 34, 34, 'base_1'), (58, 1, 34, 35, 'base_1'), (59, 1, 35, 35, 'base_1'), (60, 1, 35, 36, 'base_1'), (61, 1, 36, 37, 'base_1'), (62, 1, 37, 37, 'base_1'), (63, 1, 37, 39, 'base_1'), (64, 1, 39, 39, 'base_1'), (65, 1, 39, 40, 'base_1'), (66, 1, 40, 40, 'base_1'), (67, 1, 40, 41, 'base_1'), (68, 1, 41, 42, 'base_1'), (69, 1, 42, 42, 'base_1'), (70, 1, 42, 43, 'base_1'), (71, 1, 43, 43, 'base_1'), (72, 1, 43, 44, 'base_1'), (73, 1, 44, 45, 'base_1'), (74, 1, 45, 45, 'base_1'), (75, 1, 45, 46, 'base_1'), (76, 1, 46, 46, 'base_1'), (77, 1, 46, 47, 'base_1'), (78, 1, 47, 51, 'base_1'), (79, 1, 51, 51, 'base_1'), (80, 1, 51, 54, 'base_1'), (81, 1, 54, 54, 'base_1'), (82, 1, 54, 55, 'base_1'), (83, 1, 55, 56, 'base_1'), (84, 1, 56, 56, 'base_1'), (85, 1, 56, 57, 'base_1'), (86, 1, 57, 57, 'base_1'), (87, 1, 57, 60, 'base_1'), (88, 1, 60, 61, 'base_1'), (89, 1, 61, 61, 'base_1'), (90, 1, 61, 63, 'base_1'), (91, 1, 63, 63, 'base_1'), (92, 1, 63, 65, 'base_1'), (93, 1, 65, 66, 'base_1'), (94, 1, 66, 66, 'base_1'), (95, 1, 66, 67, 'base_1'), (96, 1, 67, 67, 'base_1'), (97, 1, 67, 68, 'base_1'), (98, 1, 68, 69, 'base_1'), (99, 1, 69, 69, 'base_1'), (100, 1, 69, 71, 'base_1'), (101, 1, 71, 71, 'base_1'), (102, 1, 71, 74, 'base_1'), (103, 1, 74, 75, 'base_1'), (104, 1, 75, 75, 'base_1'), (105, 1, 75, 78, 'base_1'), (106, 1, 78, 78, 'base_1'), (107, 1, 78, 79, 'base_1'), (108, 1, 79, 80, 'base_1'), (109, 1, 80, 80, 'base_1'), (110, 1, 80, 82, 'base_1'), (111, 1, 82, 82, 'base_1'), (112, 1, 82, 88, 'base_1'), (113, 1, 88, 89, 'base_1'), (114, 1, 89, 89, 'base_1'), (115, 1, 89, 108, 'base_1'), (116, 1, 108, 108, 'base_1'), (117, 1, 108, 111, 'base_1'), (118, 1, 111, 113, 'base_1'), (119, 1, 113, 113, 'base_1'), (120, 1, 113, 127, 'base_1'), (121, 1, 127, 127, 'base_1'), (122, 1, 127, 135, 'base_1'), (123, 1, 135, 137, 'base_1'), (124, 1, 137, 137, 'base_1'), (125, 1, 137, 190, 'base_1'), (126, 1, 190, 190, 'base_1'), (127, 1, 190, NULL, 'base_1'), (128, 2, NULL, 1, 'base_2'), (129, 2, 1, 2, 'base_2'), (130, 2, 2, 3, 'base_2'), (131, 2, 3, 4, 'base_2'), (132, 2, 4, 5, 'base_2'), (133, 2, 5, 7, 'base_2'), (134, 2, 7, 8, 'base_2'), (135, 2, 8, 9, 'base_2'), (136, 2, 9, 10, 'base_2'), (137, 2, 10, 11, 'base_2'), (138, 2, 11, 13, 'base_2'), (139, 2, 13, 14, 'base_2'), (140, 2, 14, 15, 'base_2'), (141, 2, 15, 16, 'base_2'), (142, 2, 16, 17, 'base_2'), (143, 2, 17, 19, 'base_2'), (144, 2, 19, 20, 'base_2'), (145, 2, 20, 21, 'base_2'), (146, 2, 21, 22, 'base_2'), (147, 2, 22, 23, 'base_2'), (148, 2, 23, 25, 'base_2'), (149, 2, 25, 26, 'base_2'), (150, 2, 26, 27, 'base_2'), (151, 2, 27, 28, 'base_2'), (152, 2, 28, 29, 'base_2'), (153, 2, 29, 31, 'base_2'), (154, 2, 31, 32, 'base_2'), (155, 2, 32, 33, 'base_2'), (156, 2, 33, 34, 'base_2'), (157, 2, 34, 35, 'base_2'), (158, 2, 35, 37, 'base_2'), (159, 2, 37, 39, 'base_2'), (160, 2, 39, 40, 'base_2'), (161, 2, 40, 41, 'base_2'), (162, 2, 41, 42, 'base_2'), (163, 2, 42, 43, 'base_2'), (164, 2, 43, 45, 'base_2'), (165, 2, 45, 46, 'base_2'), (166, 2, 46, 47, 'base_2'), (167, 2, 47, 51, 'base_2'), (168, 2, 51, 54, 'base_2'), (169, 2, 54, 56, 'base_2'), (170, 2, 56, 57, 'base_2'), (171, 2, 57, 60, 'base_2'), (172, 2, 60, 61, 'base_2'), (173, 2, 61, 63, 'base_2'), (174, 2, 63, 66, 'base_2'), (175, 2, 66, 67, 'base_2'), (176, 2, 67, 68, 'base_2'), (177, 2, 68, 69, 'base_2'), (178, 2, 69, 71, 'base_2'), (179, 2, 71, 75, 'base_2'), (180, 2, 75, 78, 'base_2'), (181, 2, 78, 79, 'base_2'), (182, 2, 79, 80, 'base_2'), (183, 2, 80, 82, 'base_2'), (184, 2, 82, 89, 'base_2'), (185, 2, 89, 108, 'base_2'), (186, 2, 108, 111, 'base_2'), (187, 2, 111, 113, 'base_2'), (188, 2, 113, 127, 'base_2'), (189, 2, 127, 137, 'base_2'), (190, 2, 137, 190, 'base_2'), (191, 2, 190, NULL, 'base_2'), (192, 4, NULL, 2, 'base_4'), (193, 4, 2, 4, 'base_4'), (194, 4, 4, 7, 'base_4'), (195, 4, 7, 9, 'base_4'), (196, 4, 9, 11, 'base_4'), (197, 4, 11, 14, 'base_4'), (198, 4, 14, 16, 'base_4'), (199, 4, 16, 19, 'base_4'), (200, 4, 19, 21, 'base_4'), (201, 4, 21, 23, 'base_4'), (202, 4, 23, 26, 'base_4'), (203, 4, 26, 28, 'base_4'), (204, 4, 28, 31, 'base_4'), (205, 4, 31, 33, 'base_4'), (206, 4, 33, 35, 'base_4'), (207, 4, 35, 39, 'base_4'), (208, 4, 39, 41, 'base_4'), (209, 4, 41, 43, 'base_4'), (210, 4, 43, 46, 'base_4'), (211, 4, 46, 51, 'base_4'), (212, 4, 51, 56, 'base_4'), (213, 4, 56, 60, 'base_4'), (214, 4, 60, 63, 'base_4'), (215, 4, 63, 67, 'base_4'), (216, 4, 67, 69, 'base_4'), (217, 4, 69, 75, 'base_4'), (218, 4, 75, 79, 'base_4'), (219, 4, 79, 82, 'base_4'), (220, 4, 82, 108, 'base_4'), (221, 4, 108, 113, 'base_4'), (222, 4, 113, 137, 'base_4'), (223, 4, 137, NULL, 'base_4'), (224, 4, NULL, 1, 'offset_4'), (225, 4, 1, 4, 'offset_4'), (226, 4, 4, 6, 'offset_4'), (227, 4, 6, 8, 'offset_4'), (228, 4, 8, 11, 'offset_4'), (229, 4, 11, 13, 'offset_4'), (230, 4, 13, 16, 'offset_4'), (231, 4, 16, 18, 'offset_4'), (232, 4, 18, 20, 'offset_4'), (233, 4, 20, 23, 'offset_4'), (234, 4, 23, 25, 'offset_4'), (235, 4, 25, 28, 'offset_4'), (236, 4, 28, 30, 'offset_4'), (237, 4, 30, 32, 'offset_4'), (238, 4, 32, 35, 'offset_4'), (239, 4, 35, 37, 'offset_4'), (240, 4, 37, 40, 'offset_4'), (241, 4, 40, 43, 'offset_4'), (242, 4, 43, 45, 'offset_4'), (243, 4, 45, 51, 'offset_4'), (244, 4, 51, 55, 'offset_4'), (245, 4, 55, 57, 'offset_4'), (246, 4, 57, 63, 'offset_4'), (247, 4, 63, 66, 'offset_4'), (248, 4, 66, 69, 'offset_4'), (249, 4, 69, 74, 'offset_4'), (250, 4, 74, 78, 'offset_4'), (251, 4, 78, 82, 'offset_4'), (252, 4, 82, 89, 'offset_4'), (253, 4, 89, 113, 'offset_4'), (254, 4, 113, 135, 'offset_4'), (255, 4, 135, 190, 'offset_4'), (256, 4, 190, NULL, 'offset_4'), (257, 8, NULL, 4, 'base_8'), (258, 8, 4, 9, 'base_8'), (259, 8, 9, 14, 'base_8'), (260, 8, 14, 19, 'base_8'), (261, 8, 19, 23, 'base_8'), (262, 8, 23, 28, 'base_8'), (263, 8, 28, 33, 'base_8'), (264, 8, 33, 39, 'base_8'), (265, 8, 39, 43, 'base_8'), (266, 8, 43, 51, 'base_8'), (267, 8, 51, 60, 'base_8'), (268, 8, 60, 67, 'base_8'), (269, 8, 67, 75, 'base_8'), (270, 8, 75, 82, 'base_8'), (271, 8, 82, 113, 'base_8'), (272, 8, 113, NULL, 'base_8'), (273, 8, NULL, 2, 'offset_8'), (274, 8, 2, 7, 'offset_8'), (275, 8, 7, 12, 'offset_8'), (276, 8, 12, 17, 'offset_8'), (277, 8, 17, 22, 'offset_8'), (278, 8, 22, 26, 'offset_8'), (279, 8, 26, 31, 'offset_8'), (280, 8, 31, 36, 'offset_8'), (281, 8, 36, 42, 'offset_8'), (282, 8, 42, 46, 'offset_8'), (283, 8, 46, 56, 'offset_8'), (284, 8, 56, 65, 'offset_8'), (285, 8, 65, 71, 'offset_8'), (286, 8, 71, 80, 'offset_8'), (287, 8, 80, 108, 'offset_8'), (288, 8, 108, 137, 'offset_8'), (289, 8, 137, NULL, 'offset_8'), (290, 16, NULL, 9, 'base_16'), (291, 16, 9, 19, 'base_16'), (292, 16, 19, 28, 'base_16'), (293, 16, 28, 39, 'base_16'), (294, 16, 39, 51, 'base_16'), (295, 16, 51, 67, 'base_16'), (296, 16, 67, 82, 'base_16'), (297, 16, 82, NULL, 'base_16'), (298, 16, NULL, 5, 'offset_16'), (299, 16, 5, 14, 'offset_16'), (300, 16, 14, 24, 'offset_16'), (301, 16, 24, 34, 'offset_16'), (302, 16, 34, 44, 'offset_16'), (303, 16, 44, 61, 'offset_16'), (304, 16, 61, 75, 'offset_16'), (305, 16, 75, 127, 'offset_16'), (306, 16, 127, NULL, 'offset_16'), (307, 32, NULL, 19, 'base_32'), (308, 32, 19, 39, 'base_32'), (309, 32, 39, 67, 'base_32'), (310, 32, 67, NULL, 'base_32'), (311, 32, NULL, 10, 'offset_32'), (312, 32, 10, 29, 'offset_32'), (313, 32, 29, 54, 'offset_32'), (314, 32, 54, 88, 'offset_32'), (315, 32, 88, NULL, 'offset_32'), (316, 64, NULL, 39, 'base_64'), (317, 64, 39, NULL, 'base_64'), (318, 64, NULL, 19, 'offset_64'), (319, 64, 19, 67, 'offset_64'), (320, 64, 67, NULL, 'offset_64'), (321, 128, NULL, NULL, 'base_128'), (322, 128, NULL, 39, 'offset_128'), (323, 128, 39, NULL, 'offset_128'), (324, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS POSTS_VIEWCOUNT_histogram;
CREATE TABLE POSTS_VIEWCOUNT_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO POSTS_VIEWCOUNT_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 29, 'base_1'), (1, 1, 29, 58, 'base_1'), (2, 1, 58, 87, 'base_1'), (3, 1, 87, 116, 'base_1'), (4, 1, 116, 144, 'base_1'), (5, 1, 144, 173, 'base_1'), (6, 1, 173, 202, 'base_1'), (7, 1, 202, 231, 'base_1'), (8, 1, 231, 260, 'base_1'), (9, 1, 260, 288, 'base_1'), (10, 1, 288, 317, 'base_1'), (11, 1, 317, 346, 'base_1'), (12, 1, 346, 375, 'base_1'), (13, 1, 375, 404, 'base_1'), (14, 1, 404, 432, 'base_1'), (15, 1, 432, 461, 'base_1'), (16, 1, 461, 490, 'base_1'), (17, 1, 490, 519, 'base_1'), (18, 1, 519, 548, 'base_1'), (19, 1, 548, 576, 'base_1'), (20, 1, 576, 605, 'base_1'), (21, 1, 605, 634, 'base_1'), (22, 1, 634, 663, 'base_1'), (23, 1, 663, 691, 'base_1'), (24, 1, 691, 720, 'base_1'), (25, 1, 720, 749, 'base_1'), (26, 1, 749, 778, 'base_1'), (27, 1, 778, 807, 'base_1'), (28, 1, 807, 835, 'base_1'), (29, 1, 835, 864, 'base_1'), (30, 1, 864, 893, 'base_1'), (31, 1, 893, 922, 'base_1'), (32, 1, 922, 951, 'base_1'), (33, 1, 951, 979, 'base_1'), (34, 1, 979, 1008, 'base_1'), (35, 1, 1008, 1038, 'base_1'), (36, 1, 1038, 1067, 'base_1'), (37, 1, 1067, 1098, 'base_1'), (38, 1, 1098, 1128, 'base_1'), (39, 1, 1128, 1161, 'base_1'), (40, 1, 1161, 1190, 'base_1'), (41, 1, 1190, 1220, 'base_1'), (42, 1, 1220, 1253, 'base_1'), (43, 1, 1253, 1283, 'base_1'), (44, 1, 1283, 1313, 'base_1'), (45, 1, 1313, 1343, 'base_1'), (46, 1, 1343, 1374, 'base_1'), (47, 1, 1374, 1404, 'base_1'), (48, 1, 1404, 1438, 'base_1'), (49, 1, 1438, 1472, 'base_1'), (50, 1, 1472, 1508, 'base_1'), (51, 1, 1508, 1541, 'base_1'), (52, 1, 1541, 1573, 'base_1'), (53, 1, 1573, 1606, 'base_1'), (54, 1, 1606, 1638, 'base_1'), (55, 1, 1638, 1672, 'base_1'), (56, 1, 1672, 1705, 'base_1'), (57, 1, 1705, 1741, 'base_1'), (58, 1, 1741, 1783, 'base_1'), (59, 1, 1783, 1823, 'base_1'), (60, 1, 1823, 1860, 'base_1'), (61, 1, 1860, 1900, 'base_1'), (62, 1, 1900, 1945, 'base_1'), (63, 1, 1945, 1987, 'base_1'), (64, 1, 1987, 2026, 'base_1'), (65, 1, 2026, 2060, 'base_1'), (66, 1, 2060, 2103, 'base_1'), (67, 1, 2103, 2148, 'base_1'), (68, 1, 2148, 2187, 'base_1'), (69, 1, 2187, 2230, 'base_1'), (70, 1, 2230, 2265, 'base_1'), (71, 1, 2265, 2304, 'base_1'), (72, 1, 2304, 2362, 'base_1'), (73, 1, 2362, 2410, 'base_1'), (74, 1, 2410, 2458, 'base_1'), (75, 1, 2458, 2505, 'base_1'), (76, 1, 2505, 2548, 'base_1'), (77, 1, 2548, 2608, 'base_1'), (78, 1, 2608, 2657, 'base_1'), (79, 1, 2657, 2714, 'base_1'), (80, 1, 2714, 2761, 'base_1'), (81, 1, 2761, 2819, 'base_1'), (82, 1, 2819, 2871, 'base_1'), (83, 1, 2871, 2931, 'base_1'), (84, 1, 2931, 2997, 'base_1'), (85, 1, 2997, 3052, 'base_1'), (86, 1, 3052, 3114, 'base_1'), (87, 1, 3114, 3191, 'base_1'), (88, 1, 3191, 3272, 'base_1'), (89, 1, 3272, 3353, 'base_1'), (90, 1, 3353, 3414, 'base_1'), (91, 1, 3414, 3504, 'base_1'), (92, 1, 3504, 3565, 'base_1'), (93, 1, 3565, 3655, 'base_1'), (94, 1, 3655, 3727, 'base_1'), (95, 1, 3727, 3829, 'base_1'), (96, 1, 3829, 3922, 'base_1'), (97, 1, 3922, 4015, 'base_1'), (98, 1, 4015, 4119, 'base_1'), (99, 1, 4119, 4222, 'base_1'), (100, 1, 4222, 4306, 'base_1'), (101, 1, 4306, 4459, 'base_1'), (102, 1, 4459, 4610, 'base_1'), (103, 1, 4610, 4751, 'base_1'), (104, 1, 4751, 4874, 'base_1'), (105, 1, 4874, 5016, 'base_1'), (106, 1, 5016, 5243, 'base_1'), (107, 1, 5243, 5386, 'base_1'), (108, 1, 5386, 5645, 'base_1'), (109, 1, 5645, 5808, 'base_1'), (110, 1, 5808, 6026, 'base_1'), (111, 1, 6026, 6357, 'base_1'), (112, 1, 6357, 6676, 'base_1'), (113, 1, 6676, 7079, 'base_1'), (114, 1, 7079, 7392, 'base_1'), (115, 1, 7392, 7716, 'base_1'), (116, 1, 7716, 8108, 'base_1'), (117, 1, 8108, 8595, 'base_1'), (118, 1, 8595, 9027, 'base_1'), (119, 1, 9027, 9927, 'base_1'), (120, 1, 9927, 10517, 'base_1'), (121, 1, 10517, 11653, 'base_1'), (122, 1, 11653, 13453, 'base_1'), (123, 1, 13453, 14855, 'base_1'), (124, 1, 14855, 16910, 'base_1'), (125, 1, 16910, 20706, 'base_1'), (126, 1, 20706, 25744, 'base_1'), (127, 1, 25744, 37011, 'base_1'), (128, 1, 37011, NULL, 'base_1'), (129, 2, NULL, 58, 'base_2'), (130, 2, 58, 116, 'base_2'), (131, 2, 116, 173, 'base_2'), (132, 2, 173, 231, 'base_2'), (133, 2, 231, 288, 'base_2'), (134, 2, 288, 346, 'base_2'), (135, 2, 346, 404, 'base_2'), (136, 2, 404, 461, 'base_2'), (137, 2, 461, 519, 'base_2'), (138, 2, 519, 576, 'base_2'), (139, 2, 576, 634, 'base_2'), (140, 2, 634, 691, 'base_2'), (141, 2, 691, 749, 'base_2'), (142, 2, 749, 807, 'base_2'), (143, 2, 807, 864, 'base_2'), (144, 2, 864, 922, 'base_2'), (145, 2, 922, 979, 'base_2'), (146, 2, 979, 1038, 'base_2'), (147, 2, 1038, 1098, 'base_2'), (148, 2, 1098, 1161, 'base_2'), (149, 2, 1161, 1220, 'base_2'), (150, 2, 1220, 1283, 'base_2'), (151, 2, 1283, 1343, 'base_2'), (152, 2, 1343, 1404, 'base_2'), (153, 2, 1404, 1472, 'base_2'), (154, 2, 1472, 1541, 'base_2'), (155, 2, 1541, 1606, 'base_2'), (156, 2, 1606, 1672, 'base_2'), (157, 2, 1672, 1741, 'base_2'), (158, 2, 1741, 1823, 'base_2'), (159, 2, 1823, 1900, 'base_2'), (160, 2, 1900, 1987, 'base_2'), (161, 2, 1987, 2060, 'base_2'), (162, 2, 2060, 2148, 'base_2'), (163, 2, 2148, 2230, 'base_2'), (164, 2, 2230, 2304, 'base_2'), (165, 2, 2304, 2410, 'base_2'), (166, 2, 2410, 2505, 'base_2'), (167, 2, 2505, 2608, 'base_2'), (168, 2, 2608, 2714, 'base_2'), (169, 2, 2714, 2819, 'base_2'), (170, 2, 2819, 2931, 'base_2'), (171, 2, 2931, 3052, 'base_2'), (172, 2, 3052, 3191, 'base_2'), (173, 2, 3191, 3353, 'base_2'), (174, 2, 3353, 3504, 'base_2'), (175, 2, 3504, 3655, 'base_2'), (176, 2, 3655, 3829, 'base_2'), (177, 2, 3829, 4015, 'base_2'), (178, 2, 4015, 4222, 'base_2'), (179, 2, 4222, 4459, 'base_2'), (180, 2, 4459, 4751, 'base_2'), (181, 2, 4751, 5016, 'base_2'), (182, 2, 5016, 5386, 'base_2'), (183, 2, 5386, 5808, 'base_2'), (184, 2, 5808, 6357, 'base_2'), (185, 2, 6357, 7079, 'base_2'), (186, 2, 7079, 7716, 'base_2'), (187, 2, 7716, 8595, 'base_2'), (188, 2, 8595, 9927, 'base_2'), (189, 2, 9927, 11653, 'base_2'), (190, 2, 11653, 14855, 'base_2'), (191, 2, 14855, 20706, 'base_2'), (192, 2, 20706, 37011, 'base_2'), (193, 2, 37011, NULL, 'base_2'), (194, 4, NULL, 116, 'base_4'), (195, 4, 116, 231, 'base_4'), (196, 4, 231, 346, 'base_4'), (197, 4, 346, 461, 'base_4'), (198, 4, 461, 576, 'base_4'), (199, 4, 576, 691, 'base_4'), (200, 4, 691, 807, 'base_4'), (201, 4, 807, 922, 'base_4'), (202, 4, 922, 1038, 'base_4'), (203, 4, 1038, 1161, 'base_4'), (204, 4, 1161, 1283, 'base_4'), (205, 4, 1283, 1404, 'base_4'), (206, 4, 1404, 1541, 'base_4'), (207, 4, 1541, 1672, 'base_4'), (208, 4, 1672, 1823, 'base_4'), (209, 4, 1823, 1987, 'base_4'), (210, 4, 1987, 2148, 'base_4'), (211, 4, 2148, 2304, 'base_4'), (212, 4, 2304, 2505, 'base_4'), (213, 4, 2505, 2714, 'base_4'), (214, 4, 2714, 2931, 'base_4'), (215, 4, 2931, 3191, 'base_4'), (216, 4, 3191, 3504, 'base_4'), (217, 4, 3504, 3829, 'base_4'), (218, 4, 3829, 4222, 'base_4'), (219, 4, 4222, 4751, 'base_4'), (220, 4, 4751, 5386, 'base_4'), (221, 4, 5386, 6357, 'base_4'), (222, 4, 6357, 7716, 'base_4'), (223, 4, 7716, 9927, 'base_4'), (224, 4, 9927, 14855, 'base_4'), (225, 4, 14855, 37011, 'base_4'), (226, 4, 37011, NULL, 'base_4'), (227, 4, NULL, 87, 'offset_4'), (228, 4, 87, 202, 'offset_4'), (229, 4, 202, 317, 'offset_4'), (230, 4, 317, 432, 'offset_4'), (231, 4, 432, 548, 'offset_4'), (232, 4, 548, 663, 'offset_4'), (233, 4, 663, 778, 'offset_4'), (234, 4, 778, 893, 'offset_4'), (235, 4, 893, 1008, 'offset_4'), (236, 4, 1008, 1128, 'offset_4'), (237, 4, 1128, 1253, 'offset_4'), (238, 4, 1253, 1374, 'offset_4'), (239, 4, 1374, 1508, 'offset_4'), (240, 4, 1508, 1638, 'offset_4'), (241, 4, 1638, 1783, 'offset_4'), (242, 4, 1783, 1945, 'offset_4'), (243, 4, 1945, 2103, 'offset_4'), (244, 4, 2103, 2265, 'offset_4'), (245, 4, 2265, 2458, 'offset_4'), (246, 4, 2458, 2657, 'offset_4'), (247, 4, 2657, 2871, 'offset_4'), (248, 4, 2871, 3114, 'offset_4'), (249, 4, 3114, 3414, 'offset_4'), (250, 4, 3414, 3727, 'offset_4'), (251, 4, 3727, 4119, 'offset_4'), (252, 4, 4119, 4610, 'offset_4'), (253, 4, 4610, 5243, 'offset_4'), (254, 4, 5243, 6026, 'offset_4'), (255, 4, 6026, 7392, 'offset_4'), (256, 4, 7392, 9027, 'offset_4'), (257, 4, 9027, 13453, 'offset_4'), (258, 4, 13453, 25744, 'offset_4'), (259, 4, 25744, NULL, 'offset_4'), (260, 8, NULL, 231, 'base_8'), (261, 8, 231, 461, 'base_8'), (262, 8, 461, 691, 'base_8'), (263, 8, 691, 922, 'base_8'), (264, 8, 922, 1161, 'base_8'), (265, 8, 1161, 1404, 'base_8'), (266, 8, 1404, 1672, 'base_8'), (267, 8, 1672, 1987, 'base_8'), (268, 8, 1987, 2304, 'base_8'), (269, 8, 2304, 2714, 'base_8'), (270, 8, 2714, 3191, 'base_8'), (271, 8, 3191, 3829, 'base_8'), (272, 8, 3829, 4751, 'base_8'), (273, 8, 4751, 6357, 'base_8'), (274, 8, 6357, 9927, 'base_8'), (275, 8, 9927, 37011, 'base_8'), (276, 8, 37011, NULL, 'base_8'), (277, 8, NULL, 144, 'offset_8'), (278, 8, 144, 375, 'offset_8'), (279, 8, 375, 605, 'offset_8'), (280, 8, 605, 835, 'offset_8'), (281, 8, 835, 1067, 'offset_8'), (282, 8, 1067, 1313, 'offset_8'), (283, 8, 1313, 1573, 'offset_8'), (284, 8, 1573, 1860, 'offset_8'), (285, 8, 1860, 2187, 'offset_8'), (286, 8, 2187, 2548, 'offset_8'), (287, 8, 2548, 2997, 'offset_8'), (288, 8, 2997, 3565, 'offset_8'), (289, 8, 3565, 4306, 'offset_8'), (290, 8, 4306, 5645, 'offset_8'), (291, 8, 5645, 8108, 'offset_8'), (292, 8, 8108, 16910, 'offset_8'), (293, 8, 16910, NULL, 'offset_8'), (294, 16, NULL, 461, 'base_16'), (295, 16, 461, 922, 'base_16'), (296, 16, 922, 1404, 'base_16'), (297, 16, 1404, 1987, 'base_16'), (298, 16, 1987, 2714, 'base_16'), (299, 16, 2714, 3829, 'base_16'), (300, 16, 3829, 6357, 'base_16'), (301, 16, 6357, 37011, 'base_16'), (302, 16, 37011, NULL, 'base_16'), (303, 16, NULL, 260, 'offset_16'), (304, 16, 260, 720, 'offset_16'), (305, 16, 720, 1190, 'offset_16'), (306, 16, 1190, 1705, 'offset_16'), (307, 16, 1705, 2362, 'offset_16'), (308, 16, 2362, 3272, 'offset_16'), (309, 16, 3272, 4874, 'offset_16'), (310, 16, 4874, 10517, 'offset_16'), (311, 16, 10517, NULL, 'offset_16'), (312, 32, NULL, 922, 'base_32'), (313, 32, 922, 1987, 'base_32'), (314, 32, 1987, 3829, 'base_32'), (315, 32, 3829, 37011, 'base_32'), (316, 32, 37011, NULL, 'base_32'), (317, 32, NULL, 490, 'offset_32'), (318, 32, 490, 1438, 'offset_32'), (319, 32, 1438, 2761, 'offset_32'), (320, 32, 2761, 6676, 'offset_32'), (321, 32, 6676, NULL, 'offset_32'), (322, 64, NULL, 1987, 'base_64'), (323, 64, 1987, 37011, 'base_64'), (324, 64, 37011, NULL, 'base_64'), (325, 64, NULL, 951, 'offset_64'), (326, 64, 951, 3922, 'offset_64'), (327, 64, 3922, NULL, 'offset_64'), (328, 128, NULL, 37011, 'base_128'), (329, 128, 37011, NULL, 'base_128'), (330, 128, NULL, 2026, 'offset_128'), (331, 128, 2026, NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS POSTS_SCORE_histogram;
CREATE TABLE POSTS_SCORE_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO POSTS_SCORE_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, -13, 'base_1'), (1, 1, -13, -10, 'base_1'), (2, 1, -10, -9, 'base_1'), (3, 1, -9, -8, 'base_1'), (4, 1, -8, -7, 'base_1'), (5, 1, -7, -6, 'base_1'), (6, 1, -6, -5, 'base_1'), (7, 1, -5, -4, 'base_1'), (8, 1, -4, -3, 'base_1'), (9, 1, -3, -2, 'base_1'), (10, 1, -2, -1, 'base_1'), (11, 1, -1, 0, 'base_1'), (12, 1, 0, 1, 'base_1'), (13, 1, 1, 2, 'base_1'), (14, 1, 2, 3, 'base_1'), (15, 1, 3, 4, 'base_1'), (16, 1, 4, 5, 'base_1'), (17, 1, 5, 6, 'base_1'), (18, 1, 6, 7, 'base_1'), (19, 1, 7, 8, 'base_1'), (20, 1, 8, 9, 'base_1'), (21, 1, 9, 10, 'base_1'), (22, 1, 10, 11, 'base_1'), (23, 1, 11, 12, 'base_1'), (24, 1, 12, 13, 'base_1'), (25, 1, 13, 14, 'base_1'), (26, 1, 14, 15, 'base_1'), (27, 1, 15, 16, 'base_1'), (28, 1, 16, 17, 'base_1'), (29, 1, 17, 18, 'base_1'), (30, 1, 18, 19, 'base_1'), (31, 1, 19, 20, 'base_1'), (32, 1, 20, 21, 'base_1'), (33, 1, 21, 22, 'base_1'), (34, 1, 22, 23, 'base_1'), (35, 1, 23, 24, 'base_1'), (36, 1, 24, 25, 'base_1'), (37, 1, 25, 26, 'base_1'), (38, 1, 26, 27, 'base_1'), (39, 1, 27, 28, 'base_1'), (40, 1, 28, 29, 'base_1'), (41, 1, 29, 30, 'base_1'), (42, 1, 30, 31, 'base_1'), (43, 1, 31, 32, 'base_1'), (44, 1, 32, 33, 'base_1'), (45, 1, 33, 34, 'base_1'), (46, 1, 34, 35, 'base_1'), (47, 1, 35, 36, 'base_1'), (48, 1, 36, 37, 'base_1'), (49, 1, 37, 38, 'base_1'), (50, 1, 38, 39, 'base_1'), (51, 1, 39, 40, 'base_1'), (52, 1, 40, 41, 'base_1'), (53, 1, 41, 42, 'base_1'), (54, 1, 42, 43, 'base_1'), (55, 1, 43, 44, 'base_1'), (56, 1, 44, 45, 'base_1'), (57, 1, 45, 46, 'base_1'), (58, 1, 46, 47, 'base_1'), (59, 1, 47, 48, 'base_1'), (60, 1, 48, 49, 'base_1'), (61, 1, 49, 50, 'base_1'), (62, 1, 50, 51, 'base_1'), (63, 1, 51, 52, 'base_1'), (64, 1, 52, 53, 'base_1'), (65, 1, 53, 54, 'base_1'), (66, 1, 54, 55, 'base_1'), (67, 1, 55, 56, 'base_1'), (68, 1, 56, 57, 'base_1'), (69, 1, 57, 58, 'base_1'), (70, 1, 58, 59, 'base_1'), (71, 1, 59, 60, 'base_1'), (72, 1, 60, 61, 'base_1'), (73, 1, 61, 62, 'base_1'), (74, 1, 62, 63, 'base_1'), (75, 1, 63, 64, 'base_1'), (76, 1, 64, 65, 'base_1'), (77, 1, 65, 66, 'base_1'), (78, 1, 66, 67, 'base_1'), (79, 1, 67, 68, 'base_1'), (80, 1, 68, 69, 'base_1'), (81, 1, 69, 70, 'base_1'), (82, 1, 70, 71, 'base_1'), (83, 1, 71, 72, 'base_1'), (84, 1, 72, 73, 'base_1'), (85, 1, 73, 74, 'base_1'), (86, 1, 74, 75, 'base_1'), (87, 1, 75, 76, 'base_1'), (88, 1, 76, 77, 'base_1'), (89, 1, 77, 78, 'base_1'), (90, 1, 78, 79, 'base_1'), (91, 1, 79, 81, 'base_1'), (92, 1, 81, 83, 'base_1'), (93, 1, 83, 84, 'base_1'), (94, 1, 84, 85, 'base_1'), (95, 1, 85, 86, 'base_1'), (96, 1, 86, 87, 'base_1'), (97, 1, 87, 88, 'base_1'), (98, 1, 88, 89, 'base_1'), (99, 1, 89, 90, 'base_1'), (100, 1, 90, 92, 'base_1'), (101, 1, 92, 94, 'base_1'), (102, 1, 94, 95, 'base_1'), (103, 1, 95, 96, 'base_1'), (104, 1, 96, 97, 'base_1'), (105, 1, 97, 98, 'base_1'), (106, 1, 98, 99, 'base_1'), (107, 1, 99, 102, 'base_1'), (108, 1, 102, 105, 'base_1'), (109, 1, 105, 106, 'base_1'), (110, 1, 106, 108, 'base_1'), (111, 1, 108, 109, 'base_1'), (112, 1, 109, 110, 'base_1'), (113, 1, 110, 113, 'base_1'), (114, 1, 113, 115, 'base_1'), (115, 1, 115, 121, 'base_1'), (116, 1, 121, 122, 'base_1'), (117, 1, 122, 123, 'base_1'), (118, 1, 123, 124, 'base_1'), (119, 1, 124, 128, 'base_1'), (120, 1, 128, 129, 'base_1'), (121, 1, 129, 135, 'base_1'), (122, 1, 135, 140, 'base_1'), (123, 1, 140, 146, 'base_1'), (124, 1, 146, 152, 'base_1'), (125, 1, 152, 156, 'base_1'), (126, 1, 156, 164, 'base_1'), (127, 1, 164, 184, 'base_1'), (128, 1, 184, NULL, 'base_1'), (129, 2, NULL, -10, 'base_2'), (130, 2, -10, -8, 'base_2'), (131, 2, -8, -6, 'base_2'), (132, 2, -6, -4, 'base_2'), (133, 2, -4, -2, 'base_2'), (134, 2, -2, 0, 'base_2'), (135, 2, 0, 2, 'base_2'), (136, 2, 2, 4, 'base_2'), (137, 2, 4, 6, 'base_2'), (138, 2, 6, 8, 'base_2'), (139, 2, 8, 10, 'base_2'), (140, 2, 10, 12, 'base_2'), (141, 2, 12, 14, 'base_2'), (142, 2, 14, 16, 'base_2'), (143, 2, 16, 18, 'base_2'), (144, 2, 18, 20, 'base_2'), (145, 2, 20, 22, 'base_2'), (146, 2, 22, 24, 'base_2'), (147, 2, 24, 26, 'base_2'), (148, 2, 26, 28, 'base_2'), (149, 2, 28, 30, 'base_2'), (150, 2, 30, 32, 'base_2'), (151, 2, 32, 34, 'base_2'), (152, 2, 34, 36, 'base_2'), (153, 2, 36, 38, 'base_2'), (154, 2, 38, 40, 'base_2'), (155, 2, 40, 42, 'base_2'), (156, 2, 42, 44, 'base_2'), (157, 2, 44, 46, 'base_2'), (158, 2, 46, 48, 'base_2'), (159, 2, 48, 50, 'base_2'), (160, 2, 50, 52, 'base_2'), (161, 2, 52, 54, 'base_2'), (162, 2, 54, 56, 'base_2'), (163, 2, 56, 58, 'base_2'), (164, 2, 58, 60, 'base_2'), (165, 2, 60, 62, 'base_2'), (166, 2, 62, 64, 'base_2'), (167, 2, 64, 66, 'base_2'), (168, 2, 66, 68, 'base_2'), (169, 2, 68, 70, 'base_2'), (170, 2, 70, 72, 'base_2'), (171, 2, 72, 74, 'base_2'), (172, 2, 74, 76, 'base_2'), (173, 2, 76, 78, 'base_2'), (174, 2, 78, 81, 'base_2'), (175, 2, 81, 84, 'base_2'), (176, 2, 84, 86, 'base_2'), (177, 2, 86, 88, 'base_2'), (178, 2, 88, 90, 'base_2'), (179, 2, 90, 94, 'base_2'), (180, 2, 94, 96, 'base_2'), (181, 2, 96, 98, 'base_2'), (182, 2, 98, 102, 'base_2'), (183, 2, 102, 106, 'base_2'), (184, 2, 106, 109, 'base_2'), (185, 2, 109, 113, 'base_2'), (186, 2, 113, 121, 'base_2'), (187, 2, 121, 123, 'base_2'), (188, 2, 123, 128, 'base_2'), (189, 2, 128, 135, 'base_2'), (190, 2, 135, 146, 'base_2'), (191, 2, 146, 156, 'base_2'), (192, 2, 156, 184, 'base_2'), (193, 2, 184, NULL, 'base_2'), (194, 4, NULL, -8, 'base_4'), (195, 4, -8, -4, 'base_4'), (196, 4, -4, 0, 'base_4'), (197, 4, 0, 4, 'base_4'), (198, 4, 4, 8, 'base_4'), (199, 4, 8, 12, 'base_4'), (200, 4, 12, 16, 'base_4'), (201, 4, 16, 20, 'base_4'), (202, 4, 20, 24, 'base_4'), (203, 4, 24, 28, 'base_4'), (204, 4, 28, 32, 'base_4'), (205, 4, 32, 36, 'base_4'), (206, 4, 36, 40, 'base_4'), (207, 4, 40, 44, 'base_4'), (208, 4, 44, 48, 'base_4'), (209, 4, 48, 52, 'base_4'), (210, 4, 52, 56, 'base_4'), (211, 4, 56, 60, 'base_4'), (212, 4, 60, 64, 'base_4'), (213, 4, 64, 68, 'base_4'), (214, 4, 68, 72, 'base_4'), (215, 4, 72, 76, 'base_4'), (216, 4, 76, 81, 'base_4'), (217, 4, 81, 86, 'base_4'), (218, 4, 86, 90, 'base_4'), (219, 4, 90, 96, 'base_4'), (220, 4, 96, 102, 'base_4'), (221, 4, 102, 109, 'base_4'), (222, 4, 109, 121, 'base_4'), (223, 4, 121, 128, 'base_4'), (224, 4, 128, 146, 'base_4'), (225, 4, 146, 184, 'base_4'), (226, 4, 184, NULL, 'base_4'), (227, 4, NULL, -9, 'offset_4'), (228, 4, -9, -5, 'offset_4'), (229, 4, -5, -1, 'offset_4'), (230, 4, -1, 3, 'offset_4'), (231, 4, 3, 7, 'offset_4'), (232, 4, 7, 11, 'offset_4'), (233, 4, 11, 15, 'offset_4'), (234, 4, 15, 19, 'offset_4'), (235, 4, 19, 23, 'offset_4'), (236, 4, 23, 27, 'offset_4'), (237, 4, 27, 31, 'offset_4'), (238, 4, 31, 35, 'offset_4'), (239, 4, 35, 39, 'offset_4'), (240, 4, 39, 43, 'offset_4'), (241, 4, 43, 47, 'offset_4'), (242, 4, 47, 51, 'offset_4'), (243, 4, 51, 55, 'offset_4'), (244, 4, 55, 59, 'offset_4'), (245, 4, 59, 63, 'offset_4'), (246, 4, 63, 67, 'offset_4'), (247, 4, 67, 71, 'offset_4'), (248, 4, 71, 75, 'offset_4'), (249, 4, 75, 79, 'offset_4'), (250, 4, 79, 85, 'offset_4'), (251, 4, 85, 89, 'offset_4'), (252, 4, 89, 95, 'offset_4'), (253, 4, 95, 99, 'offset_4'), (254, 4, 99, 108, 'offset_4'), (255, 4, 108, 115, 'offset_4'), (256, 4, 115, 124, 'offset_4'), (257, 4, 124, 140, 'offset_4'), (258, 4, 140, 164, 'offset_4'), (259, 4, 164, NULL, 'offset_4'), (260, 8, NULL, -4, 'base_8'), (261, 8, -4, 4, 'base_8'), (262, 8, 4, 12, 'base_8'), (263, 8, 12, 20, 'base_8'), (264, 8, 20, 28, 'base_8'), (265, 8, 28, 36, 'base_8'), (266, 8, 36, 44, 'base_8'), (267, 8, 44, 52, 'base_8'), (268, 8, 52, 60, 'base_8'), (269, 8, 60, 68, 'base_8'), (270, 8, 68, 76, 'base_8'), (271, 8, 76, 86, 'base_8'), (272, 8, 86, 96, 'base_8'), (273, 8, 96, 109, 'base_8'), (274, 8, 109, 128, 'base_8'), (275, 8, 128, 184, 'base_8'), (276, 8, 184, NULL, 'base_8'), (277, 8, NULL, -7, 'offset_8'), (278, 8, -7, 1, 'offset_8'), (279, 8, 1, 9, 'offset_8'), (280, 8, 9, 17, 'offset_8'), (281, 8, 17, 25, 'offset_8'), (282, 8, 25, 33, 'offset_8'), (283, 8, 33, 41, 'offset_8'), (284, 8, 41, 49, 'offset_8'), (285, 8, 49, 57, 'offset_8'), (286, 8, 57, 65, 'offset_8'), (287, 8, 65, 73, 'offset_8'), (288, 8, 73, 83, 'offset_8'), (289, 8, 83, 92, 'offset_8'), (290, 8, 92, 105, 'offset_8'), (291, 8, 105, 122, 'offset_8'), (292, 8, 122, 152, 'offset_8'), (293, 8, 152, NULL, 'offset_8'), (294, 16, NULL, 4, 'base_16'), (295, 16, 4, 20, 'base_16'), (296, 16, 20, 36, 'base_16'), (297, 16, 36, 52, 'base_16'), (298, 16, 52, 68, 'base_16'), (299, 16, 68, 86, 'base_16'), (300, 16, 86, 109, 'base_16'), (301, 16, 109, 184, 'base_16'), (302, 16, 184, NULL, 'base_16'), (303, 16, NULL, -3, 'offset_16'), (304, 16, -3, 13, 'offset_16'), (305, 16, 13, 29, 'offset_16'), (306, 16, 29, 45, 'offset_16'), (307, 16, 45, 61, 'offset_16'), (308, 16, 61, 77, 'offset_16'), (309, 16, 77, 97, 'offset_16'), (310, 16, 97, 129, 'offset_16'), (311, 16, 129, NULL, 'offset_16'), (312, 32, NULL, 20, 'base_32'), (313, 32, 20, 52, 'base_32'), (314, 32, 52, 86, 'base_32'), (315, 32, 86, 184, 'base_32'), (316, 32, 184, NULL, 'base_32'), (317, 32, NULL, 5, 'offset_32'), (318, 32, 5, 37, 'offset_32'), (319, 32, 37, 69, 'offset_32'), (320, 32, 69, 110, 'offset_32'), (321, 32, 110, NULL, 'offset_32'), (322, 64, NULL, 52, 'base_64'), (323, 64, 52, 184, 'base_64'), (324, 64, 184, NULL, 'base_64'), (325, 64, NULL, 21, 'offset_64'), (326, 64, 21, 87, 'offset_64'), (327, 64, 87, NULL, 'offset_64'), (328, 128, NULL, 184, 'base_128'), (329, 128, 184, NULL, 'base_128'), (330, 128, NULL, 53, 'offset_128'), (331, 128, 53, NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS POSTS_COMMENTCOUNT_histogram;
CREATE TABLE POSTS_COMMENTCOUNT_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO POSTS_COMMENTCOUNT_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 0, 'base_1'), (1, 1, 0, 1, 'base_1'), (2, 1, 1, 1, 'base_1'), (3, 1, 1, 2, 'base_1'), (4, 1, 2, 3, 'base_1'), (5, 1, 3, 3, 'base_1'), (6, 1, 3, 4, 'base_1'), (7, 1, 4, 4, 'base_1'), (8, 1, 4, 5, 'base_1'), (9, 1, 5, 6, 'base_1'), (10, 1, 6, 6, 'base_1'), (11, 1, 6, 7, 'base_1'), (12, 1, 7, 7, 'base_1'), (13, 1, 7, 8, 'base_1'), (14, 1, 8, 9, 'base_1'), (15, 1, 9, 9, 'base_1'), (16, 1, 9, 10, 'base_1'), (17, 1, 10, 10, 'base_1'), (18, 1, 10, 11, 'base_1'), (19, 1, 11, 12, 'base_1'), (20, 1, 12, 12, 'base_1'), (21, 1, 12, 13, 'base_1'), (22, 1, 13, 13, 'base_1'), (23, 1, 13, 14, 'base_1'), (24, 1, 14, 15, 'base_1'), (25, 1, 15, 15, 'base_1'), (26, 1, 15, 16, 'base_1'), (27, 1, 16, 16, 'base_1'), (28, 1, 16, 17, 'base_1'), (29, 1, 17, 18, 'base_1'), (30, 1, 18, 18, 'base_1'), (31, 1, 18, 19, 'base_1'), (32, 1, 19, 19, 'base_1'), (33, 1, 19, 20, 'base_1'), (34, 1, 20, 21, 'base_1'), (35, 1, 21, 21, 'base_1'), (36, 1, 21, 22, 'base_1'), (37, 1, 22, 22, 'base_1'), (38, 1, 22, 23, 'base_1'), (39, 1, 23, 24, 'base_1'), (40, 1, 24, 24, 'base_1'), (41, 1, 24, 25, 'base_1'), (42, 1, 25, 25, 'base_1'), (43, 1, 25, 26, 'base_1'), (44, 1, 26, 27, 'base_1'), (45, 1, 27, 27, 'base_1'), (46, 1, 27, 28, 'base_1'), (47, 1, 28, 28, 'base_1'), (48, 1, 28, 29, 'base_1'), (49, 1, 29, 30, 'base_1'), (50, 1, 30, 30, 'base_1'), (51, 1, 30, 31, 'base_1'), (52, 1, 31, 31, 'base_1'), (53, 1, 31, 32, 'base_1'), (54, 1, 32, 33, 'base_1'), (55, 1, 33, 33, 'base_1'), (56, 1, 33, 34, 'base_1'), (57, 1, 34, 34, 'base_1'), (58, 1, 34, 35, 'base_1'), (59, 1, 35, 37, 'base_1'), (60, 1, 37, 37, 'base_1'), (61, 1, 37, 41, 'base_1'), (62, 1, 41, 41, 'base_1'), (63, 1, 41, NULL, 'base_1'), (64, 2, NULL, 1, 'base_2'), (65, 2, 1, 2, 'base_2'), (66, 2, 2, 3, 'base_2'), (67, 2, 3, 4, 'base_2'), (68, 2, 4, 6, 'base_2'), (69, 2, 6, 7, 'base_2'), (70, 2, 7, 8, 'base_2'), (71, 2, 8, 9, 'base_2'), (72, 2, 9, 10, 'base_2'), (73, 2, 10, 12, 'base_2'), (74, 2, 12, 13, 'base_2'), (75, 2, 13, 14, 'base_2'), (76, 2, 14, 15, 'base_2'), (77, 2, 15, 16, 'base_2'), (78, 2, 16, 18, 'base_2'), (79, 2, 18, 19, 'base_2'), (80, 2, 19, 20, 'base_2'), (81, 2, 20, 21, 'base_2'), (82, 2, 21, 22, 'base_2'), (83, 2, 22, 24, 'base_2'), (84, 2, 24, 25, 'base_2'), (85, 2, 25, 26, 'base_2'), (86, 2, 26, 27, 'base_2'), (87, 2, 27, 28, 'base_2'), (88, 2, 28, 30, 'base_2'), (89, 2, 30, 31, 'base_2'), (90, 2, 31, 32, 'base_2'), (91, 2, 32, 33, 'base_2'), (92, 2, 33, 34, 'base_2'), (93, 2, 34, 37, 'base_2'), (94, 2, 37, 41, 'base_2'), (95, 2, 41, NULL, 'base_2'), (96, 4, NULL, 2, 'base_4'), (97, 4, 2, 4, 'base_4'), (98, 4, 4, 7, 'base_4'), (99, 4, 7, 9, 'base_4'), (100, 4, 9, 12, 'base_4'), (101, 4, 12, 14, 'base_4'), (102, 4, 14, 16, 'base_4'), (103, 4, 16, 19, 'base_4'), (104, 4, 19, 21, 'base_4'), (105, 4, 21, 24, 'base_4'), (106, 4, 24, 26, 'base_4'), (107, 4, 26, 28, 'base_4'), (108, 4, 28, 31, 'base_4'), (109, 4, 31, 33, 'base_4'), (110, 4, 33, 37, 'base_4'), (111, 4, 37, NULL, 'base_4'), (112, 4, NULL, 1, 'offset_4'), (113, 4, 1, 4, 'offset_4'), (114, 4, 4, 6, 'offset_4'), (115, 4, 6, 9, 'offset_4'), (116, 4, 9, 11, 'offset_4'), (117, 4, 11, 13, 'offset_4'), (118, 4, 13, 16, 'offset_4'), (119, 4, 16, 18, 'offset_4'), (120, 4, 18, 21, 'offset_4'), (121, 4, 21, 23, 'offset_4'), (122, 4, 23, 25, 'offset_4'), (123, 4, 25, 28, 'offset_4'), (124, 4, 28, 30, 'offset_4'), (125, 4, 30, 33, 'offset_4'), (126, 4, 33, 35, 'offset_4'), (127, 4, 35, 41, 'offset_4'), (128, 4, 41, NULL, 'offset_4'), (129, 8, NULL, 4, 'base_8'), (130, 8, 4, 9, 'base_8'), (131, 8, 9, 14, 'base_8'), (132, 8, 14, 19, 'base_8'), (133, 8, 19, 24, 'base_8'), (134, 8, 24, 28, 'base_8'), (135, 8, 28, 33, 'base_8'), (136, 8, 33, NULL, 'base_8'), (137, 8, NULL, 3, 'offset_8'), (138, 8, 3, 7, 'offset_8'), (139, 8, 7, 12, 'offset_8'), (140, 8, 12, 17, 'offset_8'), (141, 8, 17, 22, 'offset_8'), (142, 8, 22, 27, 'offset_8'), (143, 8, 27, 31, 'offset_8'), (144, 8, 31, 37, 'offset_8'), (145, 8, 37, NULL, 'offset_8'), (146, 16, NULL, 9, 'base_16'), (147, 16, 9, 19, 'base_16'), (148, 16, 19, 28, 'base_16'), (149, 16, 28, NULL, 'base_16'), (150, 16, NULL, 5, 'offset_16'), (151, 16, 5, 15, 'offset_16'), (152, 16, 15, 24, 'offset_16'), (153, 16, 24, 34, 'offset_16'), (154, 16, 34, NULL, 'offset_16'), (155, 32, NULL, 19, 'base_32'), (156, 32, 19, NULL, 'base_32'), (157, 32, NULL, 10, 'offset_32'), (158, 32, 10, 29, 'offset_32'), (159, 32, 29, NULL, 'offset_32'), (160, 64, NULL, NULL, 'base_64'), (161, 64, NULL, 19, 'offset_64'), (162, 64, 19, NULL, 'offset_64'), (163, 128, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS POSTLINKS_LINKTYPEID_mcv;

-- Create MCV table for POSTLINKS.LINKTYPEID, with a unique mcv_id
CREATE TABLE POSTLINKS_LINKTYPEID_mcv AS
WITH base AS (
    SELECT LINKTYPEID, COUNT(*) AS freq
    FROM POSTLINKS
    WHERE LINKTYPEID IS NOT NULL
    GROUP BY LINKTYPEID
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    LINKTYPEID,
    freq
FROM base;

DROP TABLE IF EXISTS POSTLINKS_CREATIONDATE_histogram;
CREATE TABLE POSTLINKS_CREATIONDATE_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound DATETIME,
    upper_bound DATETIME,
    bucket_type TEXT
);


INSERT INTO POSTLINKS_CREATIONDATE_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, to_timestamp(1285070509), 'base_1'), (1, 1, to_timestamp(1285070509), to_timestamp(1287763710), 'base_1'), (2, 1, to_timestamp(1287763710), to_timestamp(1294322953), 'base_1'), (3, 1, to_timestamp(1294322953), to_timestamp(1298239961), 'base_1'), (4, 1, to_timestamp(1298239961), to_timestamp(1301065047), 'base_1'), (5, 1, to_timestamp(1301065047), to_timestamp(1303929442), 'base_1'), (6, 1, to_timestamp(1303929442), to_timestamp(1306876006), 'base_1'), (7, 1, to_timestamp(1306876006), to_timestamp(1309775439), 'base_1'), (8, 1, to_timestamp(1309775439), to_timestamp(1311956790), 'base_1'), (9, 1, to_timestamp(1311956790), to_timestamp(1314494666), 'base_1'), (10, 1, to_timestamp(1314494666), to_timestamp(1316625824), 'base_1'), (11, 1, to_timestamp(1316625824), to_timestamp(1318685420), 'base_1'), (12, 1, to_timestamp(1318685420), to_timestamp(1320911888), 'base_1'), (13, 1, to_timestamp(1320911888), to_timestamp(1322755273), 'base_1'), (14, 1, to_timestamp(1322755273), to_timestamp(1324489662), 'base_1'), (15, 1, to_timestamp(1324489662), to_timestamp(1326895025), 'base_1'), (16, 1, to_timestamp(1326895025), to_timestamp(1328711686), 'base_1'), (17, 1, to_timestamp(1328711686), to_timestamp(1330004833), 'base_1'), (18, 1, to_timestamp(1330004833), to_timestamp(1331487052), 'base_1'), (19, 1, to_timestamp(1331487052), to_timestamp(1332805083), 'base_1'), (20, 1, to_timestamp(1332805083), to_timestamp(1334167214), 'base_1'), (21, 1, to_timestamp(1334167214), to_timestamp(1335567491), 'base_1'), (22, 1, to_timestamp(1335567491), to_timestamp(1336741269), 'base_1'), (23, 1, to_timestamp(1336741269), to_timestamp(1338110248), 'base_1'), (24, 1, to_timestamp(1338110248), to_timestamp(1339098785), 'base_1'), (25, 1, to_timestamp(1339098785), to_timestamp(1340052428), 'base_1'), (26, 1, to_timestamp(1340052428), to_timestamp(1341511040), 'base_1'), (27, 1, to_timestamp(1341511040), to_timestamp(1342418054), 'base_1'), (28, 1, to_timestamp(1342418054), to_timestamp(1343246850), 'base_1'), (29, 1, to_timestamp(1343246850), to_timestamp(1344140869), 'base_1'), (30, 1, to_timestamp(1344140869), to_timestamp(1345471079), 'base_1'), (31, 1, to_timestamp(1345471079), to_timestamp(1346189388), 'base_1'), (32, 1, to_timestamp(1346189388), to_timestamp(1347393403), 'base_1'), (33, 1, to_timestamp(1347393403), to_timestamp(1348486536), 'base_1'), (34, 1, to_timestamp(1348486536), to_timestamp(1349637299), 'base_1'), (35, 1, to_timestamp(1349637299), to_timestamp(1350418793), 'base_1'), (36, 1, to_timestamp(1350418793), to_timestamp(1351094240), 'base_1'), (37, 1, to_timestamp(1351094240), to_timestamp(1352211808), 'base_1'), (38, 1, to_timestamp(1352211808), to_timestamp(1353167534), 'base_1'), (39, 1, to_timestamp(1353167534), to_timestamp(1354281452), 'base_1'), (40, 1, to_timestamp(1354281452), to_timestamp(1355969855), 'base_1'), (41, 1, to_timestamp(1355969855), to_timestamp(1357737494), 'base_1'), (42, 1, to_timestamp(1357737494), to_timestamp(1358890189), 'base_1'), (43, 1, to_timestamp(1358890189), to_timestamp(1359845235), 'base_1'), (44, 1, to_timestamp(1359845235), to_timestamp(1361156597), 'base_1'), (45, 1, to_timestamp(1361156597), to_timestamp(1361156597), 'base_1'), (46, 1, to_timestamp(1361156597), to_timestamp(1361156597), 'base_1'), (47, 1, to_timestamp(1361156597), to_timestamp(1361485594), 'base_1'), (48, 1, to_timestamp(1361485594), to_timestamp(1362594103), 'base_1'), (49, 1, to_timestamp(1362594103), to_timestamp(1363615898), 'base_1'), (50, 1, to_timestamp(1363615898), to_timestamp(1364717292), 'base_1'), (51, 1, to_timestamp(1364717292), to_timestamp(1365537061), 'base_1'), (52, 1, to_timestamp(1365537061), to_timestamp(1366373240), 'base_1'), (53, 1, to_timestamp(1366373240), to_timestamp(1367506931), 'base_1'), (54, 1, to_timestamp(1367506931), to_timestamp(1368518986), 'base_1'), (55, 1, to_timestamp(1368518986), to_timestamp(1369273611), 'base_1'), (56, 1, to_timestamp(1369273611), to_timestamp(1369939050), 'base_1'), (57, 1, to_timestamp(1369939050), to_timestamp(1370706703), 'base_1'), (58, 1, to_timestamp(1370706703), to_timestamp(1371460240), 'base_1'), (59, 1, to_timestamp(1371460240), to_timestamp(1372171977), 'base_1'), (60, 1, to_timestamp(1372171977), to_timestamp(1372745571), 'base_1'), (61, 1, to_timestamp(1372745571), to_timestamp(1373371266), 'base_1'), (62, 1, to_timestamp(1373371266), to_timestamp(1373900734), 'base_1'), (63, 1, to_timestamp(1373900734), to_timestamp(1374377728), 'base_1'), (64, 1, to_timestamp(1374377728), to_timestamp(1374996744), 'base_1'), (65, 1, to_timestamp(1374996744), to_timestamp(1375649699), 'base_1'), (66, 1, to_timestamp(1375649699), to_timestamp(1376512051), 'base_1'), (67, 1, to_timestamp(1376512051), to_timestamp(1377457981), 'base_1'), (68, 1, to_timestamp(1377457981), to_timestamp(1378236926), 'base_1'), (69, 1, to_timestamp(1378236926), to_timestamp(1379042854), 'base_1'), (70, 1, to_timestamp(1379042854), to_timestamp(1379707586), 'base_1'), (71, 1, to_timestamp(1379707586), to_timestamp(1380380431), 'base_1'), (72, 1, to_timestamp(1380380431), to_timestamp(1381176167), 'base_1'), (73, 1, to_timestamp(1381176167), to_timestamp(1381851804), 'base_1'), (74, 1, to_timestamp(1381851804), to_timestamp(1382529888), 'base_1'), (75, 1, to_timestamp(1382529888), to_timestamp(1383314463), 'base_1'), (76, 1, to_timestamp(1383314463), to_timestamp(1384059765), 'base_1'), (77, 1, to_timestamp(1384059765), to_timestamp(1384848747), 'base_1'), (78, 1, to_timestamp(1384848747), to_timestamp(1385457993), 'base_1'), (79, 1, to_timestamp(1385457993), to_timestamp(1386150646), 'base_1'), (80, 1, to_timestamp(1386150646), to_timestamp(1386645388), 'base_1'), (81, 1, to_timestamp(1386645388), to_timestamp(1387224983), 'base_1'), (82, 1, to_timestamp(1387224983), to_timestamp(1388103710), 'base_1'), (83, 1, to_timestamp(1388103710), to_timestamp(1388952312), 'base_1'), (84, 1, to_timestamp(1388952312), to_timestamp(1389450874), 'base_1'), (85, 1, to_timestamp(1389450874), to_timestamp(1390002542), 'base_1'), (86, 1, to_timestamp(1390002542), to_timestamp(1390432360), 'base_1'), (87, 1, to_timestamp(1390432360), to_timestamp(1390881426), 'base_1'), (88, 1, to_timestamp(1390881426), to_timestamp(1391187422), 'base_1'), (89, 1, to_timestamp(1391187422), to_timestamp(1391695170), 'base_1'), (90, 1, to_timestamp(1391695170), to_timestamp(1392175002), 'base_1'), (91, 1, to_timestamp(1392175002), to_timestamp(1392713348), 'base_1'), (92, 1, to_timestamp(1392713348), to_timestamp(1393112671), 'base_1'), (93, 1, to_timestamp(1393112671), to_timestamp(1393448239), 'base_1'), (94, 1, to_timestamp(1393448239), to_timestamp(1393783288), 'base_1'), (95, 1, to_timestamp(1393783288), to_timestamp(1394121499), 'base_1'), (96, 1, to_timestamp(1394121499), to_timestamp(1394644968), 'base_1'), (97, 1, to_timestamp(1394644968), to_timestamp(1395135203), 'base_1'), (98, 1, to_timestamp(1395135203), to_timestamp(1395703275), 'base_1'), (99, 1, to_timestamp(1395703275), to_timestamp(1396089765), 'base_1'), (100, 1, to_timestamp(1396089765), to_timestamp(1396627451), 'base_1'), (101, 1, to_timestamp(1396627451), to_timestamp(1397154301), 'base_1'), (102, 1, to_timestamp(1397154301), to_timestamp(1397688063), 'base_1'), (103, 1, to_timestamp(1397688063), to_timestamp(1398133587), 'base_1'), (104, 1, to_timestamp(1398133587), to_timestamp(1398534491), 'base_1'), (105, 1, to_timestamp(1398534491), to_timestamp(1398983254), 'base_1'), (106, 1, to_timestamp(1398983254), to_timestamp(1399434493), 'base_1'), (107, 1, to_timestamp(1399434493), to_timestamp(1399901607), 'base_1'), (108, 1, to_timestamp(1399901607), to_timestamp(1400317228), 'base_1'), (109, 1, to_timestamp(1400317228), to_timestamp(1400755032), 'base_1'), (110, 1, to_timestamp(1400755032), to_timestamp(1401315457), 'base_1'), (111, 1, to_timestamp(1401315457), to_timestamp(1401904968), 'base_1'), (112, 1, to_timestamp(1401904968), to_timestamp(1402430515), 'base_1'), (113, 1, to_timestamp(1402430515), to_timestamp(1402751596), 'base_1'), (114, 1, to_timestamp(1402751596), to_timestamp(1403267223), 'base_1'), (115, 1, to_timestamp(1403267223), to_timestamp(1403670142), 'base_1'), (116, 1, to_timestamp(1403670142), to_timestamp(1404158512), 'base_1'), (117, 1, to_timestamp(1404158512), to_timestamp(1404558502), 'base_1'), (118, 1, to_timestamp(1404558502), to_timestamp(1405075150), 'base_1'), (119, 1, to_timestamp(1405075150), to_timestamp(1405604168), 'base_1'), (120, 1, to_timestamp(1405604168), to_timestamp(1406142988), 'base_1'), (121, 1, to_timestamp(1406142988), to_timestamp(1406675490), 'base_1'), (122, 1, to_timestamp(1406675490), to_timestamp(1407246121), 'base_1'), (123, 1, to_timestamp(1407246121), to_timestamp(1407807677), 'base_1'), (124, 1, to_timestamp(1407807677), to_timestamp(1408384004), 'base_1'), (125, 1, to_timestamp(1408384004), to_timestamp(1408737865), 'base_1'), (126, 1, to_timestamp(1408737865), to_timestamp(1409324577), 'base_1'), (127, 1, to_timestamp(1409324577), to_timestamp(1410026868), 'base_1'), (128, 1, to_timestamp(1410026868), NULL, 'base_1'), (129, 2, NULL, to_timestamp(1287763710), 'base_2'), (130, 2, to_timestamp(1287763710), to_timestamp(1298239961), 'base_2'), (131, 2, to_timestamp(1298239961), to_timestamp(1303929442), 'base_2'), (132, 2, to_timestamp(1303929442), to_timestamp(1309775439), 'base_2'), (133, 2, to_timestamp(1309775439), to_timestamp(1314494666), 'base_2'), (134, 2, to_timestamp(1314494666), to_timestamp(1318685420), 'base_2'), (135, 2, to_timestamp(1318685420), to_timestamp(1322755273), 'base_2'), (136, 2, to_timestamp(1322755273), to_timestamp(1326895025), 'base_2'), (137, 2, to_timestamp(1326895025), to_timestamp(1330004833), 'base_2'), (138, 2, to_timestamp(1330004833), to_timestamp(1332805083), 'base_2'), (139, 2, to_timestamp(1332805083), to_timestamp(1335567491), 'base_2'), (140, 2, to_timestamp(1335567491), to_timestamp(1338110248), 'base_2'), (141, 2, to_timestamp(1338110248), to_timestamp(1340052428), 'base_2'), (142, 2, to_timestamp(1340052428), to_timestamp(1342418054), 'base_2'), (143, 2, to_timestamp(1342418054), to_timestamp(1344140869), 'base_2'), (144, 2, to_timestamp(1344140869), to_timestamp(1346189388), 'base_2'), (145, 2, to_timestamp(1346189388), to_timestamp(1348486536), 'base_2'), (146, 2, to_timestamp(1348486536), to_timestamp(1350418793), 'base_2'), (147, 2, to_timestamp(1350418793), to_timestamp(1352211808), 'base_2'), (148, 2, to_timestamp(1352211808), to_timestamp(1354281452), 'base_2'), (149, 2, to_timestamp(1354281452), to_timestamp(1357737494), 'base_2'), (150, 2, to_timestamp(1357737494), to_timestamp(1359845235), 'base_2'), (151, 2, to_timestamp(1359845235), to_timestamp(1361156597), 'base_2'), (152, 2, to_timestamp(1361156597), to_timestamp(1361485594), 'base_2'), (153, 2, to_timestamp(1361485594), to_timestamp(1363615898), 'base_2'), (154, 2, to_timestamp(1363615898), to_timestamp(1365537061), 'base_2'), (155, 2, to_timestamp(1365537061), to_timestamp(1367506931), 'base_2'), (156, 2, to_timestamp(1367506931), to_timestamp(1369273611), 'base_2'), (157, 2, to_timestamp(1369273611), to_timestamp(1370706703), 'base_2'), (158, 2, to_timestamp(1370706703), to_timestamp(1372171977), 'base_2'), (159, 2, to_timestamp(1372171977), to_timestamp(1373371266), 'base_2'), (160, 2, to_timestamp(1373371266), to_timestamp(1374377728), 'base_2'), (161, 2, to_timestamp(1374377728), to_timestamp(1375649699), 'base_2'), (162, 2, to_timestamp(1375649699), to_timestamp(1377457981), 'base_2'), (163, 2, to_timestamp(1377457981), to_timestamp(1379042854), 'base_2'), (164, 2, to_timestamp(1379042854), to_timestamp(1380380431), 'base_2'), (165, 2, to_timestamp(1380380431), to_timestamp(1381851804), 'base_2'), (166, 2, to_timestamp(1381851804), to_timestamp(1383314463), 'base_2'), (167, 2, to_timestamp(1383314463), to_timestamp(1384848747), 'base_2'), (168, 2, to_timestamp(1384848747), to_timestamp(1386150646), 'base_2'), (169, 2, to_timestamp(1386150646), to_timestamp(1387224983), 'base_2'), (170, 2, to_timestamp(1387224983), to_timestamp(1388952312), 'base_2'), (171, 2, to_timestamp(1388952312), to_timestamp(1390002542), 'base_2'), (172, 2, to_timestamp(1390002542), to_timestamp(1390881426), 'base_2'), (173, 2, to_timestamp(1390881426), to_timestamp(1391695170), 'base_2'), (174, 2, to_timestamp(1391695170), to_timestamp(1392713348), 'base_2'), (175, 2, to_timestamp(1392713348), to_timestamp(1393448239), 'base_2'), (176, 2, to_timestamp(1393448239), to_timestamp(1394121499), 'base_2'), (177, 2, to_timestamp(1394121499), to_timestamp(1395135203), 'base_2'), (178, 2, to_timestamp(1395135203), to_timestamp(1396089765), 'base_2'), (179, 2, to_timestamp(1396089765), to_timestamp(1397154301), 'base_2'), (180, 2, to_timestamp(1397154301), to_timestamp(1398133587), 'base_2'), (181, 2, to_timestamp(1398133587), to_timestamp(1398983254), 'base_2'), (182, 2, to_timestamp(1398983254), to_timestamp(1399901607), 'base_2'), (183, 2, to_timestamp(1399901607), to_timestamp(1400755032), 'base_2'), (184, 2, to_timestamp(1400755032), to_timestamp(1401904968), 'base_2'), (185, 2, to_timestamp(1401904968), to_timestamp(1402751596), 'base_2'), (186, 2, to_timestamp(1402751596), to_timestamp(1403670142), 'base_2'), (187, 2, to_timestamp(1403670142), to_timestamp(1404558502), 'base_2'), (188, 2, to_timestamp(1404558502), to_timestamp(1405604168), 'base_2'), (189, 2, to_timestamp(1405604168), to_timestamp(1406675490), 'base_2'), (190, 2, to_timestamp(1406675490), to_timestamp(1407807677), 'base_2'), (191, 2, to_timestamp(1407807677), to_timestamp(1408737865), 'base_2'), (192, 2, to_timestamp(1408737865), to_timestamp(1410026868), 'base_2'), (193, 2, to_timestamp(1410026868), NULL, 'base_2'), (194, 4, NULL, to_timestamp(1298239961), 'base_4'), (195, 4, to_timestamp(1298239961), to_timestamp(1309775439), 'base_4'), (196, 4, to_timestamp(1309775439), to_timestamp(1318685420), 'base_4'), (197, 4, to_timestamp(1318685420), to_timestamp(1326895025), 'base_4'), (198, 4, to_timestamp(1326895025), to_timestamp(1332805083), 'base_4'), (199, 4, to_timestamp(1332805083), to_timestamp(1338110248), 'base_4'), (200, 4, to_timestamp(1338110248), to_timestamp(1342418054), 'base_4'), (201, 4, to_timestamp(1342418054), to_timestamp(1346189388), 'base_4'), (202, 4, to_timestamp(1346189388), to_timestamp(1350418793), 'base_4'), (203, 4, to_timestamp(1350418793), to_timestamp(1354281452), 'base_4'), (204, 4, to_timestamp(1354281452), to_timestamp(1359845235), 'base_4'), (205, 4, to_timestamp(1359845235), to_timestamp(1361485594), 'base_4'), (206, 4, to_timestamp(1361485594), to_timestamp(1365537061), 'base_4'), (207, 4, to_timestamp(1365537061), to_timestamp(1369273611), 'base_4'), (208, 4, to_timestamp(1369273611), to_timestamp(1372171977), 'base_4'), (209, 4, to_timestamp(1372171977), to_timestamp(1374377728), 'base_4'), (210, 4, to_timestamp(1374377728), to_timestamp(1377457981), 'base_4'), (211, 4, to_timestamp(1377457981), to_timestamp(1380380431), 'base_4'), (212, 4, to_timestamp(1380380431), to_timestamp(1383314463), 'base_4'), (213, 4, to_timestamp(1383314463), to_timestamp(1386150646), 'base_4'), (214, 4, to_timestamp(1386150646), to_timestamp(1388952312), 'base_4'), (215, 4, to_timestamp(1388952312), to_timestamp(1390881426), 'base_4'), (216, 4, to_timestamp(1390881426), to_timestamp(1392713348), 'base_4'), (217, 4, to_timestamp(1392713348), to_timestamp(1394121499), 'base_4'), (218, 4, to_timestamp(1394121499), to_timestamp(1396089765), 'base_4'), (219, 4, to_timestamp(1396089765), to_timestamp(1398133587), 'base_4'), (220, 4, to_timestamp(1398133587), to_timestamp(1399901607), 'base_4'), (221, 4, to_timestamp(1399901607), to_timestamp(1401904968), 'base_4'), (222, 4, to_timestamp(1401904968), to_timestamp(1403670142), 'base_4'), (223, 4, to_timestamp(1403670142), to_timestamp(1405604168), 'base_4'), (224, 4, to_timestamp(1405604168), to_timestamp(1407807677), 'base_4'), (225, 4, to_timestamp(1407807677), to_timestamp(1410026868), 'base_4'), (226, 4, to_timestamp(1410026868), NULL, 'base_4'), (227, 4, NULL, to_timestamp(1294322953), 'offset_4'), (228, 4, to_timestamp(1294322953), to_timestamp(1306876006), 'offset_4'), (229, 4, to_timestamp(1306876006), to_timestamp(1316625824), 'offset_4'), (230, 4, to_timestamp(1316625824), to_timestamp(1324489662), 'offset_4'), (231, 4, to_timestamp(1324489662), to_timestamp(1331487052), 'offset_4'), (232, 4, to_timestamp(1331487052), to_timestamp(1336741269), 'offset_4'), (233, 4, to_timestamp(1336741269), to_timestamp(1341511040), 'offset_4'), (234, 4, to_timestamp(1341511040), to_timestamp(1345471079), 'offset_4'), (235, 4, to_timestamp(1345471079), to_timestamp(1349637299), 'offset_4'), (236, 4, to_timestamp(1349637299), to_timestamp(1353167534), 'offset_4'), (237, 4, to_timestamp(1353167534), to_timestamp(1358890189), 'offset_4'), (238, 4, to_timestamp(1358890189), to_timestamp(1361156597), 'offset_4'), (239, 4, to_timestamp(1361156597), to_timestamp(1364717292), 'offset_4'), (240, 4, to_timestamp(1364717292), to_timestamp(1368518986), 'offset_4'), (241, 4, to_timestamp(1368518986), to_timestamp(1371460240), 'offset_4'), (242, 4, to_timestamp(1371460240), to_timestamp(1373900734), 'offset_4'), (243, 4, to_timestamp(1373900734), to_timestamp(1376512051), 'offset_4'), (244, 4, to_timestamp(1376512051), to_timestamp(1379707586), 'offset_4'), (245, 4, to_timestamp(1379707586), to_timestamp(1382529888), 'offset_4'), (246, 4, to_timestamp(1382529888), to_timestamp(1385457993), 'offset_4'), (247, 4, to_timestamp(1385457993), to_timestamp(1388103710), 'offset_4'), (248, 4, to_timestamp(1388103710), to_timestamp(1390432360), 'offset_4'), (249, 4, to_timestamp(1390432360), to_timestamp(1392175002), 'offset_4'), (250, 4, to_timestamp(1392175002), to_timestamp(1393783288), 'offset_4'), (251, 4, to_timestamp(1393783288), to_timestamp(1395703275), 'offset_4'), (252, 4, to_timestamp(1395703275), to_timestamp(1397688063), 'offset_4'), (253, 4, to_timestamp(1397688063), to_timestamp(1399434493), 'offset_4'), (254, 4, to_timestamp(1399434493), to_timestamp(1401315457), 'offset_4'), (255, 4, to_timestamp(1401315457), to_timestamp(1403267223), 'offset_4'), (256, 4, to_timestamp(1403267223), to_timestamp(1405075150), 'offset_4'), (257, 4, to_timestamp(1405075150), to_timestamp(1407246121), 'offset_4'), (258, 4, to_timestamp(1407246121), to_timestamp(1409324577), 'offset_4'), (259, 4, to_timestamp(1409324577), NULL, 'offset_4'), (260, 8, NULL, to_timestamp(1309775439), 'base_8'), (261, 8, to_timestamp(1309775439), to_timestamp(1326895025), 'base_8'), (262, 8, to_timestamp(1326895025), to_timestamp(1338110248), 'base_8'), (263, 8, to_timestamp(1338110248), to_timestamp(1346189388), 'base_8'), (264, 8, to_timestamp(1346189388), to_timestamp(1354281452), 'base_8'), (265, 8, to_timestamp(1354281452), to_timestamp(1361485594), 'base_8'), (266, 8, to_timestamp(1361485594), to_timestamp(1369273611), 'base_8'), (267, 8, to_timestamp(1369273611), to_timestamp(1374377728), 'base_8'), (268, 8, to_timestamp(1374377728), to_timestamp(1380380431), 'base_8'), (269, 8, to_timestamp(1380380431), to_timestamp(1386150646), 'base_8'), (270, 8, to_timestamp(1386150646), to_timestamp(1390881426), 'base_8'), (271, 8, to_timestamp(1390881426), to_timestamp(1394121499), 'base_8'), (272, 8, to_timestamp(1394121499), to_timestamp(1398133587), 'base_8'), (273, 8, to_timestamp(1398133587), to_timestamp(1401904968), 'base_8'), (274, 8, to_timestamp(1401904968), to_timestamp(1405604168), 'base_8'), (275, 8, to_timestamp(1405604168), to_timestamp(1410026868), 'base_8'), (276, 8, to_timestamp(1410026868), NULL, 'base_8'), (277, 8, NULL, to_timestamp(1301065047), 'offset_8'), (278, 8, to_timestamp(1301065047), to_timestamp(1320911888), 'offset_8'), (279, 8, to_timestamp(1320911888), to_timestamp(1334167214), 'offset_8'), (280, 8, to_timestamp(1334167214), to_timestamp(1343246850), 'offset_8'), (281, 8, to_timestamp(1343246850), to_timestamp(1351094240), 'offset_8'), (282, 8, to_timestamp(1351094240), to_timestamp(1361156597), 'offset_8'), (283, 8, to_timestamp(1361156597), to_timestamp(1366373240), 'offset_8'), (284, 8, to_timestamp(1366373240), to_timestamp(1372745571), 'offset_8'), (285, 8, to_timestamp(1372745571), to_timestamp(1378236926), 'offset_8'), (286, 8, to_timestamp(1378236926), to_timestamp(1384059765), 'offset_8'), (287, 8, to_timestamp(1384059765), to_timestamp(1389450874), 'offset_8'), (288, 8, to_timestamp(1389450874), to_timestamp(1393112671), 'offset_8'), (289, 8, to_timestamp(1393112671), to_timestamp(1396627451), 'offset_8'), (290, 8, to_timestamp(1396627451), to_timestamp(1400317228), 'offset_8'), (291, 8, to_timestamp(1400317228), to_timestamp(1404158512), 'offset_8'), (292, 8, to_timestamp(1404158512), to_timestamp(1408384004), 'offset_8'), (293, 8, to_timestamp(1408384004), NULL, 'offset_8'), (294, 16, NULL, to_timestamp(1326895025), 'base_16'), (295, 16, to_timestamp(1326895025), to_timestamp(1346189388), 'base_16'), (296, 16, to_timestamp(1346189388), to_timestamp(1361485594), 'base_16'), (297, 16, to_timestamp(1361485594), to_timestamp(1374377728), 'base_16'), (298, 16, to_timestamp(1374377728), to_timestamp(1386150646), 'base_16'), (299, 16, to_timestamp(1386150646), to_timestamp(1394121499), 'base_16'), (300, 16, to_timestamp(1394121499), to_timestamp(1401904968), 'base_16'), (301, 16, to_timestamp(1401904968), to_timestamp(1410026868), 'base_16'), (302, 16, to_timestamp(1410026868), NULL, 'base_16'), (303, 16, NULL, to_timestamp(1311956790), 'offset_16'), (304, 16, to_timestamp(1311956790), to_timestamp(1339098785), 'offset_16'), (305, 16, to_timestamp(1339098785), to_timestamp(1355969855), 'offset_16'), (306, 16, to_timestamp(1355969855), to_timestamp(1369939050), 'offset_16'), (307, 16, to_timestamp(1369939050), to_timestamp(1381176167), 'offset_16'), (308, 16, to_timestamp(1381176167), to_timestamp(1391187422), 'offset_16'), (309, 16, to_timestamp(1391187422), to_timestamp(1398534491), 'offset_16'), (310, 16, to_timestamp(1398534491), to_timestamp(1406142988), 'offset_16'), (311, 16, to_timestamp(1406142988), NULL, 'offset_16'), (312, 32, NULL, to_timestamp(1346189388), 'base_32'), (313, 32, to_timestamp(1346189388), to_timestamp(1374377728), 'base_32'), (314, 32, to_timestamp(1374377728), to_timestamp(1394121499), 'base_32'), (315, 32, to_timestamp(1394121499), to_timestamp(1410026868), 'base_32'), (316, 32, to_timestamp(1410026868), NULL, 'base_32'), (317, 32, NULL, to_timestamp(1328711686), 'offset_32'), (318, 32, to_timestamp(1328711686), to_timestamp(1362594103), 'offset_32'), (319, 32, to_timestamp(1362594103), to_timestamp(1386645388), 'offset_32'), (320, 32, to_timestamp(1386645388), to_timestamp(1402430515), 'offset_32'), (321, 32, to_timestamp(1402430515), NULL, 'offset_32'), (322, 64, NULL, to_timestamp(1374377728), 'base_64'), (323, 64, to_timestamp(1374377728), to_timestamp(1410026868), 'base_64'), (324, 64, to_timestamp(1410026868), NULL, 'base_64'), (325, 64, NULL, to_timestamp(1347393403), 'offset_64'), (326, 64, to_timestamp(1347393403), to_timestamp(1394644968), 'offset_64'), (327, 64, to_timestamp(1394644968), NULL, 'offset_64'), (328, 128, NULL, to_timestamp(1410026868), 'base_128'), (329, 128, to_timestamp(1410026868), NULL, 'base_128'), (330, 128, NULL, to_timestamp(1374996744), 'offset_128'), (331, 128, to_timestamp(1374996744), NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS POSTHISTORY_POSTHISTORYTYPEID_mcv;

-- Create MCV table for POSTHISTORY.POSTHISTORYTYPEID, with a unique mcv_id
CREATE TABLE POSTHISTORY_POSTHISTORYTYPEID_mcv AS
WITH base AS (
    SELECT POSTHISTORYTYPEID, COUNT(*) AS freq
    FROM POSTHISTORY
    WHERE POSTHISTORYTYPEID IS NOT NULL
    GROUP BY POSTHISTORYTYPEID
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    POSTHISTORYTYPEID,
    freq
FROM base;

DROP TABLE IF EXISTS POSTHISTORY_CREATIONDATE_histogram;
CREATE TABLE POSTHISTORY_CREATIONDATE_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound DATETIME,
    upper_bound DATETIME,
    bucket_type TEXT
);


INSERT INTO POSTHISTORY_CREATIONDATE_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, to_timestamp(1280803772), 'base_1'), (1, 1, to_timestamp(1280803772), to_timestamp(1282989141), 'base_1'), (2, 1, to_timestamp(1282989141), to_timestamp(1285852468), 'base_1'), (3, 1, to_timestamp(1285852468), to_timestamp(1288562509), 'base_1'), (4, 1, to_timestamp(1288562509), to_timestamp(1291154416), 'base_1'), (5, 1, to_timestamp(1291154416), to_timestamp(1294442529), 'base_1'), (6, 1, to_timestamp(1294442529), to_timestamp(1297102852), 'base_1'), (7, 1, to_timestamp(1297102852), to_timestamp(1299075490), 'base_1'), (8, 1, to_timestamp(1299075490), to_timestamp(1300779475), 'base_1'), (9, 1, to_timestamp(1300779475), to_timestamp(1302638214), 'base_1'), (10, 1, to_timestamp(1302638214), to_timestamp(1304413881), 'base_1'), (11, 1, to_timestamp(1304413881), to_timestamp(1306115944), 'base_1'), (12, 1, to_timestamp(1306115944), to_timestamp(1308090439), 'base_1'), (13, 1, to_timestamp(1308090439), to_timestamp(1309973113), 'base_1'), (14, 1, to_timestamp(1309973113), to_timestamp(1311627688), 'base_1'), (15, 1, to_timestamp(1311627688), to_timestamp(1313416673), 'base_1'), (16, 1, to_timestamp(1313416673), to_timestamp(1314963963), 'base_1'), (17, 1, to_timestamp(1314963963), to_timestamp(1316691310), 'base_1'), (18, 1, to_timestamp(1316691310), to_timestamp(1318024053), 'base_1'), (19, 1, to_timestamp(1318024053), to_timestamp(1319543949), 'base_1'), (20, 1, to_timestamp(1319543949), to_timestamp(1321285581), 'base_1'), (21, 1, to_timestamp(1321285581), to_timestamp(1322620189), 'base_1'), (22, 1, to_timestamp(1322620189), to_timestamp(1324285340), 'base_1'), (23, 1, to_timestamp(1324285340), to_timestamp(1326102550), 'base_1'), (24, 1, to_timestamp(1326102550), to_timestamp(1327489395), 'base_1'), (25, 1, to_timestamp(1327489395), to_timestamp(1328801685), 'base_1'), (26, 1, to_timestamp(1328801685), to_timestamp(1329899980), 'base_1'), (27, 1, to_timestamp(1329899980), to_timestamp(1331145557), 'base_1'), (28, 1, to_timestamp(1331145557), to_timestamp(1332444162), 'base_1'), (29, 1, to_timestamp(1332444162), to_timestamp(1333622975), 'base_1'), (30, 1, to_timestamp(1333622975), to_timestamp(1334857589), 'base_1'), (31, 1, to_timestamp(1334857589), to_timestamp(1336080384), 'base_1'), (32, 1, to_timestamp(1336080384), to_timestamp(1337110149), 'base_1'), (33, 1, to_timestamp(1337110149), to_timestamp(1338289321), 'base_1'), (34, 1, to_timestamp(1338289321), to_timestamp(1339389255), 'base_1'), (35, 1, to_timestamp(1339389255), to_timestamp(1340461287), 'base_1'), (36, 1, to_timestamp(1340461287), to_timestamp(1341553734), 'base_1'), (37, 1, to_timestamp(1341553734), to_timestamp(1342600260), 'base_1'), (38, 1, to_timestamp(1342600260), to_timestamp(1343530056), 'base_1'), (39, 1, to_timestamp(1343530056), to_timestamp(1344625108), 'base_1'), (40, 1, to_timestamp(1344625108), to_timestamp(1345601809), 'base_1'), (41, 1, to_timestamp(1345601809), to_timestamp(1346620995), 'base_1'), (42, 1, to_timestamp(1346620995), to_timestamp(1347813821), 'base_1'), (43, 1, to_timestamp(1347813821), to_timestamp(1348864009), 'base_1'), (44, 1, to_timestamp(1348864009), to_timestamp(1349851980), 'base_1'), (45, 1, to_timestamp(1349851980), to_timestamp(1350905498), 'base_1'), (46, 1, to_timestamp(1350905498), to_timestamp(1351875997), 'base_1'), (47, 1, to_timestamp(1351875997), to_timestamp(1352892144), 'base_1'), (48, 1, to_timestamp(1352892144), to_timestamp(1353944347), 'base_1'), (49, 1, to_timestamp(1353944347), to_timestamp(1354817588), 'base_1'), (50, 1, to_timestamp(1354817588), to_timestamp(1355774825), 'base_1'), (51, 1, to_timestamp(1355774825), to_timestamp(1357229704), 'base_1'), (52, 1, to_timestamp(1357229704), to_timestamp(1358251406), 'base_1'), (53, 1, to_timestamp(1358251406), to_timestamp(1359302600), 'base_1'), (54, 1, to_timestamp(1359302600), to_timestamp(1360247938), 'base_1'), (55, 1, to_timestamp(1360247938), to_timestamp(1361345223), 'base_1'), (56, 1, to_timestamp(1361345223), to_timestamp(1362434681), 'base_1'), (57, 1, to_timestamp(1362434681), to_timestamp(1363301330), 'base_1'), (58, 1, to_timestamp(1363301330), to_timestamp(1364156764), 'base_1'), (59, 1, to_timestamp(1364156764), to_timestamp(1365070242), 'base_1'), (60, 1, to_timestamp(1365070242), to_timestamp(1365921610), 'base_1'), (61, 1, to_timestamp(1365921610), to_timestamp(1366789467), 'base_1'), (62, 1, to_timestamp(1366789467), to_timestamp(1367564838), 'base_1'), (63, 1, to_timestamp(1367564838), to_timestamp(1368455143), 'base_1'), (64, 1, to_timestamp(1368455143), to_timestamp(1369173411), 'base_1'), (65, 1, to_timestamp(1369173411), to_timestamp(1369962271), 'base_1'), (66, 1, to_timestamp(1369962271), to_timestamp(1370808439), 'base_1'), (67, 1, to_timestamp(1370808439), to_timestamp(1371569536), 'base_1'), (68, 1, to_timestamp(1371569536), to_timestamp(1372340631), 'base_1'), (69, 1, to_timestamp(1372340631), to_timestamp(1373017771), 'base_1'), (70, 1, to_timestamp(1373017771), to_timestamp(1373648999), 'base_1'), (71, 1, to_timestamp(1373648999), to_timestamp(1374260926), 'base_1'), (72, 1, to_timestamp(1374260926), to_timestamp(1374832519), 'base_1'), (73, 1, to_timestamp(1374832519), to_timestamp(1375506208), 'base_1'), (74, 1, to_timestamp(1375506208), to_timestamp(1376296998), 'base_1'), (75, 1, to_timestamp(1376296998), to_timestamp(1377077045), 'base_1'), (76, 1, to_timestamp(1377077045), to_timestamp(1377791918), 'base_1'), (77, 1, to_timestamp(1377791918), to_timestamp(1378485325), 'base_1'), (78, 1, to_timestamp(1378485325), to_timestamp(1379358855), 'base_1'), (79, 1, to_timestamp(1379358855), to_timestamp(1380045946), 'base_1'), (80, 1, to_timestamp(1380045946), to_timestamp(1380741685), 'base_1'), (81, 1, to_timestamp(1380741685), to_timestamp(1381442043), 'base_1'), (82, 1, to_timestamp(1381442043), to_timestamp(1382237144), 'base_1'), (83, 1, to_timestamp(1382237144), to_timestamp(1383053257), 'base_1'), (84, 1, to_timestamp(1383053257), to_timestamp(1383784944), 'base_1'), (85, 1, to_timestamp(1383784944), to_timestamp(1384447018), 'base_1'), (86, 1, to_timestamp(1384447018), to_timestamp(1385140141), 'base_1'), (87, 1, to_timestamp(1385140141), to_timestamp(1385833568), 'base_1'), (88, 1, to_timestamp(1385833568), to_timestamp(1386509944), 'base_1'), (89, 1, to_timestamp(1386509944), to_timestamp(1387193997), 'base_1'), (90, 1, to_timestamp(1387193997), to_timestamp(1388181088), 'base_1'), (91, 1, to_timestamp(1388181088), to_timestamp(1389095921), 'base_1'), (92, 1, to_timestamp(1389095921), to_timestamp(1389719619), 'base_1'), (93, 1, to_timestamp(1389719619), to_timestamp(1390402198), 'base_1'), (94, 1, to_timestamp(1390402198), to_timestamp(1391045392), 'base_1'), (95, 1, to_timestamp(1391045392), to_timestamp(1391658569), 'base_1'), (96, 1, to_timestamp(1391658569), to_timestamp(1392224005), 'base_1'), (97, 1, to_timestamp(1392224005), to_timestamp(1392806923), 'base_1'), (98, 1, to_timestamp(1392806923), to_timestamp(1393371247), 'base_1'), (99, 1, to_timestamp(1393371247), to_timestamp(1393925930), 'base_1'), (100, 1, to_timestamp(1393925930), to_timestamp(1394469643), 'base_1'), (101, 1, to_timestamp(1394469643), to_timestamp(1395060288), 'base_1'), (102, 1, to_timestamp(1395060288), to_timestamp(1395596081), 'base_1'), (103, 1, to_timestamp(1395596081), to_timestamp(1396161995), 'base_1'), (104, 1, to_timestamp(1396161995), to_timestamp(1396754367), 'base_1'), (105, 1, to_timestamp(1396754367), to_timestamp(1397274430), 'base_1'), (106, 1, to_timestamp(1397274430), to_timestamp(1397904522), 'base_1'), (107, 1, to_timestamp(1397904522), to_timestamp(1398438776), 'base_1'), (108, 1, to_timestamp(1398438776), to_timestamp(1398981954), 'base_1'), (109, 1, to_timestamp(1398981954), to_timestamp(1399536855), 'base_1'), (110, 1, to_timestamp(1399536855), to_timestamp(1400082939), 'base_1'), (111, 1, to_timestamp(1400082939), to_timestamp(1400634115), 'base_1'), (112, 1, to_timestamp(1400634115), to_timestamp(1401257054), 'base_1'), (113, 1, to_timestamp(1401257054), to_timestamp(1401886156), 'base_1'), (114, 1, to_timestamp(1401886156), to_timestamp(1402452035), 'base_1'), (115, 1, to_timestamp(1402452035), to_timestamp(1403036170), 'base_1'), (116, 1, to_timestamp(1403036170), to_timestamp(1403615199), 'base_1'), (117, 1, to_timestamp(1403615199), to_timestamp(1404223165), 'base_1'), (118, 1, to_timestamp(1404223165), to_timestamp(1404836836), 'base_1'), (119, 1, to_timestamp(1404836836), to_timestamp(1405440660), 'base_1'), (120, 1, to_timestamp(1405440660), to_timestamp(1406047728), 'base_1'), (121, 1, to_timestamp(1406047728), to_timestamp(1406580593), 'base_1'), (122, 1, to_timestamp(1406580593), to_timestamp(1407157630), 'base_1'), (123, 1, to_timestamp(1407157630), to_timestamp(1407752477), 'base_1'), (124, 1, to_timestamp(1407752477), to_timestamp(1408309597), 'base_1'), (125, 1, to_timestamp(1408309597), to_timestamp(1408885755), 'base_1'), (126, 1, to_timestamp(1408885755), to_timestamp(1409475499), 'base_1'), (127, 1, to_timestamp(1409475499), to_timestamp(1410076265), 'base_1'), (128, 1, to_timestamp(1410076265), NULL, 'base_1'), (129, 2, NULL, to_timestamp(1282989141), 'base_2'), (130, 2, to_timestamp(1282989141), to_timestamp(1288562509), 'base_2'), (131, 2, to_timestamp(1288562509), to_timestamp(1294442529), 'base_2'), (132, 2, to_timestamp(1294442529), to_timestamp(1299075490), 'base_2'), (133, 2, to_timestamp(1299075490), to_timestamp(1302638214), 'base_2'), (134, 2, to_timestamp(1302638214), to_timestamp(1306115944), 'base_2'), (135, 2, to_timestamp(1306115944), to_timestamp(1309973113), 'base_2'), (136, 2, to_timestamp(1309973113), to_timestamp(1313416673), 'base_2'), (137, 2, to_timestamp(1313416673), to_timestamp(1316691310), 'base_2'), (138, 2, to_timestamp(1316691310), to_timestamp(1319543949), 'base_2'), (139, 2, to_timestamp(1319543949), to_timestamp(1322620189), 'base_2'), (140, 2, to_timestamp(1322620189), to_timestamp(1326102550), 'base_2'), (141, 2, to_timestamp(1326102550), to_timestamp(1328801685), 'base_2'), (142, 2, to_timestamp(1328801685), to_timestamp(1331145557), 'base_2'), (143, 2, to_timestamp(1331145557), to_timestamp(1333622975), 'base_2'), (144, 2, to_timestamp(1333622975), to_timestamp(1336080384), 'base_2'), (145, 2, to_timestamp(1336080384), to_timestamp(1338289321), 'base_2'), (146, 2, to_timestamp(1338289321), to_timestamp(1340461287), 'base_2'), (147, 2, to_timestamp(1340461287), to_timestamp(1342600260), 'base_2'), (148, 2, to_timestamp(1342600260), to_timestamp(1344625108), 'base_2'), (149, 2, to_timestamp(1344625108), to_timestamp(1346620995), 'base_2'), (150, 2, to_timestamp(1346620995), to_timestamp(1348864009), 'base_2'), (151, 2, to_timestamp(1348864009), to_timestamp(1350905498), 'base_2'), (152, 2, to_timestamp(1350905498), to_timestamp(1352892144), 'base_2'), (153, 2, to_timestamp(1352892144), to_timestamp(1354817588), 'base_2'), (154, 2, to_timestamp(1354817588), to_timestamp(1357229704), 'base_2'), (155, 2, to_timestamp(1357229704), to_timestamp(1359302600), 'base_2'), (156, 2, to_timestamp(1359302600), to_timestamp(1361345223), 'base_2'), (157, 2, to_timestamp(1361345223), to_timestamp(1363301330), 'base_2'), (158, 2, to_timestamp(1363301330), to_timestamp(1365070242), 'base_2'), (159, 2, to_timestamp(1365070242), to_timestamp(1366789467), 'base_2'), (160, 2, to_timestamp(1366789467), to_timestamp(1368455143), 'base_2'), (161, 2, to_timestamp(1368455143), to_timestamp(1369962271), 'base_2'), (162, 2, to_timestamp(1369962271), to_timestamp(1371569536), 'base_2'), (163, 2, to_timestamp(1371569536), to_timestamp(1373017771), 'base_2'), (164, 2, to_timestamp(1373017771), to_timestamp(1374260926), 'base_2'), (165, 2, to_timestamp(1374260926), to_timestamp(1375506208), 'base_2'), (166, 2, to_timestamp(1375506208), to_timestamp(1377077045), 'base_2'), (167, 2, to_timestamp(1377077045), to_timestamp(1378485325), 'base_2'), (168, 2, to_timestamp(1378485325), to_timestamp(1380045946), 'base_2'), (169, 2, to_timestamp(1380045946), to_timestamp(1381442043), 'base_2'), (170, 2, to_timestamp(1381442043), to_timestamp(1383053257), 'base_2'), (171, 2, to_timestamp(1383053257), to_timestamp(1384447018), 'base_2'), (172, 2, to_timestamp(1384447018), to_timestamp(1385833568), 'base_2'), (173, 2, to_timestamp(1385833568), to_timestamp(1387193997), 'base_2'), (174, 2, to_timestamp(1387193997), to_timestamp(1389095921), 'base_2'), (175, 2, to_timestamp(1389095921), to_timestamp(1390402198), 'base_2'), (176, 2, to_timestamp(1390402198), to_timestamp(1391658569), 'base_2'), (177, 2, to_timestamp(1391658569), to_timestamp(1392806923), 'base_2'), (178, 2, to_timestamp(1392806923), to_timestamp(1393925930), 'base_2'), (179, 2, to_timestamp(1393925930), to_timestamp(1395060288), 'base_2'), (180, 2, to_timestamp(1395060288), to_timestamp(1396161995), 'base_2'), (181, 2, to_timestamp(1396161995), to_timestamp(1397274430), 'base_2'), (182, 2, to_timestamp(1397274430), to_timestamp(1398438776), 'base_2'), (183, 2, to_timestamp(1398438776), to_timestamp(1399536855), 'base_2'), (184, 2, to_timestamp(1399536855), to_timestamp(1400634115), 'base_2'), (185, 2, to_timestamp(1400634115), to_timestamp(1401886156), 'base_2'), (186, 2, to_timestamp(1401886156), to_timestamp(1403036170), 'base_2'), (187, 2, to_timestamp(1403036170), to_timestamp(1404223165), 'base_2'), (188, 2, to_timestamp(1404223165), to_timestamp(1405440660), 'base_2'), (189, 2, to_timestamp(1405440660), to_timestamp(1406580593), 'base_2'), (190, 2, to_timestamp(1406580593), to_timestamp(1407752477), 'base_2'), (191, 2, to_timestamp(1407752477), to_timestamp(1408885755), 'base_2'), (192, 2, to_timestamp(1408885755), to_timestamp(1410076265), 'base_2'), (193, 2, to_timestamp(1410076265), NULL, 'base_2'), (194, 4, NULL, to_timestamp(1288562509), 'base_4'), (195, 4, to_timestamp(1288562509), to_timestamp(1299075490), 'base_4'), (196, 4, to_timestamp(1299075490), to_timestamp(1306115944), 'base_4'), (197, 4, to_timestamp(1306115944), to_timestamp(1313416673), 'base_4'), (198, 4, to_timestamp(1313416673), to_timestamp(1319543949), 'base_4'), (199, 4, to_timestamp(1319543949), to_timestamp(1326102550), 'base_4'), (200, 4, to_timestamp(1326102550), to_timestamp(1331145557), 'base_4'), (201, 4, to_timestamp(1331145557), to_timestamp(1336080384), 'base_4'), (202, 4, to_timestamp(1336080384), to_timestamp(1340461287), 'base_4'), (203, 4, to_timestamp(1340461287), to_timestamp(1344625108), 'base_4'), (204, 4, to_timestamp(1344625108), to_timestamp(1348864009), 'base_4'), (205, 4, to_timestamp(1348864009), to_timestamp(1352892144), 'base_4'), (206, 4, to_timestamp(1352892144), to_timestamp(1357229704), 'base_4'), (207, 4, to_timestamp(1357229704), to_timestamp(1361345223), 'base_4'), (208, 4, to_timestamp(1361345223), to_timestamp(1365070242), 'base_4'), (209, 4, to_timestamp(1365070242), to_timestamp(1368455143), 'base_4'), (210, 4, to_timestamp(1368455143), to_timestamp(1371569536), 'base_4'), (211, 4, to_timestamp(1371569536), to_timestamp(1374260926), 'base_4'), (212, 4, to_timestamp(1374260926), to_timestamp(1377077045), 'base_4'), (213, 4, to_timestamp(1377077045), to_timestamp(1380045946), 'base_4'), (214, 4, to_timestamp(1380045946), to_timestamp(1383053257), 'base_4'), (215, 4, to_timestamp(1383053257), to_timestamp(1385833568), 'base_4'), (216, 4, to_timestamp(1385833568), to_timestamp(1389095921), 'base_4'), (217, 4, to_timestamp(1389095921), to_timestamp(1391658569), 'base_4'), (218, 4, to_timestamp(1391658569), to_timestamp(1393925930), 'base_4'), (219, 4, to_timestamp(1393925930), to_timestamp(1396161995), 'base_4'), (220, 4, to_timestamp(1396161995), to_timestamp(1398438776), 'base_4'), (221, 4, to_timestamp(1398438776), to_timestamp(1400634115), 'base_4'), (222, 4, to_timestamp(1400634115), to_timestamp(1403036170), 'base_4'), (223, 4, to_timestamp(1403036170), to_timestamp(1405440660), 'base_4'), (224, 4, to_timestamp(1405440660), to_timestamp(1407752477), 'base_4'), (225, 4, to_timestamp(1407752477), to_timestamp(1410076265), 'base_4'), (226, 4, to_timestamp(1410076265), NULL, 'base_4'), (227, 4, NULL, to_timestamp(1285852468), 'offset_4'), (228, 4, to_timestamp(1285852468), to_timestamp(1297102852), 'offset_4'), (229, 4, to_timestamp(1297102852), to_timestamp(1304413881), 'offset_4'), (230, 4, to_timestamp(1304413881), to_timestamp(1311627688), 'offset_4'), (231, 4, to_timestamp(1311627688), to_timestamp(1318024053), 'offset_4'), (232, 4, to_timestamp(1318024053), to_timestamp(1324285340), 'offset_4'), (233, 4, to_timestamp(1324285340), to_timestamp(1329899980), 'offset_4'), (234, 4, to_timestamp(1329899980), to_timestamp(1334857589), 'offset_4'), (235, 4, to_timestamp(1334857589), to_timestamp(1339389255), 'offset_4'), (236, 4, to_timestamp(1339389255), to_timestamp(1343530056), 'offset_4'), (237, 4, to_timestamp(1343530056), to_timestamp(1347813821), 'offset_4'), (238, 4, to_timestamp(1347813821), to_timestamp(1351875997), 'offset_4'), (239, 4, to_timestamp(1351875997), to_timestamp(1355774825), 'offset_4'), (240, 4, to_timestamp(1355774825), to_timestamp(1360247938), 'offset_4'), (241, 4, to_timestamp(1360247938), to_timestamp(1364156764), 'offset_4'), (242, 4, to_timestamp(1364156764), to_timestamp(1367564838), 'offset_4'), (243, 4, to_timestamp(1367564838), to_timestamp(1370808439), 'offset_4'), (244, 4, to_timestamp(1370808439), to_timestamp(1373648999), 'offset_4'), (245, 4, to_timestamp(1373648999), to_timestamp(1376296998), 'offset_4'), (246, 4, to_timestamp(1376296998), to_timestamp(1379358855), 'offset_4'), (247, 4, to_timestamp(1379358855), to_timestamp(1382237144), 'offset_4'), (248, 4, to_timestamp(1382237144), to_timestamp(1385140141), 'offset_4'), (249, 4, to_timestamp(1385140141), to_timestamp(1388181088), 'offset_4'), (250, 4, to_timestamp(1388181088), to_timestamp(1391045392), 'offset_4'), (251, 4, to_timestamp(1391045392), to_timestamp(1393371247), 'offset_4'), (252, 4, to_timestamp(1393371247), to_timestamp(1395596081), 'offset_4'), (253, 4, to_timestamp(1395596081), to_timestamp(1397904522), 'offset_4'), (254, 4, to_timestamp(1397904522), to_timestamp(1400082939), 'offset_4'), (255, 4, to_timestamp(1400082939), to_timestamp(1402452035), 'offset_4'), (256, 4, to_timestamp(1402452035), to_timestamp(1404836836), 'offset_4'), (257, 4, to_timestamp(1404836836), to_timestamp(1407157630), 'offset_4'), (258, 4, to_timestamp(1407157630), to_timestamp(1409475499), 'offset_4'), (259, 4, to_timestamp(1409475499), NULL, 'offset_4'), (260, 8, NULL, to_timestamp(1299075490), 'base_8'), (261, 8, to_timestamp(1299075490), to_timestamp(1313416673), 'base_8'), (262, 8, to_timestamp(1313416673), to_timestamp(1326102550), 'base_8'), (263, 8, to_timestamp(1326102550), to_timestamp(1336080384), 'base_8'), (264, 8, to_timestamp(1336080384), to_timestamp(1344625108), 'base_8'), (265, 8, to_timestamp(1344625108), to_timestamp(1352892144), 'base_8'), (266, 8, to_timestamp(1352892144), to_timestamp(1361345223), 'base_8'), (267, 8, to_timestamp(1361345223), to_timestamp(1368455143), 'base_8'), (268, 8, to_timestamp(1368455143), to_timestamp(1374260926), 'base_8'), (269, 8, to_timestamp(1374260926), to_timestamp(1380045946), 'base_8'), (270, 8, to_timestamp(1380045946), to_timestamp(1385833568), 'base_8'), (271, 8, to_timestamp(1385833568), to_timestamp(1391658569), 'base_8'), (272, 8, to_timestamp(1391658569), to_timestamp(1396161995), 'base_8'), (273, 8, to_timestamp(1396161995), to_timestamp(1400634115), 'base_8'), (274, 8, to_timestamp(1400634115), to_timestamp(1405440660), 'base_8'), (275, 8, to_timestamp(1405440660), to_timestamp(1410076265), 'base_8'), (276, 8, to_timestamp(1410076265), NULL, 'base_8'), (277, 8, NULL, to_timestamp(1291154416), 'offset_8'), (278, 8, to_timestamp(1291154416), to_timestamp(1308090439), 'offset_8'), (279, 8, to_timestamp(1308090439), to_timestamp(1321285581), 'offset_8'), (280, 8, to_timestamp(1321285581), to_timestamp(1332444162), 'offset_8'), (281, 8, to_timestamp(1332444162), to_timestamp(1341553734), 'offset_8'), (282, 8, to_timestamp(1341553734), to_timestamp(1349851980), 'offset_8'), (283, 8, to_timestamp(1349851980), to_timestamp(1358251406), 'offset_8'), (284, 8, to_timestamp(1358251406), to_timestamp(1365921610), 'offset_8'), (285, 8, to_timestamp(1365921610), to_timestamp(1372340631), 'offset_8'), (286, 8, to_timestamp(1372340631), to_timestamp(1377791918), 'offset_8'), (287, 8, to_timestamp(1377791918), to_timestamp(1383784944), 'offset_8'), (288, 8, to_timestamp(1383784944), to_timestamp(1389719619), 'offset_8'), (289, 8, to_timestamp(1389719619), to_timestamp(1394469643), 'offset_8'), (290, 8, to_timestamp(1394469643), to_timestamp(1398981954), 'offset_8'), (291, 8, to_timestamp(1398981954), to_timestamp(1403615199), 'offset_8'), (292, 8, to_timestamp(1403615199), to_timestamp(1408309597), 'offset_8'), (293, 8, to_timestamp(1408309597), NULL, 'offset_8'), (294, 16, NULL, to_timestamp(1313416673), 'base_16'), (295, 16, to_timestamp(1313416673), to_timestamp(1336080384), 'base_16'), (296, 16, to_timestamp(1336080384), to_timestamp(1352892144), 'base_16'), (297, 16, to_timestamp(1352892144), to_timestamp(1368455143), 'base_16'), (298, 16, to_timestamp(1368455143), to_timestamp(1380045946), 'base_16'), (299, 16, to_timestamp(1380045946), to_timestamp(1391658569), 'base_16'), (300, 16, to_timestamp(1391658569), to_timestamp(1400634115), 'base_16'), (301, 16, to_timestamp(1400634115), to_timestamp(1410076265), 'base_16'), (302, 16, to_timestamp(1410076265), NULL, 'base_16'), (303, 16, NULL, to_timestamp(1300779475), 'offset_16'), (304, 16, to_timestamp(1300779475), to_timestamp(1327489395), 'offset_16'), (305, 16, to_timestamp(1327489395), to_timestamp(1345601809), 'offset_16'), (306, 16, to_timestamp(1345601809), to_timestamp(1362434681), 'offset_16'), (307, 16, to_timestamp(1362434681), to_timestamp(1374832519), 'offset_16'), (308, 16, to_timestamp(1374832519), to_timestamp(1386509944), 'offset_16'), (309, 16, to_timestamp(1386509944), to_timestamp(1396754367), 'offset_16'), (310, 16, to_timestamp(1396754367), to_timestamp(1406047728), 'offset_16'), (311, 16, to_timestamp(1406047728), NULL, 'offset_16'), (312, 32, NULL, to_timestamp(1336080384), 'base_32'), (313, 32, to_timestamp(1336080384), to_timestamp(1368455143), 'base_32'), (314, 32, to_timestamp(1368455143), to_timestamp(1391658569), 'base_32'), (315, 32, to_timestamp(1391658569), to_timestamp(1410076265), 'base_32'), (316, 32, to_timestamp(1410076265), NULL, 'base_32'), (317, 32, NULL, to_timestamp(1314963963), 'offset_32'), (318, 32, to_timestamp(1314963963), to_timestamp(1353944347), 'offset_32'), (319, 32, to_timestamp(1353944347), to_timestamp(1380741685), 'offset_32'), (320, 32, to_timestamp(1380741685), to_timestamp(1401257054), 'offset_32'), (321, 32, to_timestamp(1401257054), NULL, 'offset_32'), (322, 64, NULL, to_timestamp(1368455143), 'base_64'), (323, 64, to_timestamp(1368455143), to_timestamp(1410076265), 'base_64'), (324, 64, to_timestamp(1410076265), NULL, 'base_64'), (325, 64, NULL, to_timestamp(1337110149), 'offset_64'), (326, 64, to_timestamp(1337110149), to_timestamp(1392224005), 'offset_64'), (327, 64, to_timestamp(1392224005), NULL, 'offset_64'), (328, 128, NULL, to_timestamp(1410076265), 'base_128'), (329, 128, to_timestamp(1410076265), NULL, 'base_128'), (330, 128, NULL, to_timestamp(1369173411), 'offset_128'), (331, 128, to_timestamp(1369173411), NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS COMMENTS_SCORE_mcv;

-- Create MCV table for COMMENTS.SCORE, with a unique mcv_id
CREATE TABLE COMMENTS_SCORE_mcv AS
WITH base AS (
    SELECT SCORE, COUNT(*) AS freq
    FROM COMMENTS
    WHERE SCORE IS NOT NULL
    GROUP BY SCORE
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    SCORE,
    freq
FROM base;

DROP TABLE IF EXISTS COMMENTS_CREATIONDATE_histogram;
CREATE TABLE COMMENTS_CREATIONDATE_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound DATETIME,
    upper_bound DATETIME,
    bucket_type TEXT
);


INSERT INTO COMMENTS_CREATIONDATE_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, to_timestamp(1281417081), 'base_1'), (1, 1, to_timestamp(1281417081), to_timestamp(1284157270), 'base_1'), (2, 1, to_timestamp(1284157270), to_timestamp(1286716827), 'base_1'), (3, 1, to_timestamp(1286716827), to_timestamp(1288915120), 'base_1'), (4, 1, to_timestamp(1288915120), to_timestamp(1291646002), 'base_1'), (5, 1, to_timestamp(1291646002), to_timestamp(1294366727), 'base_1'), (6, 1, to_timestamp(1294366727), to_timestamp(1296609556), 'base_1'), (7, 1, to_timestamp(1296609556), to_timestamp(1298583516), 'base_1'), (8, 1, to_timestamp(1298583516), to_timestamp(1300128988), 'base_1'), (9, 1, to_timestamp(1300128988), to_timestamp(1301654759), 'base_1'), (10, 1, to_timestamp(1301654759), to_timestamp(1303543198), 'base_1'), (11, 1, to_timestamp(1303543198), to_timestamp(1305209904), 'base_1'), (12, 1, to_timestamp(1305209904), to_timestamp(1306970617), 'base_1'), (13, 1, to_timestamp(1306970617), to_timestamp(1309040221), 'base_1'), (14, 1, to_timestamp(1309040221), to_timestamp(1310919934), 'base_1'), (15, 1, to_timestamp(1310919934), to_timestamp(1312692557), 'base_1'), (16, 1, to_timestamp(1312692557), to_timestamp(1313955922), 'base_1'), (17, 1, to_timestamp(1313955922), to_timestamp(1315425343), 'base_1'), (18, 1, to_timestamp(1315425343), to_timestamp(1317158880), 'base_1'), (19, 1, to_timestamp(1317158880), to_timestamp(1318722163), 'base_1'), (20, 1, to_timestamp(1318722163), to_timestamp(1320165851), 'base_1'), (21, 1, to_timestamp(1320165851), to_timestamp(1321657901), 'base_1'), (22, 1, to_timestamp(1321657901), to_timestamp(1323274560), 'base_1'), (23, 1, to_timestamp(1323274560), to_timestamp(1325274311), 'base_1'), (24, 1, to_timestamp(1325274311), to_timestamp(1326753031), 'base_1'), (25, 1, to_timestamp(1326753031), to_timestamp(1328044047), 'base_1'), (26, 1, to_timestamp(1328044047), to_timestamp(1329162122), 'base_1'), (27, 1, to_timestamp(1329162122), to_timestamp(1330176057), 'base_1'), (28, 1, to_timestamp(1330176057), to_timestamp(1331401587), 'base_1'), (29, 1, to_timestamp(1331401587), to_timestamp(1332560071), 'base_1'), (30, 1, to_timestamp(1332560071), to_timestamp(1333696440), 'base_1'), (31, 1, to_timestamp(1333696440), to_timestamp(1334690342), 'base_1'), (32, 1, to_timestamp(1334690342), to_timestamp(1335816279), 'base_1'), (33, 1, to_timestamp(1335816279), to_timestamp(1336572409), 'base_1'), (34, 1, to_timestamp(1336572409), to_timestamp(1337363822), 'base_1'), (35, 1, to_timestamp(1337363822), to_timestamp(1338320269), 'base_1'), (36, 1, to_timestamp(1338320269), to_timestamp(1339141796), 'base_1'), (37, 1, to_timestamp(1339141796), to_timestamp(1340025127), 'base_1'), (38, 1, to_timestamp(1340025127), to_timestamp(1340896230), 'base_1'), (39, 1, to_timestamp(1340896230), to_timestamp(1341856694), 'base_1'), (40, 1, to_timestamp(1341856694), to_timestamp(1342664379), 'base_1'), (41, 1, to_timestamp(1342664379), to_timestamp(1343398802), 'base_1'), (42, 1, to_timestamp(1343398802), to_timestamp(1344454371), 'base_1'), (43, 1, to_timestamp(1344454371), to_timestamp(1345421863), 'base_1'), (44, 1, to_timestamp(1345421863), to_timestamp(1346250029), 'base_1'), (45, 1, to_timestamp(1346250029), to_timestamp(1347300941), 'base_1'), (46, 1, to_timestamp(1347300941), to_timestamp(1348235141), 'base_1'), (47, 1, to_timestamp(1348235141), to_timestamp(1349126753), 'base_1'), (48, 1, to_timestamp(1349126753), to_timestamp(1349966174), 'base_1'), (49, 1, to_timestamp(1349966174), to_timestamp(1351008219), 'base_1'), (50, 1, to_timestamp(1351008219), to_timestamp(1352119452), 'base_1'), (51, 1, to_timestamp(1352119452), to_timestamp(1353165727), 'base_1'), (52, 1, to_timestamp(1353165727), to_timestamp(1354241256), 'base_1'), (53, 1, to_timestamp(1354241256), to_timestamp(1355219056), 'base_1'), (54, 1, to_timestamp(1355219056), to_timestamp(1356119251), 'base_1'), (55, 1, to_timestamp(1356119251), to_timestamp(1357718186), 'base_1'), (56, 1, to_timestamp(1357718186), to_timestamp(1358650633), 'base_1'), (57, 1, to_timestamp(1358650633), to_timestamp(1359740900), 'base_1'), (58, 1, to_timestamp(1359740900), to_timestamp(1360845431), 'base_1'), (59, 1, to_timestamp(1360845431), to_timestamp(1361811382), 'base_1'), (60, 1, to_timestamp(1361811382), to_timestamp(1362791869), 'base_1'), (61, 1, to_timestamp(1362791869), to_timestamp(1363624814), 'base_1'), (62, 1, to_timestamp(1363624814), to_timestamp(1364416942), 'base_1'), (63, 1, to_timestamp(1364416942), to_timestamp(1365416448), 'base_1'), (64, 1, to_timestamp(1365416448), to_timestamp(1366250674), 'base_1'), (65, 1, to_timestamp(1366250674), to_timestamp(1367080797), 'base_1'), (66, 1, to_timestamp(1367080797), to_timestamp(1367955468), 'base_1'), (67, 1, to_timestamp(1367955468), to_timestamp(1368862944), 'base_1'), (68, 1, to_timestamp(1368862944), to_timestamp(1369734782), 'base_1'), (69, 1, to_timestamp(1369734782), to_timestamp(1370522871), 'base_1'), (70, 1, to_timestamp(1370522871), to_timestamp(1371479629), 'base_1'), (71, 1, to_timestamp(1371479629), to_timestamp(1372334152), 'base_1'), (72, 1, to_timestamp(1372334152), to_timestamp(1373066400), 'base_1'), (73, 1, to_timestamp(1373066400), to_timestamp(1373679084), 'base_1'), (74, 1, to_timestamp(1373679084), to_timestamp(1374302064), 'base_1'), (75, 1, to_timestamp(1374302064), to_timestamp(1374947783), 'base_1'), (76, 1, to_timestamp(1374947783), to_timestamp(1375803467), 'base_1'), (77, 1, to_timestamp(1375803467), to_timestamp(1376623540), 'base_1'), (78, 1, to_timestamp(1376623540), to_timestamp(1377509205), 'base_1'), (79, 1, to_timestamp(1377509205), to_timestamp(1378397030), 'base_1'), (80, 1, to_timestamp(1378397030), to_timestamp(1379175227), 'base_1'), (81, 1, to_timestamp(1379175227), to_timestamp(1379924562), 'base_1'), (82, 1, to_timestamp(1379924562), to_timestamp(1380636265), 'base_1'), (83, 1, to_timestamp(1380636265), to_timestamp(1381330397), 'base_1'), (84, 1, to_timestamp(1381330397), to_timestamp(1382047585), 'base_1'), (85, 1, to_timestamp(1382047585), to_timestamp(1382874572), 'base_1'), (86, 1, to_timestamp(1382874572), to_timestamp(1383587312), 'base_1'), (87, 1, to_timestamp(1383587312), to_timestamp(1384263324), 'base_1'), (88, 1, to_timestamp(1384263324), to_timestamp(1384882411), 'base_1'), (89, 1, to_timestamp(1384882411), to_timestamp(1385563852), 'base_1'), (90, 1, to_timestamp(1385563852), to_timestamp(1386168925), 'base_1'), (91, 1, to_timestamp(1386168925), to_timestamp(1386737199), 'base_1'), (92, 1, to_timestamp(1386737199), to_timestamp(1387482150), 'base_1'), (93, 1, to_timestamp(1387482150), to_timestamp(1388623881), 'base_1'), (94, 1, to_timestamp(1388623881), to_timestamp(1389354365), 'base_1'), (95, 1, to_timestamp(1389354365), to_timestamp(1390057252), 'base_1'), (96, 1, to_timestamp(1390057252), to_timestamp(1390834920), 'base_1'), (97, 1, to_timestamp(1390834920), to_timestamp(1391438084), 'base_1'), (98, 1, to_timestamp(1391438084), to_timestamp(1392057916), 'base_1'), (99, 1, to_timestamp(1392057916), to_timestamp(1392678333), 'base_1'), (100, 1, to_timestamp(1392678333), to_timestamp(1393292301), 'base_1'), (101, 1, to_timestamp(1393292301), to_timestamp(1393770966), 'base_1'), (102, 1, to_timestamp(1393770966), to_timestamp(1394305756), 'base_1'), (103, 1, to_timestamp(1394305756), to_timestamp(1394833480), 'base_1'), (104, 1, to_timestamp(1394833480), to_timestamp(1395429081), 'base_1'), (105, 1, to_timestamp(1395429081), to_timestamp(1396099223), 'base_1'), (106, 1, to_timestamp(1396099223), to_timestamp(1396811708), 'base_1'), (107, 1, to_timestamp(1396811708), to_timestamp(1397484292), 'base_1'), (108, 1, to_timestamp(1397484292), to_timestamp(1398118406), 'base_1'), (109, 1, to_timestamp(1398118406), to_timestamp(1398723127), 'base_1'), (110, 1, to_timestamp(1398723127), to_timestamp(1399293747), 'base_1'), (111, 1, to_timestamp(1399293747), to_timestamp(1399903576), 'base_1'), (112, 1, to_timestamp(1399903576), to_timestamp(1400440104), 'base_1'), (113, 1, to_timestamp(1400440104), to_timestamp(1401121107), 'base_1'), (114, 1, to_timestamp(1401121107), to_timestamp(1401820494), 'base_1'), (115, 1, to_timestamp(1401820494), to_timestamp(1402498747), 'base_1'), (116, 1, to_timestamp(1402498747), to_timestamp(1403121334), 'base_1'), (117, 1, to_timestamp(1403121334), to_timestamp(1403738278), 'base_1'), (118, 1, to_timestamp(1403738278), to_timestamp(1404331784), 'base_1'), (119, 1, to_timestamp(1404331784), to_timestamp(1404980284), 'base_1'), (120, 1, to_timestamp(1404980284), to_timestamp(1405662128), 'base_1'), (121, 1, to_timestamp(1405662128), to_timestamp(1406321799), 'base_1'), (122, 1, to_timestamp(1406321799), to_timestamp(1406874946), 'base_1'), (123, 1, to_timestamp(1406874946), to_timestamp(1407560289), 'base_1'), (124, 1, to_timestamp(1407560289), to_timestamp(1408202144), 'base_1'), (125, 1, to_timestamp(1408202144), to_timestamp(1408804069), 'base_1'), (126, 1, to_timestamp(1408804069), to_timestamp(1409427135), 'base_1'), (127, 1, to_timestamp(1409427135), to_timestamp(1410039570), 'base_1'), (128, 1, to_timestamp(1410039570), NULL, 'base_1'), (129, 2, NULL, to_timestamp(1284157270), 'base_2'), (130, 2, to_timestamp(1284157270), to_timestamp(1288915120), 'base_2'), (131, 2, to_timestamp(1288915120), to_timestamp(1294366727), 'base_2'), (132, 2, to_timestamp(1294366727), to_timestamp(1298583516), 'base_2'), (133, 2, to_timestamp(1298583516), to_timestamp(1301654759), 'base_2'), (134, 2, to_timestamp(1301654759), to_timestamp(1305209904), 'base_2'), (135, 2, to_timestamp(1305209904), to_timestamp(1309040221), 'base_2'), (136, 2, to_timestamp(1309040221), to_timestamp(1312692557), 'base_2'), (137, 2, to_timestamp(1312692557), to_timestamp(1315425343), 'base_2'), (138, 2, to_timestamp(1315425343), to_timestamp(1318722163), 'base_2'), (139, 2, to_timestamp(1318722163), to_timestamp(1321657901), 'base_2'), (140, 2, to_timestamp(1321657901), to_timestamp(1325274311), 'base_2'), (141, 2, to_timestamp(1325274311), to_timestamp(1328044047), 'base_2'), (142, 2, to_timestamp(1328044047), to_timestamp(1330176057), 'base_2'), (143, 2, to_timestamp(1330176057), to_timestamp(1332560071), 'base_2'), (144, 2, to_timestamp(1332560071), to_timestamp(1334690342), 'base_2'), (145, 2, to_timestamp(1334690342), to_timestamp(1336572409), 'base_2'), (146, 2, to_timestamp(1336572409), to_timestamp(1338320269), 'base_2'), (147, 2, to_timestamp(1338320269), to_timestamp(1340025127), 'base_2'), (148, 2, to_timestamp(1340025127), to_timestamp(1341856694), 'base_2'), (149, 2, to_timestamp(1341856694), to_timestamp(1343398802), 'base_2'), (150, 2, to_timestamp(1343398802), to_timestamp(1345421863), 'base_2'), (151, 2, to_timestamp(1345421863), to_timestamp(1347300941), 'base_2'), (152, 2, to_timestamp(1347300941), to_timestamp(1349126753), 'base_2'), (153, 2, to_timestamp(1349126753), to_timestamp(1351008219), 'base_2'), (154, 2, to_timestamp(1351008219), to_timestamp(1353165727), 'base_2'), (155, 2, to_timestamp(1353165727), to_timestamp(1355219056), 'base_2'), (156, 2, to_timestamp(1355219056), to_timestamp(1357718186), 'base_2'), (157, 2, to_timestamp(1357718186), to_timestamp(1359740900), 'base_2'), (158, 2, to_timestamp(1359740900), to_timestamp(1361811382), 'base_2'), (159, 2, to_timestamp(1361811382), to_timestamp(1363624814), 'base_2'), (160, 2, to_timestamp(1363624814), to_timestamp(1365416448), 'base_2'), (161, 2, to_timestamp(1365416448), to_timestamp(1367080797), 'base_2'), (162, 2, to_timestamp(1367080797), to_timestamp(1368862944), 'base_2'), (163, 2, to_timestamp(1368862944), to_timestamp(1370522871), 'base_2'), (164, 2, to_timestamp(1370522871), to_timestamp(1372334152), 'base_2'), (165, 2, to_timestamp(1372334152), to_timestamp(1373679084), 'base_2'), (166, 2, to_timestamp(1373679084), to_timestamp(1374947783), 'base_2'), (167, 2, to_timestamp(1374947783), to_timestamp(1376623540), 'base_2'), (168, 2, to_timestamp(1376623540), to_timestamp(1378397030), 'base_2'), (169, 2, to_timestamp(1378397030), to_timestamp(1379924562), 'base_2'), (170, 2, to_timestamp(1379924562), to_timestamp(1381330397), 'base_2'), (171, 2, to_timestamp(1381330397), to_timestamp(1382874572), 'base_2'), (172, 2, to_timestamp(1382874572), to_timestamp(1384263324), 'base_2'), (173, 2, to_timestamp(1384263324), to_timestamp(1385563852), 'base_2'), (174, 2, to_timestamp(1385563852), to_timestamp(1386737199), 'base_2'), (175, 2, to_timestamp(1386737199), to_timestamp(1388623881), 'base_2'), (176, 2, to_timestamp(1388623881), to_timestamp(1390057252), 'base_2'), (177, 2, to_timestamp(1390057252), to_timestamp(1391438084), 'base_2'), (178, 2, to_timestamp(1391438084), to_timestamp(1392678333), 'base_2'), (179, 2, to_timestamp(1392678333), to_timestamp(1393770966), 'base_2'), (180, 2, to_timestamp(1393770966), to_timestamp(1394833480), 'base_2'), (181, 2, to_timestamp(1394833480), to_timestamp(1396099223), 'base_2'), (182, 2, to_timestamp(1396099223), to_timestamp(1397484292), 'base_2'), (183, 2, to_timestamp(1397484292), to_timestamp(1398723127), 'base_2'), (184, 2, to_timestamp(1398723127), to_timestamp(1399903576), 'base_2'), (185, 2, to_timestamp(1399903576), to_timestamp(1401121107), 'base_2'), (186, 2, to_timestamp(1401121107), to_timestamp(1402498747), 'base_2'), (187, 2, to_timestamp(1402498747), to_timestamp(1403738278), 'base_2'), (188, 2, to_timestamp(1403738278), to_timestamp(1404980284), 'base_2'), (189, 2, to_timestamp(1404980284), to_timestamp(1406321799), 'base_2'), (190, 2, to_timestamp(1406321799), to_timestamp(1407560289), 'base_2'), (191, 2, to_timestamp(1407560289), to_timestamp(1408804069), 'base_2'), (192, 2, to_timestamp(1408804069), to_timestamp(1410039570), 'base_2'), (193, 2, to_timestamp(1410039570), NULL, 'base_2'), (194, 4, NULL, to_timestamp(1288915120), 'base_4'), (195, 4, to_timestamp(1288915120), to_timestamp(1298583516), 'base_4'), (196, 4, to_timestamp(1298583516), to_timestamp(1305209904), 'base_4'), (197, 4, to_timestamp(1305209904), to_timestamp(1312692557), 'base_4'), (198, 4, to_timestamp(1312692557), to_timestamp(1318722163), 'base_4'), (199, 4, to_timestamp(1318722163), to_timestamp(1325274311), 'base_4'), (200, 4, to_timestamp(1325274311), to_timestamp(1330176057), 'base_4'), (201, 4, to_timestamp(1330176057), to_timestamp(1334690342), 'base_4'), (202, 4, to_timestamp(1334690342), to_timestamp(1338320269), 'base_4'), (203, 4, to_timestamp(1338320269), to_timestamp(1341856694), 'base_4'), (204, 4, to_timestamp(1341856694), to_timestamp(1345421863), 'base_4'), (205, 4, to_timestamp(1345421863), to_timestamp(1349126753), 'base_4'), (206, 4, to_timestamp(1349126753), to_timestamp(1353165727), 'base_4'), (207, 4, to_timestamp(1353165727), to_timestamp(1357718186), 'base_4'), (208, 4, to_timestamp(1357718186), to_timestamp(1361811382), 'base_4'), (209, 4, to_timestamp(1361811382), to_timestamp(1365416448), 'base_4'), (210, 4, to_timestamp(1365416448), to_timestamp(1368862944), 'base_4'), (211, 4, to_timestamp(1368862944), to_timestamp(1372334152), 'base_4'), (212, 4, to_timestamp(1372334152), to_timestamp(1374947783), 'base_4'), (213, 4, to_timestamp(1374947783), to_timestamp(1378397030), 'base_4'), (214, 4, to_timestamp(1378397030), to_timestamp(1381330397), 'base_4'), (215, 4, to_timestamp(1381330397), to_timestamp(1384263324), 'base_4'), (216, 4, to_timestamp(1384263324), to_timestamp(1386737199), 'base_4'), (217, 4, to_timestamp(1386737199), to_timestamp(1390057252), 'base_4'), (218, 4, to_timestamp(1390057252), to_timestamp(1392678333), 'base_4'), (219, 4, to_timestamp(1392678333), to_timestamp(1394833480), 'base_4'), (220, 4, to_timestamp(1394833480), to_timestamp(1397484292), 'base_4'), (221, 4, to_timestamp(1397484292), to_timestamp(1399903576), 'base_4'), (222, 4, to_timestamp(1399903576), to_timestamp(1402498747), 'base_4'), (223, 4, to_timestamp(1402498747), to_timestamp(1404980284), 'base_4'), (224, 4, to_timestamp(1404980284), to_timestamp(1407560289), 'base_4'), (225, 4, to_timestamp(1407560289), to_timestamp(1410039570), 'base_4'), (226, 4, to_timestamp(1410039570), NULL, 'base_4'), (227, 4, NULL, to_timestamp(1286716827), 'offset_4'), (228, 4, to_timestamp(1286716827), to_timestamp(1296609556), 'offset_4'), (229, 4, to_timestamp(1296609556), to_timestamp(1303543198), 'offset_4'), (230, 4, to_timestamp(1303543198), to_timestamp(1310919934), 'offset_4'), (231, 4, to_timestamp(1310919934), to_timestamp(1317158880), 'offset_4'), (232, 4, to_timestamp(1317158880), to_timestamp(1323274560), 'offset_4'), (233, 4, to_timestamp(1323274560), to_timestamp(1329162122), 'offset_4'), (234, 4, to_timestamp(1329162122), to_timestamp(1333696440), 'offset_4'), (235, 4, to_timestamp(1333696440), to_timestamp(1337363822), 'offset_4'), (236, 4, to_timestamp(1337363822), to_timestamp(1340896230), 'offset_4'), (237, 4, to_timestamp(1340896230), to_timestamp(1344454371), 'offset_4'), (238, 4, to_timestamp(1344454371), to_timestamp(1348235141), 'offset_4'), (239, 4, to_timestamp(1348235141), to_timestamp(1352119452), 'offset_4'), (240, 4, to_timestamp(1352119452), to_timestamp(1356119251), 'offset_4'), (241, 4, to_timestamp(1356119251), to_timestamp(1360845431), 'offset_4'), (242, 4, to_timestamp(1360845431), to_timestamp(1364416942), 'offset_4'), (243, 4, to_timestamp(1364416942), to_timestamp(1367955468), 'offset_4'), (244, 4, to_timestamp(1367955468), to_timestamp(1371479629), 'offset_4'), (245, 4, to_timestamp(1371479629), to_timestamp(1374302064), 'offset_4'), (246, 4, to_timestamp(1374302064), to_timestamp(1377509205), 'offset_4'), (247, 4, to_timestamp(1377509205), to_timestamp(1380636265), 'offset_4'), (248, 4, to_timestamp(1380636265), to_timestamp(1383587312), 'offset_4'), (249, 4, to_timestamp(1383587312), to_timestamp(1386168925), 'offset_4'), (250, 4, to_timestamp(1386168925), to_timestamp(1389354365), 'offset_4'), (251, 4, to_timestamp(1389354365), to_timestamp(1392057916), 'offset_4'), (252, 4, to_timestamp(1392057916), to_timestamp(1394305756), 'offset_4'), (253, 4, to_timestamp(1394305756), to_timestamp(1396811708), 'offset_4'), (254, 4, to_timestamp(1396811708), to_timestamp(1399293747), 'offset_4'), (255, 4, to_timestamp(1399293747), to_timestamp(1401820494), 'offset_4'), (256, 4, to_timestamp(1401820494), to_timestamp(1404331784), 'offset_4'), (257, 4, to_timestamp(1404331784), to_timestamp(1406874946), 'offset_4'), (258, 4, to_timestamp(1406874946), to_timestamp(1409427135), 'offset_4'), (259, 4, to_timestamp(1409427135), NULL, 'offset_4'), (260, 8, NULL, to_timestamp(1298583516), 'base_8'), (261, 8, to_timestamp(1298583516), to_timestamp(1312692557), 'base_8'), (262, 8, to_timestamp(1312692557), to_timestamp(1325274311), 'base_8'), (263, 8, to_timestamp(1325274311), to_timestamp(1334690342), 'base_8'), (264, 8, to_timestamp(1334690342), to_timestamp(1341856694), 'base_8'), (265, 8, to_timestamp(1341856694), to_timestamp(1349126753), 'base_8'), (266, 8, to_timestamp(1349126753), to_timestamp(1357718186), 'base_8'), (267, 8, to_timestamp(1357718186), to_timestamp(1365416448), 'base_8'), (268, 8, to_timestamp(1365416448), to_timestamp(1372334152), 'base_8'), (269, 8, to_timestamp(1372334152), to_timestamp(1378397030), 'base_8'), (270, 8, to_timestamp(1378397030), to_timestamp(1384263324), 'base_8'), (271, 8, to_timestamp(1384263324), to_timestamp(1390057252), 'base_8'), (272, 8, to_timestamp(1390057252), to_timestamp(1394833480), 'base_8'), (273, 8, to_timestamp(1394833480), to_timestamp(1399903576), 'base_8'), (274, 8, to_timestamp(1399903576), to_timestamp(1404980284), 'base_8'), (275, 8, to_timestamp(1404980284), to_timestamp(1410039570), 'base_8'), (276, 8, to_timestamp(1410039570), NULL, 'base_8'), (277, 8, NULL, to_timestamp(1291646002), 'offset_8'), (278, 8, to_timestamp(1291646002), to_timestamp(1306970617), 'offset_8'), (279, 8, to_timestamp(1306970617), to_timestamp(1320165851), 'offset_8'), (280, 8, to_timestamp(1320165851), to_timestamp(1331401587), 'offset_8'), (281, 8, to_timestamp(1331401587), to_timestamp(1339141796), 'offset_8'), (282, 8, to_timestamp(1339141796), to_timestamp(1346250029), 'offset_8'), (283, 8, to_timestamp(1346250029), to_timestamp(1354241256), 'offset_8'), (284, 8, to_timestamp(1354241256), to_timestamp(1362791869), 'offset_8'), (285, 8, to_timestamp(1362791869), to_timestamp(1369734782), 'offset_8'), (286, 8, to_timestamp(1369734782), to_timestamp(1375803467), 'offset_8'), (287, 8, to_timestamp(1375803467), to_timestamp(1382047585), 'offset_8'), (288, 8, to_timestamp(1382047585), to_timestamp(1387482150), 'offset_8'), (289, 8, to_timestamp(1387482150), to_timestamp(1393292301), 'offset_8'), (290, 8, to_timestamp(1393292301), to_timestamp(1398118406), 'offset_8'), (291, 8, to_timestamp(1398118406), to_timestamp(1403121334), 'offset_8'), (292, 8, to_timestamp(1403121334), to_timestamp(1408202144), 'offset_8'), (293, 8, to_timestamp(1408202144), NULL, 'offset_8'), (294, 16, NULL, to_timestamp(1312692557), 'base_16'), (295, 16, to_timestamp(1312692557), to_timestamp(1334690342), 'base_16'), (296, 16, to_timestamp(1334690342), to_timestamp(1349126753), 'base_16'), (297, 16, to_timestamp(1349126753), to_timestamp(1365416448), 'base_16'), (298, 16, to_timestamp(1365416448), to_timestamp(1378397030), 'base_16'), (299, 16, to_timestamp(1378397030), to_timestamp(1390057252), 'base_16'), (300, 16, to_timestamp(1390057252), to_timestamp(1399903576), 'base_16'), (301, 16, to_timestamp(1399903576), to_timestamp(1410039570), 'base_16'), (302, 16, to_timestamp(1410039570), NULL, 'base_16'), (303, 16, NULL, to_timestamp(1300128988), 'offset_16'), (304, 16, to_timestamp(1300128988), to_timestamp(1326753031), 'offset_16'), (305, 16, to_timestamp(1326753031), to_timestamp(1342664379), 'offset_16'), (306, 16, to_timestamp(1342664379), to_timestamp(1358650633), 'offset_16'), (307, 16, to_timestamp(1358650633), to_timestamp(1373066400), 'offset_16'), (308, 16, to_timestamp(1373066400), to_timestamp(1384882411), 'offset_16'), (309, 16, to_timestamp(1384882411), to_timestamp(1395429081), 'offset_16'), (310, 16, to_timestamp(1395429081), to_timestamp(1405662128), 'offset_16'), (311, 16, to_timestamp(1405662128), NULL, 'offset_16'), (312, 32, NULL, to_timestamp(1334690342), 'base_32'), (313, 32, to_timestamp(1334690342), to_timestamp(1365416448), 'base_32'), (314, 32, to_timestamp(1365416448), to_timestamp(1390057252), 'base_32'), (315, 32, to_timestamp(1390057252), to_timestamp(1410039570), 'base_32'), (316, 32, to_timestamp(1410039570), NULL, 'base_32'), (317, 32, NULL, to_timestamp(1313955922), 'offset_32'), (318, 32, to_timestamp(1313955922), to_timestamp(1349966174), 'offset_32'), (319, 32, to_timestamp(1349966174), to_timestamp(1379175227), 'offset_32'), (320, 32, to_timestamp(1379175227), to_timestamp(1400440104), 'offset_32'), (321, 32, to_timestamp(1400440104), NULL, 'offset_32'), (322, 64, NULL, to_timestamp(1365416448), 'base_64'), (323, 64, to_timestamp(1365416448), to_timestamp(1410039570), 'base_64'), (324, 64, to_timestamp(1410039570), NULL, 'base_64'), (325, 64, NULL, to_timestamp(1335816279), 'offset_64'), (326, 64, to_timestamp(1335816279), to_timestamp(1390834920), 'offset_64'), (327, 64, to_timestamp(1390834920), NULL, 'offset_64'), (328, 128, NULL, to_timestamp(1410039570), 'base_128'), (329, 128, to_timestamp(1410039570), NULL, 'base_128'), (330, 128, NULL, to_timestamp(1366250674), 'offset_128'), (331, 128, to_timestamp(1366250674), NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS VOTES_VOTETYPEID_mcv;

-- Create MCV table for VOTES.VOTETYPEID, with a unique mcv_id
CREATE TABLE VOTES_VOTETYPEID_mcv AS
WITH base AS (
    SELECT VOTETYPEID, COUNT(*) AS freq
    FROM VOTES
    WHERE VOTETYPEID IS NOT NULL
    GROUP BY VOTETYPEID
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    VOTETYPEID,
    freq
FROM base;

DROP TABLE IF EXISTS VOTES_CREATIONDATE_histogram;
CREATE TABLE VOTES_CREATIONDATE_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound DATETIME,
    upper_bound DATETIME,
    bucket_type TEXT
);


INSERT INTO VOTES_CREATIONDATE_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, to_timestamp(1280275200), 'base_1'), (1, 1, to_timestamp(1280275200), to_timestamp(1282089600), 'base_1'), (2, 1, to_timestamp(1282089600), to_timestamp(1283904000), 'base_1'), (3, 1, to_timestamp(1283904000), to_timestamp(1285718400), 'base_1'), (4, 1, to_timestamp(1285718400), to_timestamp(1287360000), 'base_1'), (5, 1, to_timestamp(1287360000), to_timestamp(1288742400), 'base_1'), (6, 1, to_timestamp(1288742400), to_timestamp(1290211200), 'base_1'), (7, 1, to_timestamp(1290211200), to_timestamp(1292112000), 'base_1'), (8, 1, to_timestamp(1292112000), to_timestamp(1294358400), 'base_1'), (9, 1, to_timestamp(1294358400), to_timestamp(1296259200), 'base_1'), (10, 1, to_timestamp(1296259200), to_timestamp(1297814400), 'base_1'), (11, 1, to_timestamp(1297814400), to_timestamp(1299196800), 'base_1'), (12, 1, to_timestamp(1299196800), to_timestamp(1300579200), 'base_1'), (13, 1, to_timestamp(1300579200), to_timestamp(1302134400), 'base_1'), (14, 1, to_timestamp(1302134400), to_timestamp(1303689600), 'base_1'), (15, 1, to_timestamp(1303689600), to_timestamp(1304985600), 'base_1'), (16, 1, to_timestamp(1304985600), to_timestamp(1306281600), 'base_1'), (17, 1, to_timestamp(1306281600), to_timestamp(1307836800), 'base_1'), (18, 1, to_timestamp(1307836800), to_timestamp(1309478400), 'base_1'), (19, 1, to_timestamp(1309478400), to_timestamp(1311206400), 'base_1'), (20, 1, to_timestamp(1311206400), to_timestamp(1312848000), 'base_1'), (21, 1, to_timestamp(1312848000), to_timestamp(1314057600), 'base_1'), (22, 1, to_timestamp(1314057600), to_timestamp(1315872000), 'base_1'), (23, 1, to_timestamp(1315872000), to_timestamp(1317340800), 'base_1'), (24, 1, to_timestamp(1317340800), to_timestamp(1318723200), 'base_1'), (25, 1, to_timestamp(1318723200), to_timestamp(1319760000), 'base_1'), (26, 1, to_timestamp(1319760000), to_timestamp(1321315200), 'base_1'), (27, 1, to_timestamp(1321315200), to_timestamp(1322611200), 'base_1'), (28, 1, to_timestamp(1322611200), to_timestamp(1323993600), 'base_1'), (29, 1, to_timestamp(1323993600), to_timestamp(1325721600), 'base_1'), (30, 1, to_timestamp(1325721600), to_timestamp(1327104000), 'base_1'), (31, 1, to_timestamp(1327104000), to_timestamp(1328313600), 'base_1'), (32, 1, to_timestamp(1328313600), to_timestamp(1329177600), 'base_1'), (33, 1, to_timestamp(1329177600), to_timestamp(1330041600), 'base_1'), (34, 1, to_timestamp(1330041600), to_timestamp(1331251200), 'base_1'), (35, 1, to_timestamp(1331251200), to_timestamp(1332288000), 'base_1'), (36, 1, to_timestamp(1332288000), to_timestamp(1333497600), 'base_1'), (37, 1, to_timestamp(1333497600), to_timestamp(1334620800), 'base_1'), (38, 1, to_timestamp(1334620800), to_timestamp(1335744000), 'base_1'), (39, 1, to_timestamp(1335744000), to_timestamp(1336608000), 'base_1'), (40, 1, to_timestamp(1336608000), to_timestamp(1337731200), 'base_1'), (41, 1, to_timestamp(1337731200), to_timestamp(1338681600), 'base_1'), (42, 1, to_timestamp(1338681600), to_timestamp(1339632000), 'base_1'), (43, 1, to_timestamp(1339632000), to_timestamp(1340582400), 'base_1'), (44, 1, to_timestamp(1340582400), to_timestamp(1341532800), 'base_1'), (45, 1, to_timestamp(1341532800), to_timestamp(1342483200), 'base_1'), (46, 1, to_timestamp(1342483200), to_timestamp(1343347200), 'base_1'), (47, 1, to_timestamp(1343347200), to_timestamp(1344384000), 'base_1'), (48, 1, to_timestamp(1344384000), to_timestamp(1345161600), 'base_1'), (49, 1, to_timestamp(1345161600), to_timestamp(1346112000), 'base_1'), (50, 1, to_timestamp(1346112000), to_timestamp(1347062400), 'base_1'), (51, 1, to_timestamp(1347062400), to_timestamp(1348012800), 'base_1'), (52, 1, to_timestamp(1348012800), to_timestamp(1349049600), 'base_1'), (53, 1, to_timestamp(1349049600), to_timestamp(1349740800), 'base_1'), (54, 1, to_timestamp(1349740800), to_timestamp(1350691200), 'base_1'), (55, 1, to_timestamp(1350691200), to_timestamp(1351728000), 'base_1'), (56, 1, to_timestamp(1351728000), to_timestamp(1352764800), 'base_1'), (57, 1, to_timestamp(1352764800), to_timestamp(1353888000), 'base_1'), (58, 1, to_timestamp(1353888000), to_timestamp(1354752000), 'base_1'), (59, 1, to_timestamp(1354752000), to_timestamp(1355616000), 'base_1'), (60, 1, to_timestamp(1355616000), to_timestamp(1356825600), 'base_1'), (61, 1, to_timestamp(1356825600), to_timestamp(1357948800), 'base_1'), (62, 1, to_timestamp(1357948800), to_timestamp(1358985600), 'base_1'), (63, 1, to_timestamp(1358985600), to_timestamp(1360022400), 'base_1'), (64, 1, to_timestamp(1360022400), to_timestamp(1361145600), 'base_1'), (65, 1, to_timestamp(1361145600), to_timestamp(1362009600), 'base_1'), (66, 1, to_timestamp(1362009600), to_timestamp(1363132800), 'base_1'), (67, 1, to_timestamp(1363132800), to_timestamp(1364256000), 'base_1'), (68, 1, to_timestamp(1364256000), to_timestamp(1365292800), 'base_1'), (69, 1, to_timestamp(1365292800), to_timestamp(1366070400), 'base_1'), (70, 1, to_timestamp(1366070400), to_timestamp(1366934400), 'base_1'), (71, 1, to_timestamp(1366934400), to_timestamp(1367971200), 'base_1'), (72, 1, to_timestamp(1367971200), to_timestamp(1368921600), 'base_1'), (73, 1, to_timestamp(1368921600), to_timestamp(1369699200), 'base_1'), (74, 1, to_timestamp(1369699200), to_timestamp(1370563200), 'base_1'), (75, 1, to_timestamp(1370563200), to_timestamp(1371340800), 'base_1'), (76, 1, to_timestamp(1371340800), to_timestamp(1372204800), 'base_1'), (77, 1, to_timestamp(1372204800), to_timestamp(1372896000), 'base_1'), (78, 1, to_timestamp(1372896000), to_timestamp(1373587200), 'base_1'), (79, 1, to_timestamp(1373587200), to_timestamp(1374364800), 'base_1'), (80, 1, to_timestamp(1374364800), to_timestamp(1375056000), 'base_1'), (81, 1, to_timestamp(1375056000), to_timestamp(1375833600), 'base_1'), (82, 1, to_timestamp(1375833600), to_timestamp(1376611200), 'base_1'), (83, 1, to_timestamp(1376611200), to_timestamp(1377475200), 'base_1'), (84, 1, to_timestamp(1377475200), to_timestamp(1378252800), 'base_1'), (85, 1, to_timestamp(1378252800), to_timestamp(1379289600), 'base_1'), (86, 1, to_timestamp(1379289600), to_timestamp(1379980800), 'base_1'), (87, 1, to_timestamp(1379980800), to_timestamp(1380758400), 'base_1'), (88, 1, to_timestamp(1380758400), to_timestamp(1381622400), 'base_1'), (89, 1, to_timestamp(1381622400), to_timestamp(1382572800), 'base_1'), (90, 1, to_timestamp(1382572800), to_timestamp(1383609600), 'base_1'), (91, 1, to_timestamp(1383609600), to_timestamp(1384473600), 'base_1'), (92, 1, to_timestamp(1384473600), to_timestamp(1385424000), 'base_1'), (93, 1, to_timestamp(1385424000), to_timestamp(1386201600), 'base_1'), (94, 1, to_timestamp(1386201600), to_timestamp(1386979200), 'base_1'), (95, 1, to_timestamp(1386979200), to_timestamp(1388016000), 'base_1'), (96, 1, to_timestamp(1388016000), to_timestamp(1389052800), 'base_1'), (97, 1, to_timestamp(1389052800), to_timestamp(1389744000), 'base_1'), (98, 1, to_timestamp(1389744000), to_timestamp(1390435200), 'base_1'), (99, 1, to_timestamp(1390435200), to_timestamp(1390953600), 'base_1'), (100, 1, to_timestamp(1390953600), to_timestamp(1391472000), 'base_1'), (101, 1, to_timestamp(1391472000), to_timestamp(1392076800), 'base_1'), (102, 1, to_timestamp(1392076800), to_timestamp(1392595200), 'base_1'), (103, 1, to_timestamp(1392595200), to_timestamp(1393200000), 'base_1'), (104, 1, to_timestamp(1393200000), to_timestamp(1393804800), 'base_1'), (105, 1, to_timestamp(1393804800), to_timestamp(1394409600), 'base_1'), (106, 1, to_timestamp(1394409600), to_timestamp(1395014400), 'base_1'), (107, 1, to_timestamp(1395014400), to_timestamp(1395705600), 'base_1'), (108, 1, to_timestamp(1395705600), to_timestamp(1396483200), 'base_1'), (109, 1, to_timestamp(1396483200), to_timestamp(1397174400), 'base_1'), (110, 1, to_timestamp(1397174400), to_timestamp(1397952000), 'base_1'), (111, 1, to_timestamp(1397952000), to_timestamp(1398643200), 'base_1'), (112, 1, to_timestamp(1398643200), to_timestamp(1399334400), 'base_1'), (113, 1, to_timestamp(1399334400), to_timestamp(1400025600), 'base_1'), (114, 1, to_timestamp(1400025600), to_timestamp(1400630400), 'base_1'), (115, 1, to_timestamp(1400630400), to_timestamp(1401321600), 'base_1'), (116, 1, to_timestamp(1401321600), to_timestamp(1402012800), 'base_1'), (117, 1, to_timestamp(1402012800), to_timestamp(1402790400), 'base_1'), (118, 1, to_timestamp(1402790400), to_timestamp(1403481600), 'base_1'), (119, 1, to_timestamp(1403481600), to_timestamp(1404086400), 'base_1'), (120, 1, to_timestamp(1404086400), to_timestamp(1404864000), 'base_1'), (121, 1, to_timestamp(1404864000), to_timestamp(1405555200), 'base_1'), (122, 1, to_timestamp(1405555200), to_timestamp(1406246400), 'base_1'), (123, 1, to_timestamp(1406246400), to_timestamp(1407024000), 'base_1'), (124, 1, to_timestamp(1407024000), to_timestamp(1407715200), 'base_1'), (125, 1, to_timestamp(1407715200), to_timestamp(1408492800), 'base_1'), (126, 1, to_timestamp(1408492800), to_timestamp(1409184000), 'base_1'), (127, 1, to_timestamp(1409184000), to_timestamp(1409875200), 'base_1'), (128, 1, to_timestamp(1409875200), NULL, 'base_1'), (129, 2, NULL, to_timestamp(1282089600), 'base_2'), (130, 2, to_timestamp(1282089600), to_timestamp(1285718400), 'base_2'), (131, 2, to_timestamp(1285718400), to_timestamp(1288742400), 'base_2'), (132, 2, to_timestamp(1288742400), to_timestamp(1292112000), 'base_2'), (133, 2, to_timestamp(1292112000), to_timestamp(1296259200), 'base_2'), (134, 2, to_timestamp(1296259200), to_timestamp(1299196800), 'base_2'), (135, 2, to_timestamp(1299196800), to_timestamp(1302134400), 'base_2'), (136, 2, to_timestamp(1302134400), to_timestamp(1304985600), 'base_2'), (137, 2, to_timestamp(1304985600), to_timestamp(1307836800), 'base_2'), (138, 2, to_timestamp(1307836800), to_timestamp(1311206400), 'base_2'), (139, 2, to_timestamp(1311206400), to_timestamp(1314057600), 'base_2'), (140, 2, to_timestamp(1314057600), to_timestamp(1317340800), 'base_2'), (141, 2, to_timestamp(1317340800), to_timestamp(1319760000), 'base_2'), (142, 2, to_timestamp(1319760000), to_timestamp(1322611200), 'base_2'), (143, 2, to_timestamp(1322611200), to_timestamp(1325721600), 'base_2'), (144, 2, to_timestamp(1325721600), to_timestamp(1328313600), 'base_2'), (145, 2, to_timestamp(1328313600), to_timestamp(1330041600), 'base_2'), (146, 2, to_timestamp(1330041600), to_timestamp(1332288000), 'base_2'), (147, 2, to_timestamp(1332288000), to_timestamp(1334620800), 'base_2'), (148, 2, to_timestamp(1334620800), to_timestamp(1336608000), 'base_2'), (149, 2, to_timestamp(1336608000), to_timestamp(1338681600), 'base_2'), (150, 2, to_timestamp(1338681600), to_timestamp(1340582400), 'base_2'), (151, 2, to_timestamp(1340582400), to_timestamp(1342483200), 'base_2'), (152, 2, to_timestamp(1342483200), to_timestamp(1344384000), 'base_2'), (153, 2, to_timestamp(1344384000), to_timestamp(1346112000), 'base_2'), (154, 2, to_timestamp(1346112000), to_timestamp(1348012800), 'base_2'), (155, 2, to_timestamp(1348012800), to_timestamp(1349740800), 'base_2'), (156, 2, to_timestamp(1349740800), to_timestamp(1351728000), 'base_2'), (157, 2, to_timestamp(1351728000), to_timestamp(1353888000), 'base_2'), (158, 2, to_timestamp(1353888000), to_timestamp(1355616000), 'base_2'), (159, 2, to_timestamp(1355616000), to_timestamp(1357948800), 'base_2'), (160, 2, to_timestamp(1357948800), to_timestamp(1360022400), 'base_2'), (161, 2, to_timestamp(1360022400), to_timestamp(1362009600), 'base_2'), (162, 2, to_timestamp(1362009600), to_timestamp(1364256000), 'base_2'), (163, 2, to_timestamp(1364256000), to_timestamp(1366070400), 'base_2'), (164, 2, to_timestamp(1366070400), to_timestamp(1367971200), 'base_2'), (165, 2, to_timestamp(1367971200), to_timestamp(1369699200), 'base_2'), (166, 2, to_timestamp(1369699200), to_timestamp(1371340800), 'base_2'), (167, 2, to_timestamp(1371340800), to_timestamp(1372896000), 'base_2'), (168, 2, to_timestamp(1372896000), to_timestamp(1374364800), 'base_2'), (169, 2, to_timestamp(1374364800), to_timestamp(1375833600), 'base_2'), (170, 2, to_timestamp(1375833600), to_timestamp(1377475200), 'base_2'), (171, 2, to_timestamp(1377475200), to_timestamp(1379289600), 'base_2'), (172, 2, to_timestamp(1379289600), to_timestamp(1380758400), 'base_2'), (173, 2, to_timestamp(1380758400), to_timestamp(1382572800), 'base_2'), (174, 2, to_timestamp(1382572800), to_timestamp(1384473600), 'base_2'), (175, 2, to_timestamp(1384473600), to_timestamp(1386201600), 'base_2'), (176, 2, to_timestamp(1386201600), to_timestamp(1388016000), 'base_2'), (177, 2, to_timestamp(1388016000), to_timestamp(1389744000), 'base_2'), (178, 2, to_timestamp(1389744000), to_timestamp(1390953600), 'base_2'), (179, 2, to_timestamp(1390953600), to_timestamp(1392076800), 'base_2'), (180, 2, to_timestamp(1392076800), to_timestamp(1393200000), 'base_2'), (181, 2, to_timestamp(1393200000), to_timestamp(1394409600), 'base_2'), (182, 2, to_timestamp(1394409600), to_timestamp(1395705600), 'base_2'), (183, 2, to_timestamp(1395705600), to_timestamp(1397174400), 'base_2'), (184, 2, to_timestamp(1397174400), to_timestamp(1398643200), 'base_2'), (185, 2, to_timestamp(1398643200), to_timestamp(1400025600), 'base_2'), (186, 2, to_timestamp(1400025600), to_timestamp(1401321600), 'base_2'), (187, 2, to_timestamp(1401321600), to_timestamp(1402790400), 'base_2'), (188, 2, to_timestamp(1402790400), to_timestamp(1404086400), 'base_2'), (189, 2, to_timestamp(1404086400), to_timestamp(1405555200), 'base_2'), (190, 2, to_timestamp(1405555200), to_timestamp(1407024000), 'base_2'), (191, 2, to_timestamp(1407024000), to_timestamp(1408492800), 'base_2'), (192, 2, to_timestamp(1408492800), to_timestamp(1409875200), 'base_2'), (193, 2, to_timestamp(1409875200), NULL, 'base_2'), (194, 4, NULL, to_timestamp(1285718400), 'base_4'), (195, 4, to_timestamp(1285718400), to_timestamp(1292112000), 'base_4'), (196, 4, to_timestamp(1292112000), to_timestamp(1299196800), 'base_4'), (197, 4, to_timestamp(1299196800), to_timestamp(1304985600), 'base_4'), (198, 4, to_timestamp(1304985600), to_timestamp(1311206400), 'base_4'), (199, 4, to_timestamp(1311206400), to_timestamp(1317340800), 'base_4'), (200, 4, to_timestamp(1317340800), to_timestamp(1322611200), 'base_4'), (201, 4, to_timestamp(1322611200), to_timestamp(1328313600), 'base_4'), (202, 4, to_timestamp(1328313600), to_timestamp(1332288000), 'base_4'), (203, 4, to_timestamp(1332288000), to_timestamp(1336608000), 'base_4'), (204, 4, to_timestamp(1336608000), to_timestamp(1340582400), 'base_4'), (205, 4, to_timestamp(1340582400), to_timestamp(1344384000), 'base_4'), (206, 4, to_timestamp(1344384000), to_timestamp(1348012800), 'base_4'), (207, 4, to_timestamp(1348012800), to_timestamp(1351728000), 'base_4'), (208, 4, to_timestamp(1351728000), to_timestamp(1355616000), 'base_4'), (209, 4, to_timestamp(1355616000), to_timestamp(1360022400), 'base_4'), (210, 4, to_timestamp(1360022400), to_timestamp(1364256000), 'base_4'), (211, 4, to_timestamp(1364256000), to_timestamp(1367971200), 'base_4'), (212, 4, to_timestamp(1367971200), to_timestamp(1371340800), 'base_4'), (213, 4, to_timestamp(1371340800), to_timestamp(1374364800), 'base_4'), (214, 4, to_timestamp(1374364800), to_timestamp(1377475200), 'base_4'), (215, 4, to_timestamp(1377475200), to_timestamp(1380758400), 'base_4'), (216, 4, to_timestamp(1380758400), to_timestamp(1384473600), 'base_4'), (217, 4, to_timestamp(1384473600), to_timestamp(1388016000), 'base_4'), (218, 4, to_timestamp(1388016000), to_timestamp(1390953600), 'base_4'), (219, 4, to_timestamp(1390953600), to_timestamp(1393200000), 'base_4'), (220, 4, to_timestamp(1393200000), to_timestamp(1395705600), 'base_4'), (221, 4, to_timestamp(1395705600), to_timestamp(1398643200), 'base_4'), (222, 4, to_timestamp(1398643200), to_timestamp(1401321600), 'base_4'), (223, 4, to_timestamp(1401321600), to_timestamp(1404086400), 'base_4'), (224, 4, to_timestamp(1404086400), to_timestamp(1407024000), 'base_4'), (225, 4, to_timestamp(1407024000), to_timestamp(1409875200), 'base_4'), (226, 4, to_timestamp(1409875200), NULL, 'base_4'), (227, 4, NULL, to_timestamp(1283904000), 'offset_4'), (228, 4, to_timestamp(1283904000), to_timestamp(1290211200), 'offset_4'), (229, 4, to_timestamp(1290211200), to_timestamp(1297814400), 'offset_4'), (230, 4, to_timestamp(1297814400), to_timestamp(1303689600), 'offset_4'), (231, 4, to_timestamp(1303689600), to_timestamp(1309478400), 'offset_4'), (232, 4, to_timestamp(1309478400), to_timestamp(1315872000), 'offset_4'), (233, 4, to_timestamp(1315872000), to_timestamp(1321315200), 'offset_4'), (234, 4, to_timestamp(1321315200), to_timestamp(1327104000), 'offset_4'), (235, 4, to_timestamp(1327104000), to_timestamp(1331251200), 'offset_4'), (236, 4, to_timestamp(1331251200), to_timestamp(1335744000), 'offset_4'), (237, 4, to_timestamp(1335744000), to_timestamp(1339632000), 'offset_4'), (238, 4, to_timestamp(1339632000), to_timestamp(1343347200), 'offset_4'), (239, 4, to_timestamp(1343347200), to_timestamp(1347062400), 'offset_4'), (240, 4, to_timestamp(1347062400), to_timestamp(1350691200), 'offset_4'), (241, 4, to_timestamp(1350691200), to_timestamp(1354752000), 'offset_4'), (242, 4, to_timestamp(1354752000), to_timestamp(1358985600), 'offset_4'), (243, 4, to_timestamp(1358985600), to_timestamp(1363132800), 'offset_4'), (244, 4, to_timestamp(1363132800), to_timestamp(1366934400), 'offset_4'), (245, 4, to_timestamp(1366934400), to_timestamp(1370563200), 'offset_4'), (246, 4, to_timestamp(1370563200), to_timestamp(1373587200), 'offset_4'), (247, 4, to_timestamp(1373587200), to_timestamp(1376611200), 'offset_4'), (248, 4, to_timestamp(1376611200), to_timestamp(1379980800), 'offset_4'), (249, 4, to_timestamp(1379980800), to_timestamp(1383609600), 'offset_4'), (250, 4, to_timestamp(1383609600), to_timestamp(1386979200), 'offset_4'), (251, 4, to_timestamp(1386979200), to_timestamp(1390435200), 'offset_4'), (252, 4, to_timestamp(1390435200), to_timestamp(1392595200), 'offset_4'), (253, 4, to_timestamp(1392595200), to_timestamp(1395014400), 'offset_4'), (254, 4, to_timestamp(1395014400), to_timestamp(1397952000), 'offset_4'), (255, 4, to_timestamp(1397952000), to_timestamp(1400630400), 'offset_4'), (256, 4, to_timestamp(1400630400), to_timestamp(1403481600), 'offset_4'), (257, 4, to_timestamp(1403481600), to_timestamp(1406246400), 'offset_4'), (258, 4, to_timestamp(1406246400), to_timestamp(1409184000), 'offset_4'), (259, 4, to_timestamp(1409184000), NULL, 'offset_4'), (260, 8, NULL, to_timestamp(1292112000), 'base_8'), (261, 8, to_timestamp(1292112000), to_timestamp(1304985600), 'base_8'), (262, 8, to_timestamp(1304985600), to_timestamp(1317340800), 'base_8'), (263, 8, to_timestamp(1317340800), to_timestamp(1328313600), 'base_8'), (264, 8, to_timestamp(1328313600), to_timestamp(1336608000), 'base_8'), (265, 8, to_timestamp(1336608000), to_timestamp(1344384000), 'base_8'), (266, 8, to_timestamp(1344384000), to_timestamp(1351728000), 'base_8'), (267, 8, to_timestamp(1351728000), to_timestamp(1360022400), 'base_8'), (268, 8, to_timestamp(1360022400), to_timestamp(1367971200), 'base_8'), (269, 8, to_timestamp(1367971200), to_timestamp(1374364800), 'base_8'), (270, 8, to_timestamp(1374364800), to_timestamp(1380758400), 'base_8'), (271, 8, to_timestamp(1380758400), to_timestamp(1388016000), 'base_8'), (272, 8, to_timestamp(1388016000), to_timestamp(1393200000), 'base_8'), (273, 8, to_timestamp(1393200000), to_timestamp(1398643200), 'base_8'), (274, 8, to_timestamp(1398643200), to_timestamp(1404086400), 'base_8'), (275, 8, to_timestamp(1404086400), to_timestamp(1409875200), 'base_8'), (276, 8, to_timestamp(1409875200), NULL, 'base_8'), (277, 8, NULL, to_timestamp(1287360000), 'offset_8'), (278, 8, to_timestamp(1287360000), to_timestamp(1300579200), 'offset_8'), (279, 8, to_timestamp(1300579200), to_timestamp(1312848000), 'offset_8'), (280, 8, to_timestamp(1312848000), to_timestamp(1323993600), 'offset_8'), (281, 8, to_timestamp(1323993600), to_timestamp(1333497600), 'offset_8'), (282, 8, to_timestamp(1333497600), to_timestamp(1341532800), 'offset_8'), (283, 8, to_timestamp(1341532800), to_timestamp(1349049600), 'offset_8'), (284, 8, to_timestamp(1349049600), to_timestamp(1356825600), 'offset_8'), (285, 8, to_timestamp(1356825600), to_timestamp(1365292800), 'offset_8'), (286, 8, to_timestamp(1365292800), to_timestamp(1372204800), 'offset_8'), (287, 8, to_timestamp(1372204800), to_timestamp(1378252800), 'offset_8'), (288, 8, to_timestamp(1378252800), to_timestamp(1385424000), 'offset_8'), (289, 8, to_timestamp(1385424000), to_timestamp(1391472000), 'offset_8'), (290, 8, to_timestamp(1391472000), to_timestamp(1396483200), 'offset_8'), (291, 8, to_timestamp(1396483200), to_timestamp(1402012800), 'offset_8'), (292, 8, to_timestamp(1402012800), to_timestamp(1407715200), 'offset_8'), (293, 8, to_timestamp(1407715200), NULL, 'offset_8'), (294, 16, NULL, to_timestamp(1304985600), 'base_16'), (295, 16, to_timestamp(1304985600), to_timestamp(1328313600), 'base_16'), (296, 16, to_timestamp(1328313600), to_timestamp(1344384000), 'base_16'), (297, 16, to_timestamp(1344384000), to_timestamp(1360022400), 'base_16'), (298, 16, to_timestamp(1360022400), to_timestamp(1374364800), 'base_16'), (299, 16, to_timestamp(1374364800), to_timestamp(1388016000), 'base_16'), (300, 16, to_timestamp(1388016000), to_timestamp(1398643200), 'base_16'), (301, 16, to_timestamp(1398643200), to_timestamp(1409875200), 'base_16'), (302, 16, to_timestamp(1409875200), NULL, 'base_16'), (303, 16, NULL, to_timestamp(1294358400), 'offset_16'), (304, 16, to_timestamp(1294358400), to_timestamp(1318723200), 'offset_16'), (305, 16, to_timestamp(1318723200), to_timestamp(1337731200), 'offset_16'), (306, 16, to_timestamp(1337731200), to_timestamp(1352764800), 'offset_16'), (307, 16, to_timestamp(1352764800), to_timestamp(1368921600), 'offset_16'), (308, 16, to_timestamp(1368921600), to_timestamp(1381622400), 'offset_16'), (309, 16, to_timestamp(1381622400), to_timestamp(1393804800), 'offset_16'), (310, 16, to_timestamp(1393804800), to_timestamp(1404864000), 'offset_16'), (311, 16, to_timestamp(1404864000), NULL, 'offset_16'), (312, 32, NULL, to_timestamp(1328313600), 'base_32'), (313, 32, to_timestamp(1328313600), to_timestamp(1360022400), 'base_32'), (314, 32, to_timestamp(1360022400), to_timestamp(1388016000), 'base_32'), (315, 32, to_timestamp(1388016000), to_timestamp(1409875200), 'base_32'), (316, 32, to_timestamp(1409875200), NULL, 'base_32'), (317, 32, NULL, to_timestamp(1306281600), 'offset_32'), (318, 32, to_timestamp(1306281600), to_timestamp(1345161600), 'offset_32'), (319, 32, to_timestamp(1345161600), to_timestamp(1375056000), 'offset_32'), (320, 32, to_timestamp(1375056000), to_timestamp(1399334400), 'offset_32'), (321, 32, to_timestamp(1399334400), NULL, 'offset_32'), (322, 64, NULL, to_timestamp(1360022400), 'base_64'), (323, 64, to_timestamp(1360022400), to_timestamp(1409875200), 'base_64'), (324, 64, to_timestamp(1409875200), NULL, 'base_64'), (325, 64, NULL, to_timestamp(1329177600), 'offset_64'), (326, 64, to_timestamp(1329177600), to_timestamp(1389052800), 'offset_64'), (327, 64, to_timestamp(1389052800), NULL, 'offset_64'), (328, 128, NULL, to_timestamp(1409875200), 'base_128'), (329, 128, to_timestamp(1409875200), NULL, 'base_128'), (330, 128, NULL, to_timestamp(1361145600), 'offset_128'), (331, 128, to_timestamp(1361145600), NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS VOTES_BOUNTYAMOUNT_histogram;
CREATE TABLE VOTES_BOUNTYAMOUNT_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO VOTES_BOUNTYAMOUNT_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 0, 'base_1'), (1, 1, 0, 25, 'base_1'), (2, 1, 25, 50, 'base_1'), (3, 1, 50, 75, 'base_1'), (4, 1, 75, 75, 'base_1'), (5, 1, 75, 100, 'base_1'), (6, 1, 100, 125, 'base_1'), (7, 1, 125, 150, 'base_1'), (8, 1, 150, 150, 'base_1'), (9, 1, 150, 200, 'base_1'), (10, 1, 200, 250, 'base_1'), (11, 1, 250, 300, 'base_1'), (12, 1, 300, 300, 'base_1'), (13, 1, 300, 350, 'base_1'), (14, 1, 350, 400, 'base_1'), (15, 1, 400, NULL, 'base_1'), (16, 2, NULL, 25, 'base_2'), (17, 2, 25, 75, 'base_2'), (18, 2, 75, 100, 'base_2'), (19, 2, 100, 150, 'base_2'), (20, 2, 150, 200, 'base_2'), (21, 2, 200, 300, 'base_2'), (22, 2, 300, 350, 'base_2'), (23, 2, 350, NULL, 'base_2'), (24, 4, NULL, 75, 'base_4'), (25, 4, 75, 150, 'base_4'), (26, 4, 150, 300, 'base_4'), (27, 4, 300, NULL, 'base_4'), (28, 4, NULL, 50, 'offset_4'), (29, 4, 50, 125, 'offset_4'), (30, 4, 125, 250, 'offset_4'), (31, 4, 250, 400, 'offset_4'), (32, 4, 400, NULL, 'offset_4'), (33, 8, NULL, 150, 'base_8'), (34, 8, 150, NULL, 'base_8'), (35, 8, NULL, 75, 'offset_8'), (36, 8, 75, 300, 'offset_8'), (37, 8, 300, NULL, 'offset_8'), (38, 16, NULL, NULL, 'base_16'), (39, 16, NULL, 150, 'offset_16'), (40, 16, 150, NULL, 'offset_16'), (41, 32, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS BADGES_DATE_histogram;
CREATE TABLE BADGES_DATE_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound DATETIME,
    upper_bound DATETIME,
    bucket_type TEXT
);


INSERT INTO BADGES_DATE_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, to_timestamp(1280175522), 'base_1'), (1, 1, to_timestamp(1280175522), to_timestamp(1281352773), 'base_1'), (2, 1, to_timestamp(1281352773), to_timestamp(1284122058), 'base_1'), (3, 1, to_timestamp(1284122058), to_timestamp(1287428179), 'base_1'), (4, 1, to_timestamp(1287428179), to_timestamp(1289935215), 'base_1'), (5, 1, to_timestamp(1289935215), to_timestamp(1292299378), 'base_1'), (6, 1, to_timestamp(1292299378), to_timestamp(1295705173), 'base_1'), (7, 1, to_timestamp(1295705173), to_timestamp(1298004782), 'base_1'), (8, 1, to_timestamp(1298004782), to_timestamp(1300211108), 'base_1'), (9, 1, to_timestamp(1300211108), to_timestamp(1302734163), 'base_1'), (10, 1, to_timestamp(1302734163), to_timestamp(1305018484), 'base_1'), (11, 1, to_timestamp(1305018484), to_timestamp(1307383375), 'base_1'), (12, 1, to_timestamp(1307383375), to_timestamp(1309892547), 'base_1'), (13, 1, to_timestamp(1309892547), to_timestamp(1311784066), 'base_1'), (14, 1, to_timestamp(1311784066), to_timestamp(1313579178), 'base_1'), (15, 1, to_timestamp(1313579178), to_timestamp(1315589046), 'base_1'), (16, 1, to_timestamp(1315589046), to_timestamp(1317672998), 'base_1'), (17, 1, to_timestamp(1317672998), to_timestamp(1319228203), 'base_1'), (18, 1, to_timestamp(1319228203), to_timestamp(1320970404), 'base_1'), (19, 1, to_timestamp(1320970404), to_timestamp(1322615293), 'base_1'), (20, 1, to_timestamp(1322615293), to_timestamp(1324335724), 'base_1'), (21, 1, to_timestamp(1324335724), to_timestamp(1326203799), 'base_1'), (22, 1, to_timestamp(1326203799), to_timestamp(1327811438), 'base_1'), (23, 1, to_timestamp(1327811438), to_timestamp(1329211116), 'base_1'), (24, 1, to_timestamp(1329211116), to_timestamp(1330400093), 'base_1'), (25, 1, to_timestamp(1330400093), to_timestamp(1331734293), 'base_1'), (26, 1, to_timestamp(1331734293), to_timestamp(1333019744), 'base_1'), (27, 1, to_timestamp(1333019744), to_timestamp(1334255889), 'base_1'), (28, 1, to_timestamp(1334255889), to_timestamp(1335534730), 'base_1'), (29, 1, to_timestamp(1335534730), to_timestamp(1336660531), 'base_1'), (30, 1, to_timestamp(1336660531), to_timestamp(1338101680), 'base_1'), (31, 1, to_timestamp(1338101680), to_timestamp(1339196452), 'base_1'), (32, 1, to_timestamp(1339196452), to_timestamp(1340244244), 'base_1'), (33, 1, to_timestamp(1340244244), to_timestamp(1341532057), 'base_1'), (34, 1, to_timestamp(1341532057), to_timestamp(1342733663), 'base_1'), (35, 1, to_timestamp(1342733663), to_timestamp(1343924647), 'base_1'), (36, 1, to_timestamp(1343924647), to_timestamp(1345040099), 'base_1'), (37, 1, to_timestamp(1345040099), to_timestamp(1346099617), 'base_1'), (38, 1, to_timestamp(1346099617), to_timestamp(1347306073), 'base_1'), (39, 1, to_timestamp(1347306073), to_timestamp(1348269803), 'base_1'), (40, 1, to_timestamp(1348269803), to_timestamp(1349367230), 'base_1'), (41, 1, to_timestamp(1349367230), to_timestamp(1350351076), 'base_1'), (42, 1, to_timestamp(1350351076), to_timestamp(1351248417), 'base_1'), (43, 1, to_timestamp(1351248417), to_timestamp(1352169702), 'base_1'), (44, 1, to_timestamp(1352169702), to_timestamp(1353080733), 'base_1'), (45, 1, to_timestamp(1353080733), to_timestamp(1354039541), 'base_1'), (46, 1, to_timestamp(1354039541), to_timestamp(1354894242), 'base_1'), (47, 1, to_timestamp(1354894242), to_timestamp(1355789564), 'base_1'), (48, 1, to_timestamp(1355789564), to_timestamp(1357283646), 'base_1'), (49, 1, to_timestamp(1357283646), to_timestamp(1358237527), 'base_1'), (50, 1, to_timestamp(1358237527), to_timestamp(1359099295), 'base_1'), (51, 1, to_timestamp(1359099295), to_timestamp(1359982544), 'base_1'), (52, 1, to_timestamp(1359982544), to_timestamp(1360884813), 'base_1'), (53, 1, to_timestamp(1360884813), to_timestamp(1361794456), 'base_1'), (54, 1, to_timestamp(1361794456), to_timestamp(1362609884), 'base_1'), (55, 1, to_timestamp(1362609884), to_timestamp(1363446290), 'base_1'), (56, 1, to_timestamp(1363446290), to_timestamp(1364282603), 'base_1'), (57, 1, to_timestamp(1364282603), to_timestamp(1365097948), 'base_1'), (58, 1, to_timestamp(1365097948), to_timestamp(1365765281), 'base_1'), (59, 1, to_timestamp(1365765281), to_timestamp(1366624476), 'base_1'), (60, 1, to_timestamp(1366624476), to_timestamp(1367314853), 'base_1'), (61, 1, to_timestamp(1367314853), to_timestamp(1368062945), 'base_1'), (62, 1, to_timestamp(1368062945), to_timestamp(1368869120), 'base_1'), (63, 1, to_timestamp(1368869120), to_timestamp(1369744725), 'base_1'), (64, 1, to_timestamp(1369744725), to_timestamp(1370527319), 'base_1'), (65, 1, to_timestamp(1370527319), to_timestamp(1371326462), 'base_1'), (66, 1, to_timestamp(1371326462), to_timestamp(1372227983), 'base_1'), (67, 1, to_timestamp(1372227983), to_timestamp(1373027294), 'base_1'), (68, 1, to_timestamp(1373027294), to_timestamp(1373842441), 'base_1'), (69, 1, to_timestamp(1373842441), to_timestamp(1374468049), 'base_1'), (70, 1, to_timestamp(1374468049), to_timestamp(1375176562), 'base_1'), (71, 1, to_timestamp(1375176562), to_timestamp(1376036382), 'base_1'), (72, 1, to_timestamp(1376036382), to_timestamp(1376839667), 'base_1'), (73, 1, to_timestamp(1376839667), to_timestamp(1377648444), 'base_1'), (74, 1, to_timestamp(1377648444), to_timestamp(1378462566), 'base_1'), (75, 1, to_timestamp(1378462566), to_timestamp(1379350066), 'base_1'), (76, 1, to_timestamp(1379350066), to_timestamp(1379871647), 'base_1'), (77, 1, to_timestamp(1379871647), to_timestamp(1380194909), 'base_1'), (78, 1, to_timestamp(1380194909), to_timestamp(1380856370), 'base_1'), (79, 1, to_timestamp(1380856370), to_timestamp(1381606374), 'base_1'), (80, 1, to_timestamp(1381606374), to_timestamp(1382439630), 'base_1'), (81, 1, to_timestamp(1382439630), to_timestamp(1383306716), 'base_1'), (82, 1, to_timestamp(1383306716), to_timestamp(1384170796), 'base_1'), (83, 1, to_timestamp(1384170796), to_timestamp(1384920840), 'base_1'), (84, 1, to_timestamp(1384920840), to_timestamp(1385627964), 'base_1'), (85, 1, to_timestamp(1385627964), to_timestamp(1386325621), 'base_1'), (86, 1, to_timestamp(1386325621), to_timestamp(1386955892), 'base_1'), (87, 1, to_timestamp(1386955892), to_timestamp(1387745730), 'base_1'), (88, 1, to_timestamp(1387745730), to_timestamp(1388845719), 'base_1'), (89, 1, to_timestamp(1388845719), to_timestamp(1389557776), 'base_1'), (90, 1, to_timestamp(1389557776), to_timestamp(1390252595), 'base_1'), (91, 1, to_timestamp(1390252595), to_timestamp(1390779737), 'base_1'), (92, 1, to_timestamp(1390779737), to_timestamp(1391297076), 'base_1'), (93, 1, to_timestamp(1391297076), to_timestamp(1391797523), 'base_1'), (94, 1, to_timestamp(1391797523), to_timestamp(1392239283), 'base_1'), (95, 1, to_timestamp(1392239283), to_timestamp(1392835298), 'base_1'), (96, 1, to_timestamp(1392835298), to_timestamp(1393383703), 'base_1'), (97, 1, to_timestamp(1393383703), to_timestamp(1393931432), 'base_1'), (98, 1, to_timestamp(1393931432), to_timestamp(1394457633), 'base_1'), (99, 1, to_timestamp(1394457633), to_timestamp(1395019369), 'base_1'), (100, 1, to_timestamp(1395019369), to_timestamp(1395584991), 'base_1'), (101, 1, to_timestamp(1395584991), to_timestamp(1396219129), 'base_1'), (102, 1, to_timestamp(1396219129), to_timestamp(1396806790), 'base_1'), (103, 1, to_timestamp(1396806790), to_timestamp(1397357848), 'base_1'), (104, 1, to_timestamp(1397357848), to_timestamp(1397883769), 'base_1'), (105, 1, to_timestamp(1397883769), to_timestamp(1398434002), 'base_1'), (106, 1, to_timestamp(1398434002), to_timestamp(1398980102), 'base_1'), (107, 1, to_timestamp(1398980102), to_timestamp(1399553711), 'base_1'), (108, 1, to_timestamp(1399553711), to_timestamp(1400109650), 'base_1'), (109, 1, to_timestamp(1400109650), to_timestamp(1400687146), 'base_1'), (110, 1, to_timestamp(1400687146), to_timestamp(1401277025), 'base_1'), (111, 1, to_timestamp(1401277025), to_timestamp(1401889808), 'base_1'), (112, 1, to_timestamp(1401889808), to_timestamp(1402429869), 'base_1'), (113, 1, to_timestamp(1402429869), to_timestamp(1402994507), 'base_1'), (114, 1, to_timestamp(1402994507), to_timestamp(1403546016), 'base_1'), (115, 1, to_timestamp(1403546016), to_timestamp(1404108459), 'base_1'), (116, 1, to_timestamp(1404108459), to_timestamp(1404317134), 'base_1'), (117, 1, to_timestamp(1404317134), to_timestamp(1404382578), 'base_1'), (118, 1, to_timestamp(1404382578), to_timestamp(1404988592), 'base_1'), (119, 1, to_timestamp(1404988592), to_timestamp(1405596477), 'base_1'), (120, 1, to_timestamp(1405596477), to_timestamp(1406119748), 'base_1'), (121, 1, to_timestamp(1406119748), to_timestamp(1406645147), 'base_1'), (122, 1, to_timestamp(1406645147), to_timestamp(1407203008), 'base_1'), (123, 1, to_timestamp(1407203008), to_timestamp(1407758803), 'base_1'), (124, 1, to_timestamp(1407758803), to_timestamp(1408296657), 'base_1'), (125, 1, to_timestamp(1408296657), to_timestamp(1408894694), 'base_1'), (126, 1, to_timestamp(1408894694), to_timestamp(1409470232), 'base_1'), (127, 1, to_timestamp(1409470232), to_timestamp(1410076838), 'base_1'), (128, 1, to_timestamp(1410076838), NULL, 'base_1'), (129, 2, NULL, to_timestamp(1281352773), 'base_2'), (130, 2, to_timestamp(1281352773), to_timestamp(1287428179), 'base_2'), (131, 2, to_timestamp(1287428179), to_timestamp(1292299378), 'base_2'), (132, 2, to_timestamp(1292299378), to_timestamp(1298004782), 'base_2'), (133, 2, to_timestamp(1298004782), to_timestamp(1302734163), 'base_2'), (134, 2, to_timestamp(1302734163), to_timestamp(1307383375), 'base_2'), (135, 2, to_timestamp(1307383375), to_timestamp(1311784066), 'base_2'), (136, 2, to_timestamp(1311784066), to_timestamp(1315589046), 'base_2'), (137, 2, to_timestamp(1315589046), to_timestamp(1319228203), 'base_2'), (138, 2, to_timestamp(1319228203), to_timestamp(1322615293), 'base_2'), (139, 2, to_timestamp(1322615293), to_timestamp(1326203799), 'base_2'), (140, 2, to_timestamp(1326203799), to_timestamp(1329211116), 'base_2'), (141, 2, to_timestamp(1329211116), to_timestamp(1331734293), 'base_2'), (142, 2, to_timestamp(1331734293), to_timestamp(1334255889), 'base_2'), (143, 2, to_timestamp(1334255889), to_timestamp(1336660531), 'base_2'), (144, 2, to_timestamp(1336660531), to_timestamp(1339196452), 'base_2'), (145, 2, to_timestamp(1339196452), to_timestamp(1341532057), 'base_2'), (146, 2, to_timestamp(1341532057), to_timestamp(1343924647), 'base_2'), (147, 2, to_timestamp(1343924647), to_timestamp(1346099617), 'base_2'), (148, 2, to_timestamp(1346099617), to_timestamp(1348269803), 'base_2'), (149, 2, to_timestamp(1348269803), to_timestamp(1350351076), 'base_2'), (150, 2, to_timestamp(1350351076), to_timestamp(1352169702), 'base_2'), (151, 2, to_timestamp(1352169702), to_timestamp(1354039541), 'base_2'), (152, 2, to_timestamp(1354039541), to_timestamp(1355789564), 'base_2'), (153, 2, to_timestamp(1355789564), to_timestamp(1358237527), 'base_2'), (154, 2, to_timestamp(1358237527), to_timestamp(1359982544), 'base_2'), (155, 2, to_timestamp(1359982544), to_timestamp(1361794456), 'base_2'), (156, 2, to_timestamp(1361794456), to_timestamp(1363446290), 'base_2'), (157, 2, to_timestamp(1363446290), to_timestamp(1365097948), 'base_2'), (158, 2, to_timestamp(1365097948), to_timestamp(1366624476), 'base_2'), (159, 2, to_timestamp(1366624476), to_timestamp(1368062945), 'base_2'), (160, 2, to_timestamp(1368062945), to_timestamp(1369744725), 'base_2'), (161, 2, to_timestamp(1369744725), to_timestamp(1371326462), 'base_2'), (162, 2, to_timestamp(1371326462), to_timestamp(1373027294), 'base_2'), (163, 2, to_timestamp(1373027294), to_timestamp(1374468049), 'base_2'), (164, 2, to_timestamp(1374468049), to_timestamp(1376036382), 'base_2'), (165, 2, to_timestamp(1376036382), to_timestamp(1377648444), 'base_2'), (166, 2, to_timestamp(1377648444), to_timestamp(1379350066), 'base_2'), (167, 2, to_timestamp(1379350066), to_timestamp(1380194909), 'base_2'), (168, 2, to_timestamp(1380194909), to_timestamp(1381606374), 'base_2'), (169, 2, to_timestamp(1381606374), to_timestamp(1383306716), 'base_2'), (170, 2, to_timestamp(1383306716), to_timestamp(1384920840), 'base_2'), (171, 2, to_timestamp(1384920840), to_timestamp(1386325621), 'base_2'), (172, 2, to_timestamp(1386325621), to_timestamp(1387745730), 'base_2'), (173, 2, to_timestamp(1387745730), to_timestamp(1389557776), 'base_2'), (174, 2, to_timestamp(1389557776), to_timestamp(1390779737), 'base_2'), (175, 2, to_timestamp(1390779737), to_timestamp(1391797523), 'base_2'), (176, 2, to_timestamp(1391797523), to_timestamp(1392835298), 'base_2'), (177, 2, to_timestamp(1392835298), to_timestamp(1393931432), 'base_2'), (178, 2, to_timestamp(1393931432), to_timestamp(1395019369), 'base_2'), (179, 2, to_timestamp(1395019369), to_timestamp(1396219129), 'base_2'), (180, 2, to_timestamp(1396219129), to_timestamp(1397357848), 'base_2'), (181, 2, to_timestamp(1397357848), to_timestamp(1398434002), 'base_2'), (182, 2, to_timestamp(1398434002), to_timestamp(1399553711), 'base_2'), (183, 2, to_timestamp(1399553711), to_timestamp(1400687146), 'base_2'), (184, 2, to_timestamp(1400687146), to_timestamp(1401889808), 'base_2'), (185, 2, to_timestamp(1401889808), to_timestamp(1402994507), 'base_2'), (186, 2, to_timestamp(1402994507), to_timestamp(1404108459), 'base_2'), (187, 2, to_timestamp(1404108459), to_timestamp(1404382578), 'base_2'), (188, 2, to_timestamp(1404382578), to_timestamp(1405596477), 'base_2'), (189, 2, to_timestamp(1405596477), to_timestamp(1406645147), 'base_2'), (190, 2, to_timestamp(1406645147), to_timestamp(1407758803), 'base_2'), (191, 2, to_timestamp(1407758803), to_timestamp(1408894694), 'base_2'), (192, 2, to_timestamp(1408894694), to_timestamp(1410076838), 'base_2'), (193, 2, to_timestamp(1410076838), NULL, 'base_2'), (194, 4, NULL, to_timestamp(1287428179), 'base_4'), (195, 4, to_timestamp(1287428179), to_timestamp(1298004782), 'base_4'), (196, 4, to_timestamp(1298004782), to_timestamp(1307383375), 'base_4'), (197, 4, to_timestamp(1307383375), to_timestamp(1315589046), 'base_4'), (198, 4, to_timestamp(1315589046), to_timestamp(1322615293), 'base_4'), (199, 4, to_timestamp(1322615293), to_timestamp(1329211116), 'base_4'), (200, 4, to_timestamp(1329211116), to_timestamp(1334255889), 'base_4'), (201, 4, to_timestamp(1334255889), to_timestamp(1339196452), 'base_4'), (202, 4, to_timestamp(1339196452), to_timestamp(1343924647), 'base_4'), (203, 4, to_timestamp(1343924647), to_timestamp(1348269803), 'base_4'), (204, 4, to_timestamp(1348269803), to_timestamp(1352169702), 'base_4'), (205, 4, to_timestamp(1352169702), to_timestamp(1355789564), 'base_4'), (206, 4, to_timestamp(1355789564), to_timestamp(1359982544), 'base_4'), (207, 4, to_timestamp(1359982544), to_timestamp(1363446290), 'base_4'), (208, 4, to_timestamp(1363446290), to_timestamp(1366624476), 'base_4'), (209, 4, to_timestamp(1366624476), to_timestamp(1369744725), 'base_4'), (210, 4, to_timestamp(1369744725), to_timestamp(1373027294), 'base_4'), (211, 4, to_timestamp(1373027294), to_timestamp(1376036382), 'base_4'), (212, 4, to_timestamp(1376036382), to_timestamp(1379350066), 'base_4'), (213, 4, to_timestamp(1379350066), to_timestamp(1381606374), 'base_4'), (214, 4, to_timestamp(1381606374), to_timestamp(1384920840), 'base_4'), (215, 4, to_timestamp(1384920840), to_timestamp(1387745730), 'base_4'), (216, 4, to_timestamp(1387745730), to_timestamp(1390779737), 'base_4'), (217, 4, to_timestamp(1390779737), to_timestamp(1392835298), 'base_4'), (218, 4, to_timestamp(1392835298), to_timestamp(1395019369), 'base_4'), (219, 4, to_timestamp(1395019369), to_timestamp(1397357848), 'base_4'), (220, 4, to_timestamp(1397357848), to_timestamp(1399553711), 'base_4'), (221, 4, to_timestamp(1399553711), to_timestamp(1401889808), 'base_4'), (222, 4, to_timestamp(1401889808), to_timestamp(1404108459), 'base_4'), (223, 4, to_timestamp(1404108459), to_timestamp(1405596477), 'base_4'), (224, 4, to_timestamp(1405596477), to_timestamp(1407758803), 'base_4'), (225, 4, to_timestamp(1407758803), to_timestamp(1410076838), 'base_4'), (226, 4, to_timestamp(1410076838), NULL, 'base_4'), (227, 4, NULL, to_timestamp(1284122058), 'offset_4'), (228, 4, to_timestamp(1284122058), to_timestamp(1295705173), 'offset_4'), (229, 4, to_timestamp(1295705173), to_timestamp(1305018484), 'offset_4'), (230, 4, to_timestamp(1305018484), to_timestamp(1313579178), 'offset_4'), (231, 4, to_timestamp(1313579178), to_timestamp(1320970404), 'offset_4'), (232, 4, to_timestamp(1320970404), to_timestamp(1327811438), 'offset_4'), (233, 4, to_timestamp(1327811438), to_timestamp(1333019744), 'offset_4'), (234, 4, to_timestamp(1333019744), to_timestamp(1338101680), 'offset_4'), (235, 4, to_timestamp(1338101680), to_timestamp(1342733663), 'offset_4'), (236, 4, to_timestamp(1342733663), to_timestamp(1347306073), 'offset_4'), (237, 4, to_timestamp(1347306073), to_timestamp(1351248417), 'offset_4'), (238, 4, to_timestamp(1351248417), to_timestamp(1354894242), 'offset_4'), (239, 4, to_timestamp(1354894242), to_timestamp(1359099295), 'offset_4'), (240, 4, to_timestamp(1359099295), to_timestamp(1362609884), 'offset_4'), (241, 4, to_timestamp(1362609884), to_timestamp(1365765281), 'offset_4'), (242, 4, to_timestamp(1365765281), to_timestamp(1368869120), 'offset_4'), (243, 4, to_timestamp(1368869120), to_timestamp(1372227983), 'offset_4'), (244, 4, to_timestamp(1372227983), to_timestamp(1375176562), 'offset_4'), (245, 4, to_timestamp(1375176562), to_timestamp(1378462566), 'offset_4'), (246, 4, to_timestamp(1378462566), to_timestamp(1380856370), 'offset_4'), (247, 4, to_timestamp(1380856370), to_timestamp(1384170796), 'offset_4'), (248, 4, to_timestamp(1384170796), to_timestamp(1386955892), 'offset_4'), (249, 4, to_timestamp(1386955892), to_timestamp(1390252595), 'offset_4'), (250, 4, to_timestamp(1390252595), to_timestamp(1392239283), 'offset_4'), (251, 4, to_timestamp(1392239283), to_timestamp(1394457633), 'offset_4'), (252, 4, to_timestamp(1394457633), to_timestamp(1396806790), 'offset_4'), (253, 4, to_timestamp(1396806790), to_timestamp(1398980102), 'offset_4'), (254, 4, to_timestamp(1398980102), to_timestamp(1401277025), 'offset_4'), (255, 4, to_timestamp(1401277025), to_timestamp(1403546016), 'offset_4'), (256, 4, to_timestamp(1403546016), to_timestamp(1404988592), 'offset_4'), (257, 4, to_timestamp(1404988592), to_timestamp(1407203008), 'offset_4'), (258, 4, to_timestamp(1407203008), to_timestamp(1409470232), 'offset_4'), (259, 4, to_timestamp(1409470232), NULL, 'offset_4'), (260, 8, NULL, to_timestamp(1298004782), 'base_8'), (261, 8, to_timestamp(1298004782), to_timestamp(1315589046), 'base_8'), (262, 8, to_timestamp(1315589046), to_timestamp(1329211116), 'base_8'), (263, 8, to_timestamp(1329211116), to_timestamp(1339196452), 'base_8'), (264, 8, to_timestamp(1339196452), to_timestamp(1348269803), 'base_8'), (265, 8, to_timestamp(1348269803), to_timestamp(1355789564), 'base_8'), (266, 8, to_timestamp(1355789564), to_timestamp(1363446290), 'base_8'), (267, 8, to_timestamp(1363446290), to_timestamp(1369744725), 'base_8'), (268, 8, to_timestamp(1369744725), to_timestamp(1376036382), 'base_8'), (269, 8, to_timestamp(1376036382), to_timestamp(1381606374), 'base_8'), (270, 8, to_timestamp(1381606374), to_timestamp(1387745730), 'base_8'), (271, 8, to_timestamp(1387745730), to_timestamp(1392835298), 'base_8'), (272, 8, to_timestamp(1392835298), to_timestamp(1397357848), 'base_8'), (273, 8, to_timestamp(1397357848), to_timestamp(1401889808), 'base_8'), (274, 8, to_timestamp(1401889808), to_timestamp(1405596477), 'base_8'), (275, 8, to_timestamp(1405596477), to_timestamp(1410076838), 'base_8'), (276, 8, to_timestamp(1410076838), NULL, 'base_8'), (277, 8, NULL, to_timestamp(1289935215), 'offset_8'), (278, 8, to_timestamp(1289935215), to_timestamp(1309892547), 'offset_8'), (279, 8, to_timestamp(1309892547), to_timestamp(1324335724), 'offset_8'), (280, 8, to_timestamp(1324335724), to_timestamp(1335534730), 'offset_8'), (281, 8, to_timestamp(1335534730), to_timestamp(1345040099), 'offset_8'), (282, 8, to_timestamp(1345040099), to_timestamp(1353080733), 'offset_8'), (283, 8, to_timestamp(1353080733), to_timestamp(1360884813), 'offset_8'), (284, 8, to_timestamp(1360884813), to_timestamp(1367314853), 'offset_8'), (285, 8, to_timestamp(1367314853), to_timestamp(1373842441), 'offset_8'), (286, 8, to_timestamp(1373842441), to_timestamp(1379871647), 'offset_8'), (287, 8, to_timestamp(1379871647), to_timestamp(1385627964), 'offset_8'), (288, 8, to_timestamp(1385627964), to_timestamp(1391297076), 'offset_8'), (289, 8, to_timestamp(1391297076), to_timestamp(1395584991), 'offset_8'), (290, 8, to_timestamp(1395584991), to_timestamp(1400109650), 'offset_8'), (291, 8, to_timestamp(1400109650), to_timestamp(1404317134), 'offset_8'), (292, 8, to_timestamp(1404317134), to_timestamp(1408296657), 'offset_8'), (293, 8, to_timestamp(1408296657), NULL, 'offset_8'), (294, 16, NULL, to_timestamp(1315589046), 'base_16'), (295, 16, to_timestamp(1315589046), to_timestamp(1339196452), 'base_16'), (296, 16, to_timestamp(1339196452), to_timestamp(1355789564), 'base_16'), (297, 16, to_timestamp(1355789564), to_timestamp(1369744725), 'base_16'), (298, 16, to_timestamp(1369744725), to_timestamp(1381606374), 'base_16'), (299, 16, to_timestamp(1381606374), to_timestamp(1392835298), 'base_16'), (300, 16, to_timestamp(1392835298), to_timestamp(1401889808), 'base_16'), (301, 16, to_timestamp(1401889808), to_timestamp(1410076838), 'base_16'), (302, 16, to_timestamp(1410076838), NULL, 'base_16'), (303, 16, NULL, to_timestamp(1300211108), 'offset_16'), (304, 16, to_timestamp(1300211108), to_timestamp(1330400093), 'offset_16'), (305, 16, to_timestamp(1330400093), to_timestamp(1349367230), 'offset_16'), (306, 16, to_timestamp(1349367230), to_timestamp(1364282603), 'offset_16'), (307, 16, to_timestamp(1364282603), to_timestamp(1376839667), 'offset_16'), (308, 16, to_timestamp(1376839667), to_timestamp(1388845719), 'offset_16'), (309, 16, to_timestamp(1388845719), to_timestamp(1397883769), 'offset_16'), (310, 16, to_timestamp(1397883769), to_timestamp(1406119748), 'offset_16'), (311, 16, to_timestamp(1406119748), NULL, 'offset_16'), (312, 32, NULL, to_timestamp(1339196452), 'base_32'), (313, 32, to_timestamp(1339196452), to_timestamp(1369744725), 'base_32'), (314, 32, to_timestamp(1369744725), to_timestamp(1392835298), 'base_32'), (315, 32, to_timestamp(1392835298), to_timestamp(1410076838), 'base_32'), (316, 32, to_timestamp(1410076838), NULL, 'base_32'), (317, 32, NULL, to_timestamp(1317672998), 'offset_32'), (318, 32, to_timestamp(1317672998), to_timestamp(1357283646), 'offset_32'), (319, 32, to_timestamp(1357283646), to_timestamp(1382439630), 'offset_32'), (320, 32, to_timestamp(1382439630), to_timestamp(1402429869), 'offset_32'), (321, 32, to_timestamp(1402429869), NULL, 'offset_32'), (322, 64, NULL, to_timestamp(1369744725), 'base_64'), (323, 64, to_timestamp(1369744725), to_timestamp(1410076838), 'base_64'), (324, 64, to_timestamp(1410076838), NULL, 'base_64'), (325, 64, NULL, to_timestamp(1340244244), 'offset_64'), (326, 64, to_timestamp(1340244244), to_timestamp(1393383703), 'offset_64'), (327, 64, to_timestamp(1393383703), NULL, 'offset_64'), (328, 128, NULL, to_timestamp(1410076838), 'base_128'), (329, 128, to_timestamp(1410076838), NULL, 'base_128'), (330, 128, NULL, to_timestamp(1370527319), 'offset_128'), (331, 128, to_timestamp(1370527319), NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

----------------------------------
-- END: generate all mcvs and histograms
----------------------------------


----------------------------------
-- START: generate all lpnorm queries for USERS
----------------------------------


DROP TABLE IF EXISTS Degree_USERS_ID;

-- Create aggregator table Degree_USERS_ID
CREATE TEMP TABLE Degree_USERS_ID AS
SELECT
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS

WHERE USERS.ID IS NOT NULL
GROUP BY
    USERS.ID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    40325 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_USERS_ID
  LIMIT 40325
);

DROP TABLE IF EXISTS Degree_USERS_VIEWS_ID;

-- Create aggregator table Degree_USERS_VIEWS_ID for MCV USERS.VIEWS -- MCV
CREATE TEMP TABLE Degree_USERS_VIEWS_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS
JOIN USERS_VIEWS_mcv mcvt ON USERS.VIEWS = mcvt.VIEWS
WHERE USERS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, USERS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_USERS_VIEWS_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_USERS_VIEWS_ID;

-- Create aggregator table Degree_USERS_VIEWS_ID for NONMCV USERS.VIEWS -- MCV
CREATE TEMP TABLE Degree_USERS_VIEWS_ID AS
SELECT
    USERS.VIEWS AS VIEWS,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS
LEFT JOIN USERS_VIEWS_mcv mcvt ON USERS.VIEWS = mcvt.VIEWS
WHERE USERS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    USERS.VIEWS, USERS.ID
;

-- Insert into norms for Non-MCV USERS VIEWS ID NONMCV
-- Among all non-MCV values in Degree_USERS_VIEWS_ID, find max of each Lp
WITH perValue AS (
  SELECT
    VIEWS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_USERS_VIEWS_ID
  GROUP BY VIEWS
  HAVING VIEWS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_USERS_UPVOTES_ID;

-- Create aggregator table Degree_USERS_UPVOTES_ID for MCV USERS.UPVOTES -- MCV
CREATE TEMP TABLE Degree_USERS_UPVOTES_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS
JOIN USERS_UPVOTES_mcv mcvt ON USERS.UPVOTES = mcvt.UPVOTES
WHERE USERS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, USERS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_USERS_UPVOTES_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_USERS_UPVOTES_ID;

-- Create aggregator table Degree_USERS_UPVOTES_ID for NONMCV USERS.UPVOTES -- MCV
CREATE TEMP TABLE Degree_USERS_UPVOTES_ID AS
SELECT
    USERS.UPVOTES AS UPVOTES,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS
LEFT JOIN USERS_UPVOTES_mcv mcvt ON USERS.UPVOTES = mcvt.UPVOTES
WHERE USERS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    USERS.UPVOTES, USERS.ID
;

-- Insert into norms for Non-MCV USERS UPVOTES ID NONMCV
-- Among all non-MCV values in Degree_USERS_UPVOTES_ID, find max of each Lp
WITH perValue AS (
  SELECT
    UPVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_USERS_UPVOTES_ID
  GROUP BY UPVOTES
  HAVING UPVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_USERS_DOWNVOTES_ID;

-- Create aggregator table Degree_USERS_DOWNVOTES_ID for MCV USERS.DOWNVOTES -- MCV
CREATE TEMP TABLE Degree_USERS_DOWNVOTES_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS
JOIN USERS_DOWNVOTES_mcv mcvt ON USERS.DOWNVOTES = mcvt.DOWNVOTES
WHERE USERS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, USERS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_USERS_DOWNVOTES_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_USERS_DOWNVOTES_ID;

-- Create aggregator table Degree_USERS_DOWNVOTES_ID for NONMCV USERS.DOWNVOTES -- MCV
CREATE TEMP TABLE Degree_USERS_DOWNVOTES_ID AS
SELECT
    USERS.DOWNVOTES AS DOWNVOTES,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS
LEFT JOIN USERS_DOWNVOTES_mcv mcvt ON USERS.DOWNVOTES = mcvt.DOWNVOTES
WHERE USERS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    USERS.DOWNVOTES, USERS.ID
;

-- Insert into norms for Non-MCV USERS DOWNVOTES ID NONMCV
-- Among all non-MCV values in Degree_USERS_DOWNVOTES_ID, find max of each Lp
WITH perValue AS (
  SELECT
    DOWNVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_USERS_DOWNVOTES_ID
  GROUP BY DOWNVOTES
  HAVING DOWNVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_USERS_CREATIONDATE_ID;

-- Create aggregator table Degree_USERS_CREATIONDATE_ID for Histogram USERS.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_USERS_CREATIONDATE_ID AS
SELECT
    USERS.CREATIONDATE AS CREATIONDATE,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS

WHERE USERS.ID IS NOT NULL
GROUP BY
    USERS.CREATIONDATE, USERS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_USERS_CREATIONDATE_ID d
        JOIN USERS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_USERS_VIEWS_ID;

-- Create aggregator table Degree_USERS_VIEWS_ID for Histogram USERS.VIEWS -- RANGE
CREATE TEMP TABLE Degree_USERS_VIEWS_ID AS
SELECT
    USERS.VIEWS AS VIEWS,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS

WHERE USERS.ID IS NOT NULL
GROUP BY
    USERS.VIEWS, USERS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_USERS_VIEWS_ID d
        JOIN USERS_VIEWS_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWS <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_USERS_UPVOTES_ID;

-- Create aggregator table Degree_USERS_UPVOTES_ID for Histogram USERS.UPVOTES -- RANGE
CREATE TEMP TABLE Degree_USERS_UPVOTES_ID AS
SELECT
    USERS.UPVOTES AS UPVOTES,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS

WHERE USERS.ID IS NOT NULL
GROUP BY
    USERS.UPVOTES, USERS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_USERS_UPVOTES_ID d
        JOIN USERS_UPVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.UPVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.UPVOTES <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_USERS_REPUTATION_ID;

-- Create aggregator table Degree_USERS_REPUTATION_ID for Histogram USERS.REPUTATION -- RANGE
CREATE TEMP TABLE Degree_USERS_REPUTATION_ID AS
SELECT
    USERS.REPUTATION AS REPUTATION,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS

WHERE USERS.ID IS NOT NULL
GROUP BY
    USERS.REPUTATION, USERS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'REPUTATION' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_USERS_REPUTATION_ID d
        JOIN USERS_REPUTATION_histogram h
        ON (h.lower_bound IS NULL OR d.REPUTATION >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.REPUTATION <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_USERS_DOWNVOTES_ID;

-- Create aggregator table Degree_USERS_DOWNVOTES_ID for Histogram USERS.DOWNVOTES -- RANGE
CREATE TEMP TABLE Degree_USERS_DOWNVOTES_ID AS
SELECT
    USERS.DOWNVOTES AS DOWNVOTES,
    USERS.ID AS ID,
    COUNT(*) AS deg
FROM USERS

WHERE USERS.ID IS NOT NULL
GROUP BY
    USERS.DOWNVOTES, USERS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'USERS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_USERS_DOWNVOTES_ID d
        JOIN USERS_DOWNVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.DOWNVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DOWNVOTES <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for POSTS
----------------------------------


DROP TABLE IF EXISTS POSTS_OWNERUSERID_ID_USERS;

-- Create temp table POSTS_OWNERUSERID_ID_USERS (FK->PK join)
CREATE TEMP TABLE POSTS_OWNERUSERID_ID_USERS AS
SELECT
    POSTS.OWNERUSERID AS OWNERUSERID, POSTS.ID AS ID,
    USERS.DOWNVOTES AS USERS_DOWNVOTES, USERS.CREATIONDATE AS USERS_CREATIONDATE, USERS.REPUTATION AS USERS_REPUTATION, USERS.VIEWS AS USERS_VIEWS, USERS.UPVOTES AS USERS_UPVOTES
FROM POSTS
JOIN USERS
  ON POSTS.OWNERUSERID = USERS.ID
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID AS
SELECT
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS.OWNERUSERID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    21983 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_OWNERUSERID
  LIMIT 21983
);

DROP TABLE IF EXISTS Degree_POSTS_ANSWERCOUNT_OWNERUSERID;

-- Create aggregator table Degree_POSTS_ANSWERCOUNT_OWNERUSERID for MCV POSTS.ANSWERCOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_ANSWERCOUNT_OWNERUSERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTS.ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS.OWNERUSERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_ANSWERCOUNT_OWNERUSERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_ANSWERCOUNT_OWNERUSERID;

-- Create aggregator table Degree_POSTS_ANSWERCOUNT_OWNERUSERID for NONMCV POSTS.ANSWERCOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_ANSWERCOUNT_OWNERUSERID AS
SELECT
    POSTS.ANSWERCOUNT AS ANSWERCOUNT,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTS.ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTS.OWNERUSERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS.ANSWERCOUNT, POSTS.OWNERUSERID
;

-- Insert into norms for Non-MCV POSTS ANSWERCOUNT OWNERUSERID NONMCV
-- Among all non-MCV values in Degree_POSTS_ANSWERCOUNT_OWNERUSERID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_ANSWERCOUNT_OWNERUSERID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_FAVORITECOUNT_OWNERUSERID;

-- Create aggregator table Degree_POSTS_FAVORITECOUNT_OWNERUSERID for MCV POSTS.FAVORITECOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_FAVORITECOUNT_OWNERUSERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTS.FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS.OWNERUSERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_FAVORITECOUNT_OWNERUSERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_FAVORITECOUNT_OWNERUSERID;

-- Create aggregator table Degree_POSTS_FAVORITECOUNT_OWNERUSERID for NONMCV POSTS.FAVORITECOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_FAVORITECOUNT_OWNERUSERID AS
SELECT
    POSTS.FAVORITECOUNT AS FAVORITECOUNT,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTS.FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTS.OWNERUSERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS.FAVORITECOUNT, POSTS.OWNERUSERID
;

-- Insert into norms for Non-MCV POSTS FAVORITECOUNT OWNERUSERID NONMCV
-- Among all non-MCV values in Degree_POSTS_FAVORITECOUNT_OWNERUSERID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_FAVORITECOUNT_OWNERUSERID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_POSTTYPEID_OWNERUSERID;

-- Create aggregator table Degree_POSTS_POSTTYPEID_OWNERUSERID for MCV POSTS.POSTTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTS_POSTTYPEID_OWNERUSERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTS.POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS.OWNERUSERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_POSTTYPEID_OWNERUSERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_POSTTYPEID_OWNERUSERID;

-- Create aggregator table Degree_POSTS_POSTTYPEID_OWNERUSERID for NONMCV POSTS.POSTTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTS_POSTTYPEID_OWNERUSERID AS
SELECT
    POSTS.POSTTYPEID AS POSTTYPEID,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTS.POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTS.OWNERUSERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS.POSTTYPEID, POSTS.OWNERUSERID
;

-- Insert into norms for Non-MCV POSTS POSTTYPEID OWNERUSERID NONMCV
-- Among all non-MCV values in Degree_POSTS_POSTTYPEID_OWNERUSERID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_POSTTYPEID_OWNERUSERID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_SCORE_OWNERUSERID;

-- Create aggregator table Degree_POSTS_SCORE_OWNERUSERID for MCV POSTS.SCORE -- MCV
CREATE TEMP TABLE Degree_POSTS_SCORE_OWNERUSERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS
JOIN POSTS_SCORE_mcv mcvt ON POSTS.SCORE = mcvt.SCORE
WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS.OWNERUSERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_SCORE_OWNERUSERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_SCORE_OWNERUSERID;

-- Create aggregator table Degree_POSTS_SCORE_OWNERUSERID for NONMCV POSTS.SCORE -- MCV
CREATE TEMP TABLE Degree_POSTS_SCORE_OWNERUSERID AS
SELECT
    POSTS.SCORE AS SCORE,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON POSTS.SCORE = mcvt.SCORE
WHERE POSTS.OWNERUSERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS.SCORE, POSTS.OWNERUSERID
;

-- Insert into norms for Non-MCV POSTS SCORE OWNERUSERID NONMCV
-- Among all non-MCV values in Degree_POSTS_SCORE_OWNERUSERID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_SCORE_OWNERUSERID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_COMMENTCOUNT_OWNERUSERID;

-- Create aggregator table Degree_POSTS_COMMENTCOUNT_OWNERUSERID for MCV POSTS.COMMENTCOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_COMMENTCOUNT_OWNERUSERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTS.COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS.OWNERUSERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_COMMENTCOUNT_OWNERUSERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_COMMENTCOUNT_OWNERUSERID;

-- Create aggregator table Degree_POSTS_COMMENTCOUNT_OWNERUSERID for NONMCV POSTS.COMMENTCOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_COMMENTCOUNT_OWNERUSERID AS
SELECT
    POSTS.COMMENTCOUNT AS COMMENTCOUNT,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTS.COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTS.OWNERUSERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS.COMMENTCOUNT, POSTS.OWNERUSERID
;

-- Insert into norms for Non-MCV POSTS COMMENTCOUNT OWNERUSERID NONMCV
-- Among all non-MCV values in Degree_POSTS_COMMENTCOUNT_OWNERUSERID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_COMMENTCOUNT_OWNERUSERID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_CREATIONDATE_OWNERUSERID;

-- Create aggregator table Degree_POSTS_CREATIONDATE_OWNERUSERID for Histogram POSTS.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_POSTS_CREATIONDATE_OWNERUSERID AS
SELECT
    POSTS.CREATIONDATE AS CREATIONDATE,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS.CREATIONDATE, POSTS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_CREATIONDATE_OWNERUSERID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_ANSWERCOUNT_OWNERUSERID;

-- Create aggregator table Degree_POSTS_ANSWERCOUNT_OWNERUSERID for Histogram POSTS.ANSWERCOUNT -- RANGE
CREATE TEMP TABLE Degree_POSTS_ANSWERCOUNT_OWNERUSERID AS
SELECT
    POSTS.ANSWERCOUNT AS ANSWERCOUNT,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS.ANSWERCOUNT, POSTS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_ANSWERCOUNT_OWNERUSERID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_FAVORITECOUNT_OWNERUSERID;

-- Create aggregator table Degree_POSTS_FAVORITECOUNT_OWNERUSERID for Histogram POSTS.FAVORITECOUNT -- RANGE
CREATE TEMP TABLE Degree_POSTS_FAVORITECOUNT_OWNERUSERID AS
SELECT
    POSTS.FAVORITECOUNT AS FAVORITECOUNT,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS.FAVORITECOUNT, POSTS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_FAVORITECOUNT_OWNERUSERID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_VIEWCOUNT_OWNERUSERID;

-- Create aggregator table Degree_POSTS_VIEWCOUNT_OWNERUSERID for Histogram POSTS.VIEWCOUNT -- RANGE
CREATE TEMP TABLE Degree_POSTS_VIEWCOUNT_OWNERUSERID AS
SELECT
    POSTS.VIEWCOUNT AS VIEWCOUNT,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS.VIEWCOUNT, POSTS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_VIEWCOUNT_OWNERUSERID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_SCORE_OWNERUSERID;

-- Create aggregator table Degree_POSTS_SCORE_OWNERUSERID for Histogram POSTS.SCORE -- RANGE
CREATE TEMP TABLE Degree_POSTS_SCORE_OWNERUSERID AS
SELECT
    POSTS.SCORE AS SCORE,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS.SCORE, POSTS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_SCORE_OWNERUSERID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_COMMENTCOUNT_OWNERUSERID;

-- Create aggregator table Degree_POSTS_COMMENTCOUNT_OWNERUSERID for Histogram POSTS.COMMENTCOUNT -- RANGE
CREATE TEMP TABLE Degree_POSTS_COMMENTCOUNT_OWNERUSERID AS
SELECT
    POSTS.COMMENTCOUNT AS COMMENTCOUNT,
    POSTS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS.COMMENTCOUNT, POSTS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_COMMENTCOUNT_OWNERUSERID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID for MCV POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
JOIN USERS_VIEWS_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID for NONMCV POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS AS VIEWS,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
LEFT JOIN USERS_VIEWS_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

-- Insert into norms for Non-MCV POSTS_OWNERUSERID_ID_USERS VIEWS OWNERUSERID NONMCV
-- Among all non-MCV values in Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID, find max of each Lp
WITH perValue AS (
  SELECT
    VIEWS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID
  GROUP BY VIEWS
  HAVING VIEWS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID for MCV POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
JOIN USERS_UPVOTES_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID for NONMCV POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
LEFT JOIN USERS_UPVOTES_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

-- Insert into norms for Non-MCV POSTS_OWNERUSERID_ID_USERS UPVOTES OWNERUSERID NONMCV
-- Among all non-MCV values in Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID, find max of each Lp
WITH perValue AS (
  SELECT
    UPVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID
  GROUP BY UPVOTES
  HAVING UPVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID for MCV POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
JOIN USERS_DOWNVOTES_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID for NONMCV POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
LEFT JOIN USERS_DOWNVOTES_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

-- Insert into norms for Non-MCV POSTS_OWNERUSERID_ID_USERS DOWNVOTES OWNERUSERID NONMCV
-- Among all non-MCV values in Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID, find max of each Lp
WITH perValue AS (
  SELECT
    DOWNVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID
  GROUP BY DOWNVOTES
  HAVING DOWNVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_CREATIONDATE_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_CREATIONDATE_OWNERUSERID for Histogram POSTS_OWNERUSERID_ID_USERS.USERS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_CREATIONDATE_OWNERUSERID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_CREATIONDATE AS CREATIONDATE,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS

WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_CREATIONDATE, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_OWNERUSERID_ID_USERS_CREATIONDATE_OWNERUSERID d
        JOIN USERS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID for Histogram POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS AS VIEWS,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS

WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_OWNERUSERID d
        JOIN USERS_VIEWS_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWS <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID for Histogram POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS

WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_OWNERUSERID d
        JOIN USERS_UPVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.UPVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.UPVOTES <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_REPUTATION_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_REPUTATION_OWNERUSERID for Histogram POSTS_OWNERUSERID_ID_USERS.USERS_REPUTATION -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_REPUTATION_OWNERUSERID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_REPUTATION AS REPUTATION,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS

WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_REPUTATION, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'REPUTATION' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_OWNERUSERID_ID_USERS_REPUTATION_OWNERUSERID d
        JOIN USERS_REPUTATION_histogram h
        ON (h.lower_bound IS NULL OR d.REPUTATION >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.REPUTATION <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID for Histogram POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    POSTS_OWNERUSERID_ID_USERS.OWNERUSERID AS OWNERUSERID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS

WHERE POSTS_OWNERUSERID_ID_USERS.OWNERUSERID IS NOT NULL
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES, POSTS_OWNERUSERID_ID_USERS.OWNERUSERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'OWNERUSERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        OWNERUSERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_OWNERUSERID d
        JOIN USERS_DOWNVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.DOWNVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DOWNVOTES <= h.upper_bound)
    WHERE OWNERUSERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY OWNERUSERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_ID;

-- Create aggregator table Degree_POSTS_ID
CREATE TEMP TABLE Degree_POSTS_ID AS
SELECT
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.ID IS NOT NULL
GROUP BY
    POSTS.ID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    65536 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 65536
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    91976 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTS_ID
  LIMIT 91976
);

DROP TABLE IF EXISTS Degree_POSTS_ANSWERCOUNT_ID;

-- Create aggregator table Degree_POSTS_ANSWERCOUNT_ID for MCV POSTS.ANSWERCOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_ANSWERCOUNT_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTS.ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_ANSWERCOUNT_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_ANSWERCOUNT_ID;

-- Create aggregator table Degree_POSTS_ANSWERCOUNT_ID for NONMCV POSTS.ANSWERCOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_ANSWERCOUNT_ID AS
SELECT
    POSTS.ANSWERCOUNT AS ANSWERCOUNT,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTS.ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS.ANSWERCOUNT, POSTS.ID
;

-- Insert into norms for Non-MCV POSTS ANSWERCOUNT ID NONMCV
-- Among all non-MCV values in Degree_POSTS_ANSWERCOUNT_ID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_ANSWERCOUNT_ID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_FAVORITECOUNT_ID;

-- Create aggregator table Degree_POSTS_FAVORITECOUNT_ID for MCV POSTS.FAVORITECOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_FAVORITECOUNT_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTS.FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_FAVORITECOUNT_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_FAVORITECOUNT_ID;

-- Create aggregator table Degree_POSTS_FAVORITECOUNT_ID for NONMCV POSTS.FAVORITECOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_FAVORITECOUNT_ID AS
SELECT
    POSTS.FAVORITECOUNT AS FAVORITECOUNT,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTS.FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS.FAVORITECOUNT, POSTS.ID
;

-- Insert into norms for Non-MCV POSTS FAVORITECOUNT ID NONMCV
-- Among all non-MCV values in Degree_POSTS_FAVORITECOUNT_ID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_FAVORITECOUNT_ID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_POSTTYPEID_ID;

-- Create aggregator table Degree_POSTS_POSTTYPEID_ID for MCV POSTS.POSTTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTS_POSTTYPEID_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTS.POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_POSTTYPEID_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_POSTTYPEID_ID;

-- Create aggregator table Degree_POSTS_POSTTYPEID_ID for NONMCV POSTS.POSTTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTS_POSTTYPEID_ID AS
SELECT
    POSTS.POSTTYPEID AS POSTTYPEID,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTS.POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS.POSTTYPEID, POSTS.ID
;

-- Insert into norms for Non-MCV POSTS POSTTYPEID ID NONMCV
-- Among all non-MCV values in Degree_POSTS_POSTTYPEID_ID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_POSTTYPEID_ID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_SCORE_ID;

-- Create aggregator table Degree_POSTS_SCORE_ID for MCV POSTS.SCORE -- MCV
CREATE TEMP TABLE Degree_POSTS_SCORE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS
JOIN POSTS_SCORE_mcv mcvt ON POSTS.SCORE = mcvt.SCORE
WHERE POSTS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_SCORE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_SCORE_ID;

-- Create aggregator table Degree_POSTS_SCORE_ID for NONMCV POSTS.SCORE -- MCV
CREATE TEMP TABLE Degree_POSTS_SCORE_ID AS
SELECT
    POSTS.SCORE AS SCORE,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON POSTS.SCORE = mcvt.SCORE
WHERE POSTS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS.SCORE, POSTS.ID
;

-- Insert into norms for Non-MCV POSTS SCORE ID NONMCV
-- Among all non-MCV values in Degree_POSTS_SCORE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_SCORE_ID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_COMMENTCOUNT_ID;

-- Create aggregator table Degree_POSTS_COMMENTCOUNT_ID for MCV POSTS.COMMENTCOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_COMMENTCOUNT_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTS.COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_COMMENTCOUNT_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_COMMENTCOUNT_ID;

-- Create aggregator table Degree_POSTS_COMMENTCOUNT_ID for NONMCV POSTS.COMMENTCOUNT -- MCV
CREATE TEMP TABLE Degree_POSTS_COMMENTCOUNT_ID AS
SELECT
    POSTS.COMMENTCOUNT AS COMMENTCOUNT,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTS.COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS.COMMENTCOUNT, POSTS.ID
;

-- Insert into norms for Non-MCV POSTS COMMENTCOUNT ID NONMCV
-- Among all non-MCV values in Degree_POSTS_COMMENTCOUNT_ID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_COMMENTCOUNT_ID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_CREATIONDATE_ID;

-- Create aggregator table Degree_POSTS_CREATIONDATE_ID for Histogram POSTS.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_POSTS_CREATIONDATE_ID AS
SELECT
    POSTS.CREATIONDATE AS CREATIONDATE,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.ID IS NOT NULL
GROUP BY
    POSTS.CREATIONDATE, POSTS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_CREATIONDATE_ID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_ANSWERCOUNT_ID;

-- Create aggregator table Degree_POSTS_ANSWERCOUNT_ID for Histogram POSTS.ANSWERCOUNT -- RANGE
CREATE TEMP TABLE Degree_POSTS_ANSWERCOUNT_ID AS
SELECT
    POSTS.ANSWERCOUNT AS ANSWERCOUNT,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.ID IS NOT NULL
GROUP BY
    POSTS.ANSWERCOUNT, POSTS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_ANSWERCOUNT_ID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_FAVORITECOUNT_ID;

-- Create aggregator table Degree_POSTS_FAVORITECOUNT_ID for Histogram POSTS.FAVORITECOUNT -- RANGE
CREATE TEMP TABLE Degree_POSTS_FAVORITECOUNT_ID AS
SELECT
    POSTS.FAVORITECOUNT AS FAVORITECOUNT,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.ID IS NOT NULL
GROUP BY
    POSTS.FAVORITECOUNT, POSTS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_FAVORITECOUNT_ID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_VIEWCOUNT_ID;

-- Create aggregator table Degree_POSTS_VIEWCOUNT_ID for Histogram POSTS.VIEWCOUNT -- RANGE
CREATE TEMP TABLE Degree_POSTS_VIEWCOUNT_ID AS
SELECT
    POSTS.VIEWCOUNT AS VIEWCOUNT,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.ID IS NOT NULL
GROUP BY
    POSTS.VIEWCOUNT, POSTS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_VIEWCOUNT_ID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_SCORE_ID;

-- Create aggregator table Degree_POSTS_SCORE_ID for Histogram POSTS.SCORE -- RANGE
CREATE TEMP TABLE Degree_POSTS_SCORE_ID AS
SELECT
    POSTS.SCORE AS SCORE,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.ID IS NOT NULL
GROUP BY
    POSTS.SCORE, POSTS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_SCORE_ID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_COMMENTCOUNT_ID;

-- Create aggregator table Degree_POSTS_COMMENTCOUNT_ID for Histogram POSTS.COMMENTCOUNT -- RANGE
CREATE TEMP TABLE Degree_POSTS_COMMENTCOUNT_ID AS
SELECT
    POSTS.COMMENTCOUNT AS COMMENTCOUNT,
    POSTS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS

WHERE POSTS.ID IS NOT NULL
GROUP BY
    POSTS.COMMENTCOUNT, POSTS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_COMMENTCOUNT_ID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID for MCV POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
JOIN USERS_VIEWS_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS_OWNERUSERID_ID_USERS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID for NONMCV POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS AS VIEWS,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
LEFT JOIN USERS_VIEWS_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS, POSTS_OWNERUSERID_ID_USERS.ID
;

-- Insert into norms for Non-MCV POSTS_OWNERUSERID_ID_USERS VIEWS ID NONMCV
-- Among all non-MCV values in Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID, find max of each Lp
WITH perValue AS (
  SELECT
    VIEWS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID
  GROUP BY VIEWS
  HAVING VIEWS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID for MCV POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
JOIN USERS_UPVOTES_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS_OWNERUSERID_ID_USERS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID for NONMCV POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
LEFT JOIN USERS_UPVOTES_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES, POSTS_OWNERUSERID_ID_USERS.ID
;

-- Insert into norms for Non-MCV POSTS_OWNERUSERID_ID_USERS UPVOTES ID NONMCV
-- Among all non-MCV values in Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID, find max of each Lp
WITH perValue AS (
  SELECT
    UPVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID
  GROUP BY UPVOTES
  HAVING UPVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID for MCV POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
JOIN USERS_DOWNVOTES_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTS_OWNERUSERID_ID_USERS.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID for NONMCV POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS
LEFT JOIN USERS_DOWNVOTES_mcv mcvt ON POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES, POSTS_OWNERUSERID_ID_USERS.ID
;

-- Insert into norms for Non-MCV POSTS_OWNERUSERID_ID_USERS DOWNVOTES ID NONMCV
-- Among all non-MCV values in Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID, find max of each Lp
WITH perValue AS (
  SELECT
    DOWNVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID
  GROUP BY DOWNVOTES
  HAVING DOWNVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_CREATIONDATE_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_CREATIONDATE_ID for Histogram POSTS_OWNERUSERID_ID_USERS.USERS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_CREATIONDATE_ID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_CREATIONDATE AS CREATIONDATE,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS

WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_CREATIONDATE, POSTS_OWNERUSERID_ID_USERS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_OWNERUSERID_ID_USERS_CREATIONDATE_ID d
        JOIN USERS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID for Histogram POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS AS VIEWS,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS

WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_VIEWS, POSTS_OWNERUSERID_ID_USERS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_OWNERUSERID_ID_USERS_VIEWS_ID d
        JOIN USERS_VIEWS_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWS <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID for Histogram POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS

WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_UPVOTES, POSTS_OWNERUSERID_ID_USERS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_OWNERUSERID_ID_USERS_UPVOTES_ID d
        JOIN USERS_UPVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.UPVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.UPVOTES <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_REPUTATION_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_REPUTATION_ID for Histogram POSTS_OWNERUSERID_ID_USERS.USERS_REPUTATION -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_REPUTATION_ID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_REPUTATION AS REPUTATION,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS

WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_REPUTATION, POSTS_OWNERUSERID_ID_USERS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'REPUTATION' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_OWNERUSERID_ID_USERS_REPUTATION_ID d
        JOIN USERS_REPUTATION_histogram h
        ON (h.lower_bound IS NULL OR d.REPUTATION >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.REPUTATION <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID;

-- Create aggregator table Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID for Histogram POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID AS
SELECT
    POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    POSTS_OWNERUSERID_ID_USERS.ID AS ID,
    COUNT(*) AS deg
FROM POSTS_OWNERUSERID_ID_USERS

WHERE POSTS_OWNERUSERID_ID_USERS.ID IS NOT NULL
GROUP BY
    POSTS_OWNERUSERID_ID_USERS.USERS_DOWNVOTES, POSTS_OWNERUSERID_ID_USERS.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTS' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'OWNERUSERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTS_OWNERUSERID_ID_USERS_DOWNVOTES_ID d
        JOIN USERS_DOWNVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.DOWNVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DOWNVOTES <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for POSTLINKS
----------------------------------


DROP TABLE IF EXISTS POSTLINKS_POSTID_ID_POSTS;

-- Create temp table POSTLINKS_POSTID_ID_POSTS (FK->PK join)
CREATE TEMP TABLE POSTLINKS_POSTID_ID_POSTS AS
SELECT
    POSTLINKS.POSTID AS POSTID, POSTLINKS.RELATEDPOSTID AS RELATEDPOSTID,
    POSTS.SCORE AS POSTS_SCORE, POSTS.CREATIONDATE AS POSTS_CREATIONDATE, POSTS.POSTTYPEID AS POSTS_POSTTYPEID, POSTS.FAVORITECOUNT AS POSTS_FAVORITECOUNT, POSTS.ANSWERCOUNT AS POSTS_ANSWERCOUNT, POSTS.COMMENTCOUNT AS POSTS_COMMENTCOUNT, POSTS.VIEWCOUNT AS POSTS_VIEWCOUNT
FROM POSTLINKS
JOIN POSTS
  ON POSTLINKS.POSTID = POSTS.ID
;

DROP TABLE IF EXISTS POSTLINKS_RELATEDPOSTID_ID_POSTS;

-- Create temp table POSTLINKS_RELATEDPOSTID_ID_POSTS (FK->PK join)
CREATE TEMP TABLE POSTLINKS_RELATEDPOSTID_ID_POSTS AS
SELECT
    POSTLINKS.POSTID AS POSTID, POSTLINKS.RELATEDPOSTID AS RELATEDPOSTID,
    POSTS.SCORE AS POSTS_SCORE, POSTS.CREATIONDATE AS POSTS_CREATIONDATE, POSTS.POSTTYPEID AS POSTS_POSTTYPEID, POSTS.FAVORITECOUNT AS POSTS_FAVORITECOUNT, POSTS.ANSWERCOUNT AS POSTS_ANSWERCOUNT, POSTS.COMMENTCOUNT AS POSTS_COMMENTCOUNT, POSTS.VIEWCOUNT AS POSTS_VIEWCOUNT
FROM POSTLINKS
JOIN POSTS
  ON POSTLINKS.RELATEDPOSTID = POSTS.ID
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID
CREATE TEMP TABLE Degree_POSTLINKS_POSTID AS
SELECT
    POSTLINKS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS

WHERE POSTLINKS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS.POSTID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    7604 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_POSTID
  LIMIT 7604
);

DROP TABLE IF EXISTS Degree_POSTLINKS_LINKTYPEID_POSTID;

-- Create aggregator table Degree_POSTLINKS_LINKTYPEID_POSTID for MCV POSTLINKS.LINKTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTLINKS_LINKTYPEID_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS
JOIN POSTLINKS_LINKTYPEID_mcv mcvt ON POSTLINKS.LINKTYPEID = mcvt.LINKTYPEID
WHERE POSTLINKS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'LINKTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_LINKTYPEID_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_LINKTYPEID_POSTID;

-- Create aggregator table Degree_POSTLINKS_LINKTYPEID_POSTID for NONMCV POSTLINKS.LINKTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTLINKS_LINKTYPEID_POSTID AS
SELECT
    POSTLINKS.LINKTYPEID AS LINKTYPEID,
    POSTLINKS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS
LEFT JOIN POSTLINKS_LINKTYPEID_mcv mcvt ON POSTLINKS.LINKTYPEID = mcvt.LINKTYPEID
WHERE POSTLINKS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS.LINKTYPEID, POSTLINKS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS LINKTYPEID POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_LINKTYPEID_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    LINKTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_LINKTYPEID_POSTID
  GROUP BY LINKTYPEID
  HAVING LINKTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'LINKTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_CREATIONDATE_POSTID;

-- Create aggregator table Degree_POSTLINKS_CREATIONDATE_POSTID for Histogram POSTLINKS.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_POSTLINKS_CREATIONDATE_POSTID AS
SELECT
    POSTLINKS.CREATIONDATE AS CREATIONDATE,
    POSTLINKS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS

WHERE POSTLINKS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS.CREATIONDATE, POSTLINKS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_CREATIONDATE_POSTID d
        JOIN POSTLINKS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for MCV POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for NONMCV POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTLINKS_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS_POSTID_ID_POSTS ANSWERCOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for MCV POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for NONMCV POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTLINKS_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS_POSTID_ID_POSTS FAVORITECOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_POSTID for MCV POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_POSTID for NONMCV POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID, POSTLINKS_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS_POSTID_ID_POSTS POSTTYPEID POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_POSTID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID for MCV POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID for NONMCV POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE, POSTLINKS_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS_POSTID_ID_POSTS SCORE POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for MCV POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for NONMCV POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTLINKS_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS_POSTID_ID_POSTS COMMENTCOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_CREATIONDATE_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_CREATIONDATE_POSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_CREATIONDATE_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_CREATIONDATE, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_CREATIONDATE_POSTID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_VIEWCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_VIEWCOUNT_POSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_VIEWCOUNT_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_VIEWCOUNT, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_VIEWCOUNT_POSTID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_POSTID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTLINKS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTLINKS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID for MCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID for NONMCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS_RELATEDPOSTID_ID_POSTS ANSWERCOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID for MCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID for NONMCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS_RELATEDPOSTID_ID_POSTS FAVORITECOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_POSTID for MCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_POSTID for NONMCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS_RELATEDPOSTID_ID_POSTS POSTTYPEID POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_POSTID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID for MCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID for NONMCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS_RELATEDPOSTID_ID_POSTS SCORE POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID for MCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID for NONMCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTLINKS_RELATEDPOSTID_ID_POSTS COMMENTCOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_CREATIONDATE_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_CREATIONDATE_POSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_CREATIONDATE_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_CREATIONDATE, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_CREATIONDATE_POSTID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_POSTID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_POSTID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_VIEWCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_VIEWCOUNT_POSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_VIEWCOUNT_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_VIEWCOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_VIEWCOUNT_POSTID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_POSTID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_POSTID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID AS
SELECT
    POSTLINKS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS

WHERE POSTLINKS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS.RELATEDPOSTID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    5177 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTLINKS_RELATEDPOSTID
  LIMIT 5177
);

DROP TABLE IF EXISTS Degree_POSTLINKS_LINKTYPEID_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_LINKTYPEID_RELATEDPOSTID for MCV POSTLINKS.LINKTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTLINKS_LINKTYPEID_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS
JOIN POSTLINKS_LINKTYPEID_mcv mcvt ON POSTLINKS.LINKTYPEID = mcvt.LINKTYPEID
WHERE POSTLINKS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'LINKTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_LINKTYPEID_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_LINKTYPEID_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_LINKTYPEID_RELATEDPOSTID for NONMCV POSTLINKS.LINKTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTLINKS_LINKTYPEID_RELATEDPOSTID AS
SELECT
    POSTLINKS.LINKTYPEID AS LINKTYPEID,
    POSTLINKS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS
LEFT JOIN POSTLINKS_LINKTYPEID_mcv mcvt ON POSTLINKS.LINKTYPEID = mcvt.LINKTYPEID
WHERE POSTLINKS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS.LINKTYPEID, POSTLINKS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS LINKTYPEID RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_LINKTYPEID_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    LINKTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_LINKTYPEID_RELATEDPOSTID
  GROUP BY LINKTYPEID
  HAVING LINKTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'LINKTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_CREATIONDATE_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_CREATIONDATE_RELATEDPOSTID for Histogram POSTLINKS.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_POSTLINKS_CREATIONDATE_RELATEDPOSTID AS
SELECT
    POSTLINKS.CREATIONDATE AS CREATIONDATE,
    POSTLINKS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS

WHERE POSTLINKS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS.CREATIONDATE, POSTLINKS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_CREATIONDATE_RELATEDPOSTID d
        JOIN POSTLINKS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID for MCV POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID for NONMCV POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS_POSTID_ID_POSTS ANSWERCOUNT RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID for MCV POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID for NONMCV POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS_POSTID_ID_POSTS FAVORITECOUNT RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID for MCV POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID for NONMCV POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_POSTTYPEID, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS_POSTID_ID_POSTS POSTTYPEID RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_POSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID for MCV POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID for NONMCV POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS_POSTID_ID_POSTS SCORE RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID for MCV POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID for NONMCV POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS_POSTID_ID_POSTS COMMENTCOUNT RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_CREATIONDATE_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_CREATIONDATE_RELATEDPOSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_CREATIONDATE_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_CREATIONDATE, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_CREATIONDATE_RELATEDPOSTID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_VIEWCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_VIEWCOUNT_RELATEDPOSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_VIEWCOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_VIEWCOUNT, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_VIEWCOUNT_RELATEDPOSTID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_SCORE, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_SCORE_RELATEDPOSTID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID for Histogram POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_POSTID_ID_POSTS

WHERE POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTLINKS_POSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_POSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID for MCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID for NONMCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS_RELATEDPOSTID_ID_POSTS ANSWERCOUNT RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID for MCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID for NONMCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS_RELATEDPOSTID_ID_POSTS FAVORITECOUNT RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID for MCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID for NONMCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_POSTTYPEID, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS_RELATEDPOSTID_ID_POSTS POSTTYPEID RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_POSTTYPEID_RELATEDPOSTID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID for MCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID for NONMCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS_RELATEDPOSTID_ID_POSTS SCORE RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID for MCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID for NONMCV POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

-- Insert into norms for Non-MCV POSTLINKS_RELATEDPOSTID_ID_POSTS COMMENTCOUNT RELATEDPOSTID NONMCV
-- Among all non-MCV values in Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_CREATIONDATE_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_CREATIONDATE_RELATEDPOSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_CREATIONDATE_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_CREATIONDATE, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_CREATIONDATE_RELATEDPOSTID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_ANSWERCOUNT_RELATEDPOSTID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_FAVORITECOUNT_RELATEDPOSTID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_VIEWCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_VIEWCOUNT_RELATEDPOSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_VIEWCOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_VIEWCOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_VIEWCOUNT_RELATEDPOSTID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_SCORE, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_SCORE_RELATEDPOSTID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID;

-- Create aggregator table Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID for Histogram POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID AS
SELECT
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID AS RELATEDPOSTID,
    COUNT(*) AS deg
FROM POSTLINKS_RELATEDPOSTID_ID_POSTS

WHERE POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID IS NOT NULL
GROUP BY
    POSTLINKS_RELATEDPOSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTLINKS_RELATEDPOSTID_ID_POSTS.RELATEDPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTLINKS' AS relation_name,
    'RELATEDPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'RELATEDPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        RELATEDPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTLINKS_RELATEDPOSTID_ID_POSTS_COMMENTCOUNT_RELATEDPOSTID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE RELATEDPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY RELATEDPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for POSTHISTORY
----------------------------------


DROP TABLE IF EXISTS POSTHISTORY_USERID_ID_USERS;

-- Create temp table POSTHISTORY_USERID_ID_USERS (FK->PK join)
CREATE TEMP TABLE POSTHISTORY_USERID_ID_USERS AS
SELECT
    POSTHISTORY.POSTID AS POSTID, POSTHISTORY.USERID AS USERID,
    USERS.DOWNVOTES AS USERS_DOWNVOTES, USERS.CREATIONDATE AS USERS_CREATIONDATE, USERS.REPUTATION AS USERS_REPUTATION, USERS.VIEWS AS USERS_VIEWS, USERS.UPVOTES AS USERS_UPVOTES
FROM POSTHISTORY
JOIN USERS
  ON POSTHISTORY.USERID = USERS.ID
;

DROP TABLE IF EXISTS POSTHISTORY_POSTID_ID_POSTS;

-- Create temp table POSTHISTORY_POSTID_ID_POSTS (FK->PK join)
CREATE TEMP TABLE POSTHISTORY_POSTID_ID_POSTS AS
SELECT
    POSTHISTORY.POSTID AS POSTID, POSTHISTORY.USERID AS USERID,
    POSTS.SCORE AS POSTS_SCORE, POSTS.CREATIONDATE AS POSTS_CREATIONDATE, POSTS.POSTTYPEID AS POSTS_POSTTYPEID, POSTS.FAVORITECOUNT AS POSTS_FAVORITECOUNT, POSTS.ANSWERCOUNT AS POSTS_ANSWERCOUNT, POSTS.COMMENTCOUNT AS POSTS_COMMENTCOUNT, POSTS.VIEWCOUNT AS POSTS_VIEWCOUNT
FROM POSTHISTORY
JOIN POSTS
  ON POSTHISTORY.POSTID = POSTS.ID
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID AS
SELECT
    POSTHISTORY.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY

WHERE POSTHISTORY.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY.POSTID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    65536 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 65536
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    91976 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_POSTID
  LIMIT 91976
);

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTHISTORYTYPEID_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTHISTORYTYPEID_POSTID for MCV POSTHISTORY.POSTHISTORYTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTHISTORYTYPEID_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY
JOIN POSTHISTORY_POSTHISTORYTYPEID_mcv mcvt ON POSTHISTORY.POSTHISTORYTYPEID = mcvt.POSTHISTORYTYPEID
WHERE POSTHISTORY.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTHISTORYTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTHISTORYTYPEID_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTHISTORYTYPEID_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTHISTORYTYPEID_POSTID for NONMCV POSTHISTORY.POSTHISTORYTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTHISTORYTYPEID_POSTID AS
SELECT
    POSTHISTORY.POSTHISTORYTYPEID AS POSTHISTORYTYPEID,
    POSTHISTORY.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY
LEFT JOIN POSTHISTORY_POSTHISTORYTYPEID_mcv mcvt ON POSTHISTORY.POSTHISTORYTYPEID = mcvt.POSTHISTORYTYPEID
WHERE POSTHISTORY.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY.POSTHISTORYTYPEID, POSTHISTORY.POSTID
;

-- Insert into norms for Non-MCV POSTHISTORY POSTHISTORYTYPEID POSTID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTHISTORYTYPEID_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTHISTORYTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTHISTORYTYPEID_POSTID
  GROUP BY POSTHISTORYTYPEID
  HAVING POSTHISTORYTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTHISTORYTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_CREATIONDATE_POSTID;

-- Create aggregator table Degree_POSTHISTORY_CREATIONDATE_POSTID for Histogram POSTHISTORY.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_CREATIONDATE_POSTID AS
SELECT
    POSTHISTORY.CREATIONDATE AS CREATIONDATE,
    POSTHISTORY.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY

WHERE POSTHISTORY.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY.CREATIONDATE, POSTHISTORY.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  WITH
        joined_data AS MATERIALIZED (
            SELECT
            d.POSTID AS POSTID, h.bucket_id AS bucket_id, d.deg AS deg
            FROM Degree_POSTHISTORY_CREATIONDATE_POSTID d
            JOIN POSTHISTORY_CREATIONDATE_histogram h
            ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
            AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
        )
        SELECT POSTID, bucket_id, SUM(deg) as deg
        FROM joined_data
        GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID for MCV POSTHISTORY_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
JOIN USERS_VIEWS_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_USERID_ID_USERS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID for NONMCV POSTHISTORY_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
LEFT JOIN USERS_VIEWS_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_VIEWS, POSTHISTORY_USERID_ID_USERS.POSTID
;

-- Insert into norms for Non-MCV POSTHISTORY_USERID_ID_USERS VIEWS POSTID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    VIEWS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID
  GROUP BY VIEWS
  HAVING VIEWS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID for MCV POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
JOIN USERS_UPVOTES_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_USERID_ID_USERS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID for NONMCV POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
LEFT JOIN USERS_UPVOTES_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES, POSTHISTORY_USERID_ID_USERS.POSTID
;

-- Insert into norms for Non-MCV POSTHISTORY_USERID_ID_USERS UPVOTES POSTID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    UPVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID
  GROUP BY UPVOTES
  HAVING UPVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID for MCV POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
JOIN USERS_DOWNVOTES_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_USERID_ID_USERS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID for NONMCV POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
LEFT JOIN USERS_DOWNVOTES_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES, POSTHISTORY_USERID_ID_USERS.POSTID
;

-- Insert into norms for Non-MCV POSTHISTORY_USERID_ID_USERS DOWNVOTES POSTID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    DOWNVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID
  GROUP BY DOWNVOTES
  HAVING DOWNVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_CREATIONDATE_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_CREATIONDATE_POSTID for Histogram POSTHISTORY_USERID_ID_USERS.USERS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_CREATIONDATE_POSTID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_CREATIONDATE AS CREATIONDATE,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS

WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_CREATIONDATE, POSTHISTORY_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_USERID_ID_USERS_CREATIONDATE_POSTID d
        JOIN USERS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID for Histogram POSTHISTORY_USERID_ID_USERS.USERS_VIEWS -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS

WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_VIEWS, POSTHISTORY_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_POSTID d
        JOIN USERS_VIEWS_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWS <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID for Histogram POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS

WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES, POSTHISTORY_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_POSTID d
        JOIN USERS_UPVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.UPVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.UPVOTES <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_REPUTATION_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_REPUTATION_POSTID for Histogram POSTHISTORY_USERID_ID_USERS.USERS_REPUTATION -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_REPUTATION_POSTID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_REPUTATION AS REPUTATION,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS

WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_REPUTATION, POSTHISTORY_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'REPUTATION' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_USERID_ID_USERS_REPUTATION_POSTID d
        JOIN USERS_REPUTATION_histogram h
        ON (h.lower_bound IS NULL OR d.REPUTATION >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.REPUTATION <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID for Histogram POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    POSTHISTORY_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS

WHERE POSTHISTORY_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES, POSTHISTORY_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_POSTID d
        JOIN USERS_DOWNVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.DOWNVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DOWNVOTES <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for MCV POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for NONMCV POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTHISTORY_POSTID_ID_POSTS ANSWERCOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for MCV POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for NONMCV POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTHISTORY_POSTID_ID_POSTS FAVORITECOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_POSTID for MCV POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_POSTID for NONMCV POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTHISTORY_POSTID_ID_POSTS POSTTYPEID POSTID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_POSTID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID for MCV POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID for NONMCV POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTHISTORY_POSTID_ID_POSTS SCORE POSTID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for MCV POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for NONMCV POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV POSTHISTORY_POSTID_ID_POSTS COMMENTCOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_CREATIONDATE_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_CREATIONDATE_POSTID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_CREATIONDATE_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_CREATIONDATE, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_CREATIONDATE_POSTID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_POSTID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_POSTID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_VIEWCOUNT_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_VIEWCOUNT_POSTID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_VIEWCOUNT_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_VIEWCOUNT, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_VIEWCOUNT_POSTID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_POSTID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTHISTORY_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTHISTORY_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_POSTID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID
CREATE TEMP TABLE Degree_POSTHISTORY_USERID AS
SELECT
    POSTHISTORY.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY

WHERE POSTHISTORY.USERID IS NOT NULL
GROUP BY
    POSTHISTORY.USERID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    22107 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_POSTHISTORY_USERID
  LIMIT 22107
);

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTHISTORYTYPEID_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTHISTORYTYPEID_USERID for MCV POSTHISTORY.POSTHISTORYTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTHISTORYTYPEID_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY
JOIN POSTHISTORY_POSTHISTORYTYPEID_mcv mcvt ON POSTHISTORY.POSTHISTORYTYPEID = mcvt.POSTHISTORYTYPEID
WHERE POSTHISTORY.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTHISTORYTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTHISTORYTYPEID_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTHISTORYTYPEID_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTHISTORYTYPEID_USERID for NONMCV POSTHISTORY.POSTHISTORYTYPEID -- MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTHISTORYTYPEID_USERID AS
SELECT
    POSTHISTORY.POSTHISTORYTYPEID AS POSTHISTORYTYPEID,
    POSTHISTORY.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY
LEFT JOIN POSTHISTORY_POSTHISTORYTYPEID_mcv mcvt ON POSTHISTORY.POSTHISTORYTYPEID = mcvt.POSTHISTORYTYPEID
WHERE POSTHISTORY.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY.POSTHISTORYTYPEID, POSTHISTORY.USERID
;

-- Insert into norms for Non-MCV POSTHISTORY POSTHISTORYTYPEID USERID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTHISTORYTYPEID_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTHISTORYTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTHISTORYTYPEID_USERID
  GROUP BY POSTHISTORYTYPEID
  HAVING POSTHISTORYTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTHISTORYTYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_CREATIONDATE_USERID;

-- Create aggregator table Degree_POSTHISTORY_CREATIONDATE_USERID for Histogram POSTHISTORY.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_CREATIONDATE_USERID AS
SELECT
    POSTHISTORY.CREATIONDATE AS CREATIONDATE,
    POSTHISTORY.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY

WHERE POSTHISTORY.USERID IS NOT NULL
GROUP BY
    POSTHISTORY.CREATIONDATE, POSTHISTORY.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  WITH
        joined_data AS MATERIALIZED (
            SELECT
            d.USERID AS USERID, h.bucket_id AS bucket_id, d.deg AS deg
            FROM Degree_POSTHISTORY_CREATIONDATE_USERID d
            JOIN POSTHISTORY_CREATIONDATE_histogram h
            ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
            AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
        )
        SELECT USERID, bucket_id, SUM(deg) as deg
        FROM joined_data
        GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID for MCV POSTHISTORY_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
JOIN USERS_VIEWS_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID for NONMCV POSTHISTORY_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
LEFT JOIN USERS_VIEWS_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_VIEWS, POSTHISTORY_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV POSTHISTORY_USERID_ID_USERS VIEWS USERID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    VIEWS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID
  GROUP BY VIEWS
  HAVING VIEWS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID for MCV POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
JOIN USERS_UPVOTES_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID for NONMCV POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
LEFT JOIN USERS_UPVOTES_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES, POSTHISTORY_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV POSTHISTORY_USERID_ID_USERS UPVOTES USERID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    UPVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID
  GROUP BY UPVOTES
  HAVING UPVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID for MCV POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
JOIN USERS_DOWNVOTES_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID for NONMCV POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS
LEFT JOIN USERS_DOWNVOTES_mcv mcvt ON POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES, POSTHISTORY_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV POSTHISTORY_USERID_ID_USERS DOWNVOTES USERID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    DOWNVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID
  GROUP BY DOWNVOTES
  HAVING DOWNVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_CREATIONDATE_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_CREATIONDATE_USERID for Histogram POSTHISTORY_USERID_ID_USERS.USERS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_CREATIONDATE_USERID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_CREATIONDATE AS CREATIONDATE,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS

WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_CREATIONDATE, POSTHISTORY_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_USERID_ID_USERS_CREATIONDATE_USERID d
        JOIN USERS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID for Histogram POSTHISTORY_USERID_ID_USERS.USERS_VIEWS -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS

WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_VIEWS, POSTHISTORY_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_USERID_ID_USERS_VIEWS_USERID d
        JOIN USERS_VIEWS_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWS <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID for Histogram POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS

WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_UPVOTES, POSTHISTORY_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_USERID_ID_USERS_UPVOTES_USERID d
        JOIN USERS_UPVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.UPVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.UPVOTES <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_REPUTATION_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_REPUTATION_USERID for Histogram POSTHISTORY_USERID_ID_USERS.USERS_REPUTATION -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_REPUTATION_USERID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_REPUTATION AS REPUTATION,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS

WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_REPUTATION, POSTHISTORY_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'REPUTATION' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_USERID_ID_USERS_REPUTATION_USERID d
        JOIN USERS_REPUTATION_histogram h
        ON (h.lower_bound IS NULL OR d.REPUTATION >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.REPUTATION <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID for Histogram POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    POSTHISTORY_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_USERID_ID_USERS

WHERE POSTHISTORY_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_USERID_ID_USERS.USERS_DOWNVOTES, POSTHISTORY_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_USERID_ID_USERS_DOWNVOTES_USERID d
        JOIN USERS_DOWNVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.DOWNVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DOWNVOTES <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID for MCV POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID for NONMCV POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTHISTORY_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV POSTHISTORY_POSTID_ID_POSTS ANSWERCOUNT USERID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID for MCV POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID for NONMCV POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTHISTORY_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV POSTHISTORY_POSTID_ID_POSTS FAVORITECOUNT USERID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_USERID for MCV POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_USERID for NONMCV POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_POSTTYPEID, POSTHISTORY_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV POSTHISTORY_POSTID_ID_POSTS POSTTYPEID USERID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTID_ID_POSTS_POSTTYPEID_USERID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID for MCV POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID for NONMCV POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE, POSTHISTORY_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV POSTHISTORY_POSTID_ID_POSTS SCORE USERID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID for MCV POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID for NONMCV POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTHISTORY_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV POSTHISTORY_POSTID_ID_POSTS COMMENTCOUNT USERID NONMCV
-- Among all non-MCV values in Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_CREATIONDATE_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_CREATIONDATE_USERID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_CREATIONDATE_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_CREATIONDATE, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_CREATIONDATE_USERID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_ANSWERCOUNT_USERID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_FAVORITECOUNT_USERID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_VIEWCOUNT_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_VIEWCOUNT_USERID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_VIEWCOUNT_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_VIEWCOUNT, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_VIEWCOUNT_USERID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_SCORE, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_SCORE_USERID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID;

-- Create aggregator table Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID for Histogram POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID AS
SELECT
    POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    POSTHISTORY_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM POSTHISTORY_POSTID_ID_POSTS

WHERE POSTHISTORY_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    POSTHISTORY_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, POSTHISTORY_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'POSTHISTORY' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_POSTHISTORY_POSTID_ID_POSTS_COMMENTCOUNT_USERID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for COMMENTS
----------------------------------


DROP TABLE IF EXISTS COMMENTS_USERID_ID_USERS;

-- Create temp table COMMENTS_USERID_ID_USERS (FK->PK join)
CREATE TEMP TABLE COMMENTS_USERID_ID_USERS AS
SELECT
    COMMENTS.POSTID AS POSTID, COMMENTS.USERID AS USERID,
    USERS.DOWNVOTES AS USERS_DOWNVOTES, USERS.CREATIONDATE AS USERS_CREATIONDATE, USERS.REPUTATION AS USERS_REPUTATION, USERS.VIEWS AS USERS_VIEWS, USERS.UPVOTES AS USERS_UPVOTES
FROM COMMENTS
JOIN USERS
  ON COMMENTS.USERID = USERS.ID
;

DROP TABLE IF EXISTS COMMENTS_POSTID_ID_POSTS;

-- Create temp table COMMENTS_POSTID_ID_POSTS (FK->PK join)
CREATE TEMP TABLE COMMENTS_POSTID_ID_POSTS AS
SELECT
    COMMENTS.POSTID AS POSTID, COMMENTS.USERID AS USERID,
    POSTS.SCORE AS POSTS_SCORE, POSTS.CREATIONDATE AS POSTS_CREATIONDATE, POSTS.POSTTYPEID AS POSTS_POSTTYPEID, POSTS.FAVORITECOUNT AS POSTS_FAVORITECOUNT, POSTS.ANSWERCOUNT AS POSTS_ANSWERCOUNT, POSTS.COMMENTCOUNT AS POSTS_COMMENTCOUNT, POSTS.VIEWCOUNT AS POSTS_VIEWCOUNT
FROM COMMENTS
JOIN POSTS
  ON COMMENTS.POSTID = POSTS.ID
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID
CREATE TEMP TABLE Degree_COMMENTS_POSTID AS
SELECT
    COMMENTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS

WHERE COMMENTS.POSTID IS NOT NULL
GROUP BY
    COMMENTS.POSTID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    53418 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_POSTID
  LIMIT 53418
);

DROP TABLE IF EXISTS Degree_COMMENTS_SCORE_POSTID;

-- Create aggregator table Degree_COMMENTS_SCORE_POSTID for MCV COMMENTS.SCORE -- MCV
CREATE TEMP TABLE Degree_COMMENTS_SCORE_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS
JOIN COMMENTS_SCORE_mcv mcvt ON COMMENTS.SCORE = mcvt.SCORE
WHERE COMMENTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_SCORE_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_SCORE_POSTID;

-- Create aggregator table Degree_COMMENTS_SCORE_POSTID for NONMCV COMMENTS.SCORE -- MCV
CREATE TEMP TABLE Degree_COMMENTS_SCORE_POSTID AS
SELECT
    COMMENTS.SCORE AS SCORE,
    COMMENTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS
LEFT JOIN COMMENTS_SCORE_mcv mcvt ON COMMENTS.SCORE = mcvt.SCORE
WHERE COMMENTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS.SCORE, COMMENTS.POSTID
;

-- Insert into norms for Non-MCV COMMENTS SCORE POSTID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_SCORE_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_SCORE_POSTID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_CREATIONDATE_POSTID;

-- Create aggregator table Degree_COMMENTS_CREATIONDATE_POSTID for Histogram COMMENTS.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_COMMENTS_CREATIONDATE_POSTID AS
SELECT
    COMMENTS.CREATIONDATE AS CREATIONDATE,
    COMMENTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS

WHERE COMMENTS.POSTID IS NOT NULL
GROUP BY
    COMMENTS.CREATIONDATE, COMMENTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_CREATIONDATE_POSTID d
        JOIN COMMENTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID for MCV COMMENTS_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
JOIN USERS_VIEWS_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_USERID_ID_USERS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID for NONMCV COMMENTS_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
LEFT JOIN USERS_VIEWS_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_VIEWS, COMMENTS_USERID_ID_USERS.POSTID
;

-- Insert into norms for Non-MCV COMMENTS_USERID_ID_USERS VIEWS POSTID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    VIEWS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID
  GROUP BY VIEWS
  HAVING VIEWS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID for MCV COMMENTS_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
JOIN USERS_UPVOTES_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_USERID_ID_USERS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID for NONMCV COMMENTS_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
LEFT JOIN USERS_UPVOTES_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_UPVOTES, COMMENTS_USERID_ID_USERS.POSTID
;

-- Insert into norms for Non-MCV COMMENTS_USERID_ID_USERS UPVOTES POSTID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    UPVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID
  GROUP BY UPVOTES
  HAVING UPVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID for MCV COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
JOIN USERS_DOWNVOTES_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_USERID_ID_USERS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID for NONMCV COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
LEFT JOIN USERS_DOWNVOTES_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES, COMMENTS_USERID_ID_USERS.POSTID
;

-- Insert into norms for Non-MCV COMMENTS_USERID_ID_USERS DOWNVOTES POSTID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    DOWNVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID
  GROUP BY DOWNVOTES
  HAVING DOWNVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_CREATIONDATE_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_CREATIONDATE_POSTID for Histogram COMMENTS_USERID_ID_USERS.USERS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_CREATIONDATE_POSTID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_CREATIONDATE AS CREATIONDATE,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS

WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_CREATIONDATE, COMMENTS_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_USERID_ID_USERS_CREATIONDATE_POSTID d
        JOIN USERS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID for Histogram COMMENTS_USERID_ID_USERS.USERS_VIEWS -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS

WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_VIEWS, COMMENTS_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_USERID_ID_USERS_VIEWS_POSTID d
        JOIN USERS_VIEWS_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWS <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID for Histogram COMMENTS_USERID_ID_USERS.USERS_UPVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS

WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_UPVOTES, COMMENTS_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_USERID_ID_USERS_UPVOTES_POSTID d
        JOIN USERS_UPVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.UPVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.UPVOTES <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_REPUTATION_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_REPUTATION_POSTID for Histogram COMMENTS_USERID_ID_USERS.USERS_REPUTATION -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_REPUTATION_POSTID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_REPUTATION AS REPUTATION,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS

WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_REPUTATION, COMMENTS_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'REPUTATION' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_USERID_ID_USERS_REPUTATION_POSTID d
        JOIN USERS_REPUTATION_histogram h
        ON (h.lower_bound IS NULL OR d.REPUTATION >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.REPUTATION <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID for Histogram COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    COMMENTS_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS

WHERE COMMENTS_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES, COMMENTS_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_POSTID d
        JOIN USERS_DOWNVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.DOWNVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DOWNVOTES <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for MCV COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for NONMCV COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, COMMENTS_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV COMMENTS_POSTID_ID_POSTS ANSWERCOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for MCV COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for NONMCV COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, COMMENTS_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV COMMENTS_POSTID_ID_POSTS FAVORITECOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_POSTID for MCV COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_POSTID for NONMCV COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID, COMMENTS_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV COMMENTS_POSTID_ID_POSTS POSTTYPEID POSTID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_POSTID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID for MCV COMMENTS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID for NONMCV COMMENTS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_SCORE, COMMENTS_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV COMMENTS_POSTID_ID_POSTS SCORE POSTID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for MCV COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for NONMCV COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, COMMENTS_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV COMMENTS_POSTID_ID_POSTS COMMENTCOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_CREATIONDATE_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_CREATIONDATE_POSTID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_CREATIONDATE_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_CREATIONDATE, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_CREATIONDATE_POSTID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_POSTID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_POSTID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_VIEWCOUNT_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_VIEWCOUNT_POSTID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_VIEWCOUNT_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_VIEWCOUNT, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_VIEWCOUNT_POSTID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_SCORE, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_SCORE_POSTID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    COMMENTS_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, COMMENTS_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_POSTID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID;

-- Create aggregator table Degree_COMMENTS_USERID
CREATE TEMP TABLE Degree_COMMENTS_USERID AS
SELECT
    COMMENTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS

WHERE COMMENTS.USERID IS NOT NULL
GROUP BY
    COMMENTS.USERID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    13647 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_COMMENTS_USERID
  LIMIT 13647
);

DROP TABLE IF EXISTS Degree_COMMENTS_SCORE_USERID;

-- Create aggregator table Degree_COMMENTS_SCORE_USERID for MCV COMMENTS.SCORE -- MCV
CREATE TEMP TABLE Degree_COMMENTS_SCORE_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS
JOIN COMMENTS_SCORE_mcv mcvt ON COMMENTS.SCORE = mcvt.SCORE
WHERE COMMENTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_SCORE_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_SCORE_USERID;

-- Create aggregator table Degree_COMMENTS_SCORE_USERID for NONMCV COMMENTS.SCORE -- MCV
CREATE TEMP TABLE Degree_COMMENTS_SCORE_USERID AS
SELECT
    COMMENTS.SCORE AS SCORE,
    COMMENTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS
LEFT JOIN COMMENTS_SCORE_mcv mcvt ON COMMENTS.SCORE = mcvt.SCORE
WHERE COMMENTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS.SCORE, COMMENTS.USERID
;

-- Insert into norms for Non-MCV COMMENTS SCORE USERID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_SCORE_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_SCORE_USERID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_CREATIONDATE_USERID;

-- Create aggregator table Degree_COMMENTS_CREATIONDATE_USERID for Histogram COMMENTS.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_COMMENTS_CREATIONDATE_USERID AS
SELECT
    COMMENTS.CREATIONDATE AS CREATIONDATE,
    COMMENTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS

WHERE COMMENTS.USERID IS NOT NULL
GROUP BY
    COMMENTS.CREATIONDATE, COMMENTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_CREATIONDATE_USERID d
        JOIN COMMENTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID for MCV COMMENTS_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
JOIN USERS_VIEWS_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID for NONMCV COMMENTS_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
LEFT JOIN USERS_VIEWS_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_VIEWS, COMMENTS_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV COMMENTS_USERID_ID_USERS VIEWS USERID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    VIEWS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID
  GROUP BY VIEWS
  HAVING VIEWS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID for MCV COMMENTS_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
JOIN USERS_UPVOTES_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID for NONMCV COMMENTS_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
LEFT JOIN USERS_UPVOTES_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_UPVOTES, COMMENTS_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV COMMENTS_USERID_ID_USERS UPVOTES USERID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    UPVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID
  GROUP BY UPVOTES
  HAVING UPVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID for MCV COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
JOIN USERS_DOWNVOTES_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID for NONMCV COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS
LEFT JOIN USERS_DOWNVOTES_mcv mcvt ON COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES, COMMENTS_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV COMMENTS_USERID_ID_USERS DOWNVOTES USERID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    DOWNVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID
  GROUP BY DOWNVOTES
  HAVING DOWNVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_CREATIONDATE_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_CREATIONDATE_USERID for Histogram COMMENTS_USERID_ID_USERS.USERS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_CREATIONDATE_USERID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_CREATIONDATE AS CREATIONDATE,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS

WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_CREATIONDATE, COMMENTS_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_USERID_ID_USERS_CREATIONDATE_USERID d
        JOIN USERS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID for Histogram COMMENTS_USERID_ID_USERS.USERS_VIEWS -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS

WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_VIEWS, COMMENTS_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_USERID_ID_USERS_VIEWS_USERID d
        JOIN USERS_VIEWS_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWS <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID for Histogram COMMENTS_USERID_ID_USERS.USERS_UPVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS

WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_UPVOTES, COMMENTS_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_USERID_ID_USERS_UPVOTES_USERID d
        JOIN USERS_UPVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.UPVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.UPVOTES <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_REPUTATION_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_REPUTATION_USERID for Histogram COMMENTS_USERID_ID_USERS.USERS_REPUTATION -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_REPUTATION_USERID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_REPUTATION AS REPUTATION,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS

WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_REPUTATION, COMMENTS_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'REPUTATION' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_USERID_ID_USERS_REPUTATION_USERID d
        JOIN USERS_REPUTATION_histogram h
        ON (h.lower_bound IS NULL OR d.REPUTATION >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.REPUTATION <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID for Histogram COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    COMMENTS_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_USERID_ID_USERS

WHERE COMMENTS_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    COMMENTS_USERID_ID_USERS.USERS_DOWNVOTES, COMMENTS_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_USERID_ID_USERS_DOWNVOTES_USERID d
        JOIN USERS_DOWNVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.DOWNVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DOWNVOTES <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID for MCV COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID for NONMCV COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, COMMENTS_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV COMMENTS_POSTID_ID_POSTS ANSWERCOUNT USERID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID for MCV COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID for NONMCV COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, COMMENTS_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV COMMENTS_POSTID_ID_POSTS FAVORITECOUNT USERID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_USERID for MCV COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_USERID for NONMCV COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_POSTTYPEID, COMMENTS_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV COMMENTS_POSTID_ID_POSTS POSTTYPEID USERID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_POSTID_ID_POSTS_POSTTYPEID_USERID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID for MCV COMMENTS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID for NONMCV COMMENTS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_SCORE, COMMENTS_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV COMMENTS_POSTID_ID_POSTS SCORE USERID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID for MCV COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID for NONMCV COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, COMMENTS_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV COMMENTS_POSTID_ID_POSTS COMMENTCOUNT USERID NONMCV
-- Among all non-MCV values in Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_CREATIONDATE_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_CREATIONDATE_USERID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_CREATIONDATE_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_CREATIONDATE, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_CREATIONDATE_USERID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_ANSWERCOUNT_USERID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_FAVORITECOUNT_USERID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_VIEWCOUNT_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_VIEWCOUNT_USERID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_VIEWCOUNT_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_VIEWCOUNT, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_VIEWCOUNT_USERID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_SCORE, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_SCORE_USERID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID;

-- Create aggregator table Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID for Histogram COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID AS
SELECT
    COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    COMMENTS_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM COMMENTS_POSTID_ID_POSTS

WHERE COMMENTS_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    COMMENTS_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, COMMENTS_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'COMMENTS' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_COMMENTS_POSTID_ID_POSTS_COMMENTCOUNT_USERID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for VOTES
----------------------------------


DROP TABLE IF EXISTS VOTES_USERID_ID_USERS;

-- Create temp table VOTES_USERID_ID_USERS (FK->PK join)
CREATE TEMP TABLE VOTES_USERID_ID_USERS AS
SELECT
    VOTES.POSTID AS POSTID, VOTES.USERID AS USERID,
    USERS.DOWNVOTES AS USERS_DOWNVOTES, USERS.CREATIONDATE AS USERS_CREATIONDATE, USERS.REPUTATION AS USERS_REPUTATION, USERS.VIEWS AS USERS_VIEWS, USERS.UPVOTES AS USERS_UPVOTES
FROM VOTES
JOIN USERS
  ON VOTES.USERID = USERS.ID
;

DROP TABLE IF EXISTS VOTES_POSTID_ID_POSTS;

-- Create temp table VOTES_POSTID_ID_POSTS (FK->PK join)
CREATE TEMP TABLE VOTES_POSTID_ID_POSTS AS
SELECT
    VOTES.POSTID AS POSTID, VOTES.USERID AS USERID,
    POSTS.SCORE AS POSTS_SCORE, POSTS.CREATIONDATE AS POSTS_CREATIONDATE, POSTS.POSTTYPEID AS POSTS_POSTTYPEID, POSTS.FAVORITECOUNT AS POSTS_FAVORITECOUNT, POSTS.ANSWERCOUNT AS POSTS_ANSWERCOUNT, POSTS.COMMENTCOUNT AS POSTS_COMMENTCOUNT, POSTS.VIEWCOUNT AS POSTS_VIEWCOUNT
FROM VOTES
JOIN POSTS
  ON VOTES.POSTID = POSTS.ID
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID;

-- Create aggregator table Degree_VOTES_POSTID
CREATE TEMP TABLE Degree_VOTES_POSTID AS
SELECT
    VOTES.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES

WHERE VOTES.POSTID IS NOT NULL
GROUP BY
    VOTES.POSTID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    65536 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 65536
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    76833 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_POSTID
  LIMIT 76833
);

DROP TABLE IF EXISTS Degree_VOTES_VOTETYPEID_POSTID;

-- Create aggregator table Degree_VOTES_VOTETYPEID_POSTID for MCV VOTES.VOTETYPEID -- MCV
CREATE TEMP TABLE Degree_VOTES_VOTETYPEID_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES
JOIN VOTES_VOTETYPEID_mcv mcvt ON VOTES.VOTETYPEID = mcvt.VOTETYPEID
WHERE VOTES.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VOTETYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_VOTETYPEID_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_VOTETYPEID_POSTID;

-- Create aggregator table Degree_VOTES_VOTETYPEID_POSTID for NONMCV VOTES.VOTETYPEID -- MCV
CREATE TEMP TABLE Degree_VOTES_VOTETYPEID_POSTID AS
SELECT
    VOTES.VOTETYPEID AS VOTETYPEID,
    VOTES.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES
LEFT JOIN VOTES_VOTETYPEID_mcv mcvt ON VOTES.VOTETYPEID = mcvt.VOTETYPEID
WHERE VOTES.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES.VOTETYPEID, VOTES.POSTID
;

-- Insert into norms for Non-MCV VOTES VOTETYPEID POSTID NONMCV
-- Among all non-MCV values in Degree_VOTES_VOTETYPEID_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    VOTETYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_VOTETYPEID_POSTID
  GROUP BY VOTETYPEID
  HAVING VOTETYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VOTETYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_CREATIONDATE_POSTID;

-- Create aggregator table Degree_VOTES_CREATIONDATE_POSTID for Histogram VOTES.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_VOTES_CREATIONDATE_POSTID AS
SELECT
    VOTES.CREATIONDATE AS CREATIONDATE,
    VOTES.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES

WHERE VOTES.POSTID IS NOT NULL
GROUP BY
    VOTES.CREATIONDATE, VOTES.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  WITH
        joined_data AS MATERIALIZED (
            SELECT
            d.POSTID AS POSTID, h.bucket_id AS bucket_id, d.deg AS deg
            FROM Degree_VOTES_CREATIONDATE_POSTID d
            JOIN VOTES_CREATIONDATE_histogram h
            ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
            AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
        )
        SELECT POSTID, bucket_id, SUM(deg) as deg
        FROM joined_data
        GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_BOUNTYAMOUNT_POSTID;

-- Create aggregator table Degree_VOTES_BOUNTYAMOUNT_POSTID for Histogram VOTES.BOUNTYAMOUNT -- RANGE
CREATE TEMP TABLE Degree_VOTES_BOUNTYAMOUNT_POSTID AS
SELECT
    VOTES.BOUNTYAMOUNT AS BOUNTYAMOUNT,
    VOTES.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES

WHERE VOTES.POSTID IS NOT NULL
GROUP BY
    VOTES.BOUNTYAMOUNT, VOTES.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'BOUNTYAMOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_BOUNTYAMOUNT_POSTID d
        JOIN VOTES_BOUNTYAMOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.BOUNTYAMOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.BOUNTYAMOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID for MCV VOTES_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
JOIN USERS_VIEWS_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_USERID_ID_USERS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID for NONMCV VOTES_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
LEFT JOIN USERS_VIEWS_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_USERID_ID_USERS.USERS_VIEWS, VOTES_USERID_ID_USERS.POSTID
;

-- Insert into norms for Non-MCV VOTES_USERID_ID_USERS VIEWS POSTID NONMCV
-- Among all non-MCV values in Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    VIEWS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID
  GROUP BY VIEWS
  HAVING VIEWS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID for MCV VOTES_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
JOIN USERS_UPVOTES_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_USERID_ID_USERS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID for NONMCV VOTES_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
LEFT JOIN USERS_UPVOTES_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_USERID_ID_USERS.USERS_UPVOTES, VOTES_USERID_ID_USERS.POSTID
;

-- Insert into norms for Non-MCV VOTES_USERID_ID_USERS UPVOTES POSTID NONMCV
-- Among all non-MCV values in Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    UPVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID
  GROUP BY UPVOTES
  HAVING UPVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID for MCV VOTES_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
JOIN USERS_DOWNVOTES_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_USERID_ID_USERS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID for NONMCV VOTES_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
LEFT JOIN USERS_DOWNVOTES_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_USERID_ID_USERS.USERS_DOWNVOTES, VOTES_USERID_ID_USERS.POSTID
;

-- Insert into norms for Non-MCV VOTES_USERID_ID_USERS DOWNVOTES POSTID NONMCV
-- Among all non-MCV values in Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    DOWNVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID
  GROUP BY DOWNVOTES
  HAVING DOWNVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_CREATIONDATE_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_CREATIONDATE_POSTID for Histogram VOTES_USERID_ID_USERS.USERS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_CREATIONDATE_POSTID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_CREATIONDATE AS CREATIONDATE,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS

WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    VOTES_USERID_ID_USERS.USERS_CREATIONDATE, VOTES_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_USERID_ID_USERS_CREATIONDATE_POSTID d
        JOIN USERS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID for Histogram VOTES_USERID_ID_USERS.USERS_VIEWS -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS

WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    VOTES_USERID_ID_USERS.USERS_VIEWS, VOTES_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_USERID_ID_USERS_VIEWS_POSTID d
        JOIN USERS_VIEWS_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWS <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID for Histogram VOTES_USERID_ID_USERS.USERS_UPVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS

WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    VOTES_USERID_ID_USERS.USERS_UPVOTES, VOTES_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_USERID_ID_USERS_UPVOTES_POSTID d
        JOIN USERS_UPVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.UPVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.UPVOTES <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_REPUTATION_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_REPUTATION_POSTID for Histogram VOTES_USERID_ID_USERS.USERS_REPUTATION -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_REPUTATION_POSTID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_REPUTATION AS REPUTATION,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS

WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    VOTES_USERID_ID_USERS.USERS_REPUTATION, VOTES_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'REPUTATION' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_USERID_ID_USERS_REPUTATION_POSTID d
        JOIN USERS_REPUTATION_histogram h
        ON (h.lower_bound IS NULL OR d.REPUTATION >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.REPUTATION <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID for Histogram VOTES_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    VOTES_USERID_ID_USERS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS

WHERE VOTES_USERID_ID_USERS.POSTID IS NOT NULL
GROUP BY
    VOTES_USERID_ID_USERS.USERS_DOWNVOTES, VOTES_USERID_ID_USERS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_USERID_ID_USERS_DOWNVOTES_POSTID d
        JOIN USERS_DOWNVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.DOWNVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DOWNVOTES <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for MCV VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for NONMCV VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, VOTES_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV VOTES_POSTID_ID_POSTS ANSWERCOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for MCV VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for NONMCV VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, VOTES_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV VOTES_POSTID_ID_POSTS FAVORITECOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_POSTID for MCV VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_POSTID for NONMCV VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID, VOTES_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV VOTES_POSTID_ID_POSTS POSTTYPEID POSTID NONMCV
-- Among all non-MCV values in Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_POSTID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID for MCV VOTES_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID for NONMCV VOTES_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_SCORE, VOTES_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV VOTES_POSTID_ID_POSTS SCORE POSTID NONMCV
-- Among all non-MCV values in Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for MCV VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for NONMCV VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, VOTES_POSTID_ID_POSTS.POSTID
;

-- Insert into norms for Non-MCV VOTES_POSTID_ID_POSTS COMMENTCOUNT POSTID NONMCV
-- Among all non-MCV values in Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_CREATIONDATE_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_CREATIONDATE_POSTID for Histogram VOTES_POSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_CREATIONDATE_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_CREATIONDATE, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_CREATIONDATE_POSTID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID for Histogram VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_POSTID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID for Histogram VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_POSTID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_VIEWCOUNT_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_VIEWCOUNT_POSTID for Histogram VOTES_POSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_VIEWCOUNT_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_VIEWCOUNT, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_VIEWCOUNT_POSTID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID for Histogram VOTES_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_SCORE, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_SCORE_POSTID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID for Histogram VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    VOTES_POSTID_ID_POSTS.POSTID AS POSTID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.POSTID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, VOTES_POSTID_ID_POSTS.POSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'POSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        POSTID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_POSTID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE POSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY POSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID;

-- Create aggregator table Degree_VOTES_USERID
CREATE TEMP TABLE Degree_VOTES_USERID AS
SELECT
    VOTES.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES

WHERE VOTES.USERID IS NOT NULL
GROUP BY
    VOTES.USERID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    5543 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_VOTES_USERID
  LIMIT 5543
);

DROP TABLE IF EXISTS Degree_VOTES_VOTETYPEID_USERID;

-- Create aggregator table Degree_VOTES_VOTETYPEID_USERID for MCV VOTES.VOTETYPEID -- MCV
CREATE TEMP TABLE Degree_VOTES_VOTETYPEID_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES
JOIN VOTES_VOTETYPEID_mcv mcvt ON VOTES.VOTETYPEID = mcvt.VOTETYPEID
WHERE VOTES.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VOTETYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_VOTETYPEID_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_VOTETYPEID_USERID;

-- Create aggregator table Degree_VOTES_VOTETYPEID_USERID for NONMCV VOTES.VOTETYPEID -- MCV
CREATE TEMP TABLE Degree_VOTES_VOTETYPEID_USERID AS
SELECT
    VOTES.VOTETYPEID AS VOTETYPEID,
    VOTES.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES
LEFT JOIN VOTES_VOTETYPEID_mcv mcvt ON VOTES.VOTETYPEID = mcvt.VOTETYPEID
WHERE VOTES.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES.VOTETYPEID, VOTES.USERID
;

-- Insert into norms for Non-MCV VOTES VOTETYPEID USERID NONMCV
-- Among all non-MCV values in Degree_VOTES_VOTETYPEID_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    VOTETYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_VOTETYPEID_USERID
  GROUP BY VOTETYPEID
  HAVING VOTETYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VOTETYPEID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_CREATIONDATE_USERID;

-- Create aggregator table Degree_VOTES_CREATIONDATE_USERID for Histogram VOTES.CREATIONDATE -- RANGE
CREATE TEMP TABLE Degree_VOTES_CREATIONDATE_USERID AS
SELECT
    VOTES.CREATIONDATE AS CREATIONDATE,
    VOTES.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES

WHERE VOTES.USERID IS NOT NULL
GROUP BY
    VOTES.CREATIONDATE, VOTES.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  WITH
        joined_data AS MATERIALIZED (
            SELECT
            d.USERID AS USERID, h.bucket_id AS bucket_id, d.deg AS deg
            FROM Degree_VOTES_CREATIONDATE_USERID d
            JOIN VOTES_CREATIONDATE_histogram h
            ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
            AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
        )
        SELECT USERID, bucket_id, SUM(deg) as deg
        FROM joined_data
        GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_BOUNTYAMOUNT_USERID;

-- Create aggregator table Degree_VOTES_BOUNTYAMOUNT_USERID for Histogram VOTES.BOUNTYAMOUNT -- RANGE
CREATE TEMP TABLE Degree_VOTES_BOUNTYAMOUNT_USERID AS
SELECT
    VOTES.BOUNTYAMOUNT AS BOUNTYAMOUNT,
    VOTES.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES

WHERE VOTES.USERID IS NOT NULL
GROUP BY
    VOTES.BOUNTYAMOUNT, VOTES.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'BOUNTYAMOUNT' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_BOUNTYAMOUNT_USERID d
        JOIN VOTES_BOUNTYAMOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.BOUNTYAMOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.BOUNTYAMOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_VIEWS_USERID for MCV VOTES_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
JOIN USERS_VIEWS_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_USERID_ID_USERS_VIEWS_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_VIEWS_USERID for NONMCV VOTES_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
LEFT JOIN USERS_VIEWS_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_USERID_ID_USERS.USERS_VIEWS, VOTES_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV VOTES_USERID_ID_USERS VIEWS USERID NONMCV
-- Among all non-MCV values in Degree_VOTES_USERID_ID_USERS_VIEWS_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    VIEWS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_USERID_ID_USERS_VIEWS_USERID
  GROUP BY VIEWS
  HAVING VIEWS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID for MCV VOTES_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
JOIN USERS_UPVOTES_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID for NONMCV VOTES_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
LEFT JOIN USERS_UPVOTES_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_USERID_ID_USERS.USERS_UPVOTES, VOTES_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV VOTES_USERID_ID_USERS UPVOTES USERID NONMCV
-- Among all non-MCV values in Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    UPVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID
  GROUP BY UPVOTES
  HAVING UPVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID for MCV VOTES_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
JOIN USERS_DOWNVOTES_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID for NONMCV VOTES_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS
LEFT JOIN USERS_DOWNVOTES_mcv mcvt ON VOTES_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_USERID_ID_USERS.USERS_DOWNVOTES, VOTES_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV VOTES_USERID_ID_USERS DOWNVOTES USERID NONMCV
-- Among all non-MCV values in Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    DOWNVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID
  GROUP BY DOWNVOTES
  HAVING DOWNVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_CREATIONDATE_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_CREATIONDATE_USERID for Histogram VOTES_USERID_ID_USERS.USERS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_CREATIONDATE_USERID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_CREATIONDATE AS CREATIONDATE,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS

WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    VOTES_USERID_ID_USERS.USERS_CREATIONDATE, VOTES_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_USERID_ID_USERS_CREATIONDATE_USERID d
        JOIN USERS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_VIEWS_USERID for Histogram VOTES_USERID_ID_USERS.USERS_VIEWS -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS

WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    VOTES_USERID_ID_USERS.USERS_VIEWS, VOTES_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_USERID_ID_USERS_VIEWS_USERID d
        JOIN USERS_VIEWS_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWS <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID for Histogram VOTES_USERID_ID_USERS.USERS_UPVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS

WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    VOTES_USERID_ID_USERS.USERS_UPVOTES, VOTES_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_USERID_ID_USERS_UPVOTES_USERID d
        JOIN USERS_UPVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.UPVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.UPVOTES <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_REPUTATION_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_REPUTATION_USERID for Histogram VOTES_USERID_ID_USERS.USERS_REPUTATION -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_REPUTATION_USERID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_REPUTATION AS REPUTATION,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS

WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    VOTES_USERID_ID_USERS.USERS_REPUTATION, VOTES_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'REPUTATION' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_USERID_ID_USERS_REPUTATION_USERID d
        JOIN USERS_REPUTATION_histogram h
        ON (h.lower_bound IS NULL OR d.REPUTATION >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.REPUTATION <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID for Histogram VOTES_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    VOTES_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    VOTES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_USERID_ID_USERS

WHERE VOTES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    VOTES_USERID_ID_USERS.USERS_DOWNVOTES, VOTES_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_USERID_ID_USERS_DOWNVOTES_USERID d
        JOIN USERS_DOWNVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.DOWNVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DOWNVOTES <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID for MCV VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID for NONMCV VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, VOTES_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV VOTES_POSTID_ID_POSTS ANSWERCOUNT USERID NONMCV
-- Among all non-MCV values in Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID for MCV VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID for NONMCV VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, VOTES_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV VOTES_POSTID_ID_POSTS FAVORITECOUNT USERID NONMCV
-- Among all non-MCV values in Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_USERID for MCV VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_USERID for NONMCV VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_POSTTYPEID, VOTES_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV VOTES_POSTID_ID_POSTS POSTTYPEID USERID NONMCV
-- Among all non-MCV values in Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_POSTID_ID_POSTS_POSTTYPEID_USERID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID for MCV VOTES_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID for NONMCV VOTES_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_SCORE, VOTES_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV VOTES_POSTID_ID_POSTS SCORE USERID NONMCV
-- Among all non-MCV values in Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID for MCV VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID for NONMCV VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, VOTES_POSTID_ID_POSTS.USERID
;

-- Insert into norms for Non-MCV VOTES_POSTID_ID_POSTS COMMENTCOUNT USERID NONMCV
-- Among all non-MCV values in Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_CREATIONDATE_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_CREATIONDATE_USERID for Histogram VOTES_POSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_CREATIONDATE_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_CREATIONDATE, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_CREATIONDATE_USERID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID for Histogram VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_ANSWERCOUNT, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_ANSWERCOUNT_USERID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID for Histogram VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_FAVORITECOUNT, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_FAVORITECOUNT_USERID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_VIEWCOUNT_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_VIEWCOUNT_USERID for Histogram VOTES_POSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_VIEWCOUNT_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_VIEWCOUNT, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_VIEWCOUNT_USERID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID for Histogram VOTES_POSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_SCORE, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_SCORE_USERID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID;

-- Create aggregator table Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID for Histogram VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID AS
SELECT
    VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    VOTES_POSTID_ID_POSTS.USERID AS USERID,
    COUNT(*) AS deg
FROM VOTES_POSTID_ID_POSTS

WHERE VOTES_POSTID_ID_POSTS.USERID IS NOT NULL
GROUP BY
    VOTES_POSTID_ID_POSTS.POSTS_COMMENTCOUNT, VOTES_POSTID_ID_POSTS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'VOTES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'POSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_VOTES_POSTID_ID_POSTS_COMMENTCOUNT_USERID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for BADGES
----------------------------------


DROP TABLE IF EXISTS BADGES_USERID_ID_USERS;

-- Create temp table BADGES_USERID_ID_USERS (FK->PK join)
CREATE TEMP TABLE BADGES_USERID_ID_USERS AS
SELECT
    BADGES.USERID AS USERID,
    USERS.DOWNVOTES AS USERS_DOWNVOTES, USERS.CREATIONDATE AS USERS_CREATIONDATE, USERS.REPUTATION AS USERS_REPUTATION, USERS.VIEWS AS USERS_VIEWS, USERS.UPVOTES AS USERS_UPVOTES
FROM BADGES
JOIN USERS
  ON BADGES.USERID = USERS.ID
;

DROP TABLE IF EXISTS Degree_BADGES_USERID;

-- Create aggregator table Degree_BADGES_USERID
CREATE TEMP TABLE Degree_BADGES_USERID AS
SELECT
    BADGES.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES

WHERE BADGES.USERID IS NOT NULL
GROUP BY
    BADGES.USERID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    25078 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_BADGES_USERID
  LIMIT 25078
);

DROP TABLE IF EXISTS Degree_BADGES_DATE_USERID;

-- Create aggregator table Degree_BADGES_DATE_USERID for Histogram BADGES.DATE -- RANGE
CREATE TEMP TABLE Degree_BADGES_DATE_USERID AS
SELECT
    BADGES.DATE AS DATE,
    BADGES.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES

WHERE BADGES.USERID IS NOT NULL
GROUP BY
    BADGES.DATE, BADGES.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DATE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_BADGES_DATE_USERID d
        JOIN BADGES_DATE_histogram h
        ON (h.lower_bound IS NULL OR d.DATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DATE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_VIEWS_USERID for MCV BADGES_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS
JOIN USERS_VIEWS_mcv mcvt ON BADGES_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, BADGES_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_BADGES_USERID_ID_USERS_VIEWS_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_VIEWS_USERID for NONMCV BADGES_USERID_ID_USERS.USERS_VIEWS -- FKPK_MCV
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    BADGES_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS
LEFT JOIN USERS_VIEWS_mcv mcvt ON BADGES_USERID_ID_USERS.USERS_VIEWS = mcvt.VIEWS
WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    BADGES_USERID_ID_USERS.USERS_VIEWS, BADGES_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV BADGES_USERID_ID_USERS VIEWS USERID NONMCV
-- Among all non-MCV values in Degree_BADGES_USERID_ID_USERS_VIEWS_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    VIEWS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_BADGES_USERID_ID_USERS_VIEWS_USERID
  GROUP BY VIEWS
  HAVING VIEWS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID for MCV BADGES_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS
JOIN USERS_UPVOTES_mcv mcvt ON BADGES_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, BADGES_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID for NONMCV BADGES_USERID_ID_USERS.USERS_UPVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    BADGES_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS
LEFT JOIN USERS_UPVOTES_mcv mcvt ON BADGES_USERID_ID_USERS.USERS_UPVOTES = mcvt.UPVOTES
WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    BADGES_USERID_ID_USERS.USERS_UPVOTES, BADGES_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV BADGES_USERID_ID_USERS UPVOTES USERID NONMCV
-- Among all non-MCV values in Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    UPVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID
  GROUP BY UPVOTES
  HAVING UPVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID for MCV BADGES_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS
JOIN USERS_DOWNVOTES_mcv mcvt ON BADGES_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    mcvt.mcv_id, BADGES_USERID_ID_USERS.USERID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'MCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID for NONMCV BADGES_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_MCV
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    BADGES_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS
LEFT JOIN USERS_DOWNVOTES_mcv mcvt ON BADGES_USERID_ID_USERS.USERS_DOWNVOTES = mcvt.DOWNVOTES
WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    BADGES_USERID_ID_USERS.USERS_DOWNVOTES, BADGES_USERID_ID_USERS.USERID
;

-- Insert into norms for Non-MCV BADGES_USERID_ID_USERS DOWNVOTES USERID NONMCV
-- Among all non-MCV values in Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID, find max of each Lp
WITH perValue AS (
  SELECT
    DOWNVOTES,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID
  GROUP BY DOWNVOTES
  HAVING DOWNVOTES IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_CREATIONDATE_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_CREATIONDATE_USERID for Histogram BADGES_USERID_ID_USERS.USERS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_CREATIONDATE_USERID AS
SELECT
    BADGES_USERID_ID_USERS.USERS_CREATIONDATE AS CREATIONDATE,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS

WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    BADGES_USERID_ID_USERS.USERS_CREATIONDATE, BADGES_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_BADGES_USERID_ID_USERS_CREATIONDATE_USERID d
        JOIN USERS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_VIEWS_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_VIEWS_USERID for Histogram BADGES_USERID_ID_USERS.USERS_VIEWS -- FKPK_RANGE
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_VIEWS_USERID AS
SELECT
    BADGES_USERID_ID_USERS.USERS_VIEWS AS VIEWS,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS

WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    BADGES_USERID_ID_USERS.USERS_VIEWS, BADGES_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWS' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_BADGES_USERID_ID_USERS_VIEWS_USERID d
        JOIN USERS_VIEWS_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWS <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID for Histogram BADGES_USERID_ID_USERS.USERS_UPVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID AS
SELECT
    BADGES_USERID_ID_USERS.USERS_UPVOTES AS UPVOTES,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS

WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    BADGES_USERID_ID_USERS.USERS_UPVOTES, BADGES_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'UPVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_BADGES_USERID_ID_USERS_UPVOTES_USERID d
        JOIN USERS_UPVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.UPVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.UPVOTES <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_REPUTATION_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_REPUTATION_USERID for Histogram BADGES_USERID_ID_USERS.USERS_REPUTATION -- FKPK_RANGE
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_REPUTATION_USERID AS
SELECT
    BADGES_USERID_ID_USERS.USERS_REPUTATION AS REPUTATION,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS

WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    BADGES_USERID_ID_USERS.USERS_REPUTATION, BADGES_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'REPUTATION' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_BADGES_USERID_ID_USERS_REPUTATION_USERID d
        JOIN USERS_REPUTATION_histogram h
        ON (h.lower_bound IS NULL OR d.REPUTATION >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.REPUTATION <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID;

-- Create aggregator table Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID for Histogram BADGES_USERID_ID_USERS.USERS_DOWNVOTES -- FKPK_RANGE
CREATE TEMP TABLE Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID AS
SELECT
    BADGES_USERID_ID_USERS.USERS_DOWNVOTES AS DOWNVOTES,
    BADGES_USERID_ID_USERS.USERID AS USERID,
    COUNT(*) AS deg
FROM BADGES_USERID_ID_USERS

WHERE BADGES_USERID_ID_USERS.USERID IS NOT NULL
GROUP BY
    BADGES_USERID_ID_USERS.USERS_DOWNVOTES, BADGES_USERID_ID_USERS.USERID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'BADGES' AS relation_name,
    'USERID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'DOWNVOTES' AS pred_col_name,
    'USERID' AS fk_join_var_name,
    'USERS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        USERID, bucket_id, SUM(deg) as deg
        FROM Degree_BADGES_USERID_ID_USERS_DOWNVOTES_USERID d
        JOIN USERS_DOWNVOTES_histogram h
        ON (h.lower_bound IS NULL OR d.DOWNVOTES >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.DOWNVOTES <= h.upper_bound)
    WHERE USERID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY USERID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for TAGS
----------------------------------


DROP TABLE IF EXISTS TAGS_EXCERPTPOSTID_ID_POSTS;

-- Create temp table TAGS_EXCERPTPOSTID_ID_POSTS (FK->PK join)
CREATE TEMP TABLE TAGS_EXCERPTPOSTID_ID_POSTS AS
SELECT
    TAGS.EXCERPTPOSTID AS EXCERPTPOSTID,
    POSTS.SCORE AS POSTS_SCORE, POSTS.CREATIONDATE AS POSTS_CREATIONDATE, POSTS.POSTTYPEID AS POSTS_POSTTYPEID, POSTS.FAVORITECOUNT AS POSTS_FAVORITECOUNT, POSTS.ANSWERCOUNT AS POSTS_ANSWERCOUNT, POSTS.COMMENTCOUNT AS POSTS_COMMENTCOUNT, POSTS.VIEWCOUNT AS POSTS_VIEWCOUNT
FROM TAGS
JOIN POSTS
  ON TAGS.EXCERPTPOSTID = POSTS.ID
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID AS
SELECT
    TAGS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS

WHERE TAGS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    TAGS.EXCERPTPOSTID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    596 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TAGS_EXCERPTPOSTID
  LIMIT 596
);

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID for MCV TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS
JOIN POSTS_ANSWERCOUNT_mcv mcvt ON TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID for NONMCV TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS
LEFT JOIN POSTS_ANSWERCOUNT_mcv mcvt ON TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_ANSWERCOUNT = mcvt.ANSWERCOUNT
WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_ANSWERCOUNT, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

-- Insert into norms for Non-MCV TAGS_EXCERPTPOSTID_ID_POSTS ANSWERCOUNT EXCERPTPOSTID NONMCV
-- Among all non-MCV values in Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    ANSWERCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID
  GROUP BY ANSWERCOUNT
  HAVING ANSWERCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID for MCV TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS
JOIN POSTS_FAVORITECOUNT_mcv mcvt ON TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID for NONMCV TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS
LEFT JOIN POSTS_FAVORITECOUNT_mcv mcvt ON TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_FAVORITECOUNT = mcvt.FAVORITECOUNT
WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_FAVORITECOUNT, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

-- Insert into norms for Non-MCV TAGS_EXCERPTPOSTID_ID_POSTS FAVORITECOUNT EXCERPTPOSTID NONMCV
-- Among all non-MCV values in Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    FAVORITECOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID
  GROUP BY FAVORITECOUNT
  HAVING FAVORITECOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_POSTTYPEID_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_POSTTYPEID_EXCERPTPOSTID for MCV TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_POSTTYPEID_EXCERPTPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS
JOIN POSTS_POSTTYPEID_mcv mcvt ON TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_POSTTYPEID_EXCERPTPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_POSTTYPEID_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_POSTTYPEID_EXCERPTPOSTID for NONMCV TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_POSTTYPEID -- FKPK_MCV
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_POSTTYPEID_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_POSTTYPEID AS POSTTYPEID,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS
LEFT JOIN POSTS_POSTTYPEID_mcv mcvt ON TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_POSTTYPEID = mcvt.POSTTYPEID
WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_POSTTYPEID, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

-- Insert into norms for Non-MCV TAGS_EXCERPTPOSTID_ID_POSTS POSTTYPEID EXCERPTPOSTID NONMCV
-- Among all non-MCV values in Degree_TAGS_EXCERPTPOSTID_ID_POSTS_POSTTYPEID_EXCERPTPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    POSTTYPEID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_POSTTYPEID_EXCERPTPOSTID
  GROUP BY POSTTYPEID
  HAVING POSTTYPEID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'POSTTYPEID' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID for MCV TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS
JOIN POSTS_SCORE_mcv mcvt ON TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID for NONMCV TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_SCORE -- FKPK_MCV
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS
LEFT JOIN POSTS_SCORE_mcv mcvt ON TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_SCORE = mcvt.SCORE
WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_SCORE, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

-- Insert into norms for Non-MCV TAGS_EXCERPTPOSTID_ID_POSTS SCORE EXCERPTPOSTID NONMCV
-- Among all non-MCV values in Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    SCORE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID
  GROUP BY SCORE
  HAVING SCORE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID for MCV TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS
JOIN POSTS_COMMENTCOUNT_mcv mcvt ON TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID for NONMCV TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_MCV
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS
LEFT JOIN POSTS_COMMENTCOUNT_mcv mcvt ON TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_COMMENTCOUNT = mcvt.COMMENTCOUNT
WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_COMMENTCOUNT, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

-- Insert into norms for Non-MCV TAGS_EXCERPTPOSTID_ID_POSTS COMMENTCOUNT EXCERPTPOSTID NONMCV
-- Among all non-MCV values in Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID, find max of each Lp
WITH perValue AS (
  SELECT
    COMMENTCOUNT,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID
  GROUP BY COMMENTCOUNT
  HAVING COMMENTCOUNT IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_CREATIONDATE_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_CREATIONDATE_EXCERPTPOSTID for Histogram TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_CREATIONDATE -- FKPK_RANGE
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_CREATIONDATE_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_CREATIONDATE AS CREATIONDATE,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS

WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_CREATIONDATE, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'CREATIONDATE' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        EXCERPTPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_CREATIONDATE_EXCERPTPOSTID d
        JOIN POSTS_CREATIONDATE_histogram h
        ON (h.lower_bound IS NULL OR d.CREATIONDATE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.CREATIONDATE <= h.upper_bound)
    WHERE EXCERPTPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY EXCERPTPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID for Histogram TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_ANSWERCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_ANSWERCOUNT AS ANSWERCOUNT,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS

WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_ANSWERCOUNT, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'ANSWERCOUNT' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        EXCERPTPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_ANSWERCOUNT_EXCERPTPOSTID d
        JOIN POSTS_ANSWERCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.ANSWERCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.ANSWERCOUNT <= h.upper_bound)
    WHERE EXCERPTPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY EXCERPTPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID for Histogram TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_FAVORITECOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_FAVORITECOUNT AS FAVORITECOUNT,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS

WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_FAVORITECOUNT, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'FAVORITECOUNT' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        EXCERPTPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_FAVORITECOUNT_EXCERPTPOSTID d
        JOIN POSTS_FAVORITECOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.FAVORITECOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.FAVORITECOUNT <= h.upper_bound)
    WHERE EXCERPTPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY EXCERPTPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_VIEWCOUNT_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_VIEWCOUNT_EXCERPTPOSTID for Histogram TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_VIEWCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_VIEWCOUNT_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_VIEWCOUNT AS VIEWCOUNT,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS

WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_VIEWCOUNT, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'VIEWCOUNT' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        EXCERPTPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_VIEWCOUNT_EXCERPTPOSTID d
        JOIN POSTS_VIEWCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.VIEWCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.VIEWCOUNT <= h.upper_bound)
    WHERE EXCERPTPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY EXCERPTPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID for Histogram TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_SCORE -- FKPK_RANGE
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_SCORE AS SCORE,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS

WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_SCORE, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SCORE' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        EXCERPTPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_SCORE_EXCERPTPOSTID d
        JOIN POSTS_SCORE_histogram h
        ON (h.lower_bound IS NULL OR d.SCORE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SCORE <= h.upper_bound)
    WHERE EXCERPTPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY EXCERPTPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID;

-- Create aggregator table Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID for Histogram TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_COMMENTCOUNT -- FKPK_RANGE
CREATE TEMP TABLE Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID AS
SELECT
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_COMMENTCOUNT AS COMMENTCOUNT,
    TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID AS EXCERPTPOSTID,
    COUNT(*) AS deg
FROM TAGS_EXCERPTPOSTID_ID_POSTS

WHERE TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID IS NOT NULL
GROUP BY
    TAGS_EXCERPTPOSTID_ID_POSTS.POSTS_COMMENTCOUNT, TAGS_EXCERPTPOSTID_ID_POSTS.EXCERPTPOSTID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TAGS' AS relation_name,
    'EXCERPTPOSTID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'COMMENTCOUNT' AS pred_col_name,
    'EXCERPTPOSTID' AS fk_join_var_name,
    'POSTS' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        EXCERPTPOSTID, bucket_id, SUM(deg) as deg
        FROM Degree_TAGS_EXCERPTPOSTID_ID_POSTS_COMMENTCOUNT_EXCERPTPOSTID d
        JOIN POSTS_COMMENTCOUNT_histogram h
        ON (h.lower_bound IS NULL OR d.COMMENTCOUNT >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.COMMENTCOUNT <= h.upper_bound)
    WHERE EXCERPTPOSTID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY EXCERPTPOSTID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

