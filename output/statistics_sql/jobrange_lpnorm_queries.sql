DROP TABLE IF EXISTS norms;
CREATE TABLE norms (
    
    relation_name TEXT NOT NULL,
    join_var_name TEXT NOT NULL,
    aggregator_name TEXT NOT NULL,
    pred_col_name TEXT,
    pk_relation_name TEXT,
    fk_join_var_name TEXT,
    pk_join_var_name TEXT,
    
    pred_value_id      INTEGER,
    l0 DOUBLE,
    l1 DOUBLE,
    l2 DOUBLE,
    l3 DOUBLE,
    l4 DOUBLE,
    l5 DOUBLE,
    l6 DOUBLE,
    l7 DOUBLE,
    l8 DOUBLE,
    l9 DOUBLE,
    l10 DOUBLE,
    l_inf DOUBLE
);

----------------------------------
-- START: generate all mcvs and histograms
----------------------------------


DROP TABLE IF EXISTS CAST_INFO_NR_ORDER_mcv;

-- Create MCV table for CAST_INFO.NR_ORDER, with a unique mcv_id
CREATE TABLE CAST_INFO_NR_ORDER_mcv AS
WITH base AS (
    SELECT NR_ORDER, COUNT(*) AS freq
    FROM CAST_INFO
    WHERE NR_ORDER IS NOT NULL
    GROUP BY NR_ORDER
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    NR_ORDER,
    freq
FROM base;

DROP TABLE IF EXISTS CAST_INFO_ROLE_ID_mcv;

-- Create MCV table for CAST_INFO.ROLE_ID, with a unique mcv_id
CREATE TABLE CAST_INFO_ROLE_ID_mcv AS
WITH base AS (
    SELECT ROLE_ID, COUNT(*) AS freq
    FROM CAST_INFO
    WHERE ROLE_ID IS NOT NULL
    GROUP BY ROLE_ID
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    ROLE_ID,
    freq
FROM base;

DROP TABLE IF EXISTS CAST_INFO_NR_ORDER_histogram;
CREATE TABLE CAST_INFO_NR_ORDER_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO CAST_INFO_NR_ORDER_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 8, 'base_1'), (1, 1, 8, 16, 'base_1'), (2, 1, 16, 25, 'base_1'), (3, 1, 25, 33, 'base_1'), (4, 1, 33, 42, 'base_1'), (5, 1, 42, 50, 'base_1'), (6, 1, 50, 59, 'base_1'), (7, 1, 59, 67, 'base_1'), (8, 1, 67, 76, 'base_1'), (9, 1, 76, 84, 'base_1'), (10, 1, 84, 93, 'base_1'), (11, 1, 93, 101, 'base_1'), (12, 1, 101, 110, 'base_1'), (13, 1, 110, 118, 'base_1'), (14, 1, 118, 127, 'base_1'), (15, 1, 127, 135, 'base_1'), (16, 1, 135, 144, 'base_1'), (17, 1, 144, 152, 'base_1'), (18, 1, 152, 161, 'base_1'), (19, 1, 161, 169, 'base_1'), (20, 1, 169, 178, 'base_1'), (21, 1, 178, 186, 'base_1'), (22, 1, 186, 195, 'base_1'), (23, 1, 195, 203, 'base_1'), (24, 1, 203, 212, 'base_1'), (25, 1, 212, 220, 'base_1'), (26, 1, 220, 228, 'base_1'), (27, 1, 228, 237, 'base_1'), (28, 1, 237, 245, 'base_1'), (29, 1, 245, 254, 'base_1'), (30, 1, 254, 262, 'base_1'), (31, 1, 262, 271, 'base_1'), (32, 1, 271, 279, 'base_1'), (33, 1, 279, 288, 'base_1'), (34, 1, 288, 296, 'base_1'), (35, 1, 296, 305, 'base_1'), (36, 1, 305, 313, 'base_1'), (37, 1, 313, 322, 'base_1'), (38, 1, 322, 330, 'base_1'), (39, 1, 330, 339, 'base_1'), (40, 1, 339, 347, 'base_1'), (41, 1, 347, 356, 'base_1'), (42, 1, 356, 364, 'base_1'), (43, 1, 364, 373, 'base_1'), (44, 1, 373, 381, 'base_1'), (45, 1, 381, 391, 'base_1'), (46, 1, 391, 400, 'base_1'), (47, 1, 400, 410, 'base_1'), (48, 1, 410, 421, 'base_1'), (49, 1, 421, 431, 'base_1'), (50, 1, 431, 443, 'base_1'), (51, 1, 443, 454, 'base_1'), (52, 1, 454, 467, 'base_1'), (53, 1, 467, 501, 'base_1'), (54, 1, 501, 512, 'base_1'), (55, 1, 512, 587, 'base_1'), (56, 1, 587, 612, 'base_1'), (57, 1, 612, 701, 'base_1'), (58, 1, 701, 793, 'base_1'), (59, 1, 793, 806, 'base_1'), (60, 1, 806, 815, 'base_1'), (61, 1, 815, 823, 'base_1'), (62, 1, 823, 832, 'base_1'), (63, 1, 832, 904, 'base_1'), (64, 1, 904, 937, 'base_1'), (65, 1, 937, 978, 'base_1'), (66, 1, 978, 1004, 'base_1'), (67, 1, 1004, 1012, 'base_1'), (68, 1, 1012, 1021, 'base_1'), (69, 1, 1021, 1029, 'base_1'), (70, 1, 1029, 1038, 'base_1'), (71, 1, 1038, 1047, 'base_1'), (72, 1, 1047, 1056, 'base_1'), (73, 1, 1056, 1064, 'base_1'), (74, 1, 1064, 1074, 'base_1'), (75, 1, 1074, 1085, 'base_1'), (76, 1, 1085, 1095, 'base_1'), (77, 1, 1095, 1106, 'base_1'), (78, 1, 1106, 1122, 'base_1'), (79, 1, 1122, 1134, 'base_1'), (80, 1, 1134, 1147, 'base_1'), (81, 1, 1147, 1166, 'base_1'), (82, 1, 1166, 1176, 'base_1'), (83, 1, 1176, 1197, 'base_1'), (84, 1, 1197, 1234, 'base_1'), (85, 1, 1234, 1400, 'base_1'), (86, 1, 1400, 1600, 'base_1'), (87, 1, 1600, 1723, 'base_1'), (88, 1, 1723, 1902, 'base_1'), (89, 1, 1902, 2002, 'base_1'), (90, 1, 2002, 2011, 'base_1'), (91, 1, 2011, 2031, 'base_1'), (92, 1, 2031, 2065, 'base_1'), (93, 1, 2065, 2121, 'base_1'), (94, 1, 2121, 2201, 'base_1'), (95, 1, 2201, 2402, 'base_1'), (96, 1, 2402, 3000, 'base_1'), (97, 1, 3000, 3100, 'base_1'), (98, 1, 3100, 3303, 'base_1'), (99, 1, 3303, 4006, 'base_1'), (100, 1, 4006, 5000, 'base_1'), (101, 1, 5000, 5348, 'base_1'), (102, 1, 5348, 6004, 'base_1'), (103, 1, 6004, 7002, 'base_1'), (104, 1, 7002, 8004, 'base_1'), (105, 1, 8004, 9004, 'base_1'), (106, 1, 9004, 10101, 'base_1'), (107, 1, 10101, 11101, 'base_1'), (108, 1, 11101, 13000, 'base_1'), (109, 1, 13000, 14002, 'base_1'), (110, 1, 14002, 15101, 'base_1'), (111, 1, 15101, 17000, 'base_1'), (112, 1, 17000, 18003, 'base_1'), (113, 1, 18003, 19100, 'base_1'), (114, 1, 19100, 21001, 'base_1'), (115, 1, 21001, 22002, 'base_1'), (116, 1, 22002, 24100, 'base_1'), (117, 1, 24100, 27001, 'base_1'), (118, 1, 27001, 33000, 'base_1'), (119, 1, 33000, 40000, 'base_1'), (120, 1, 40000, 49000, 'base_1'), (121, 1, 49000, 226871, 'base_1'), (122, 1, 226871, 971109, 'base_1'), (123, 1, 971109, 981023, 'base_1'), (124, 1, 981023, 5296457, 'base_1'), (125, 1, 5296457, 20010705, 'base_1'), (126, 1, 20010705, 67173578, 'base_1'), (127, 1, 67173578, 480491645, 'base_1'), (128, 1, 480491645, NULL, 'base_1'), (129, 2, NULL, 16, 'base_2'), (130, 2, 16, 33, 'base_2'), (131, 2, 33, 50, 'base_2'), (132, 2, 50, 67, 'base_2'), (133, 2, 67, 84, 'base_2'), (134, 2, 84, 101, 'base_2'), (135, 2, 101, 118, 'base_2'), (136, 2, 118, 135, 'base_2'), (137, 2, 135, 152, 'base_2'), (138, 2, 152, 169, 'base_2'), (139, 2, 169, 186, 'base_2'), (140, 2, 186, 203, 'base_2'), (141, 2, 203, 220, 'base_2'), (142, 2, 220, 237, 'base_2'), (143, 2, 237, 254, 'base_2'), (144, 2, 254, 271, 'base_2'), (145, 2, 271, 288, 'base_2'), (146, 2, 288, 305, 'base_2'), (147, 2, 305, 322, 'base_2'), (148, 2, 322, 339, 'base_2'), (149, 2, 339, 356, 'base_2'), (150, 2, 356, 373, 'base_2'), (151, 2, 373, 391, 'base_2'), (152, 2, 391, 410, 'base_2'), (153, 2, 410, 431, 'base_2'), (154, 2, 431, 454, 'base_2'), (155, 2, 454, 501, 'base_2'), (156, 2, 501, 587, 'base_2'), (157, 2, 587, 701, 'base_2'), (158, 2, 701, 806, 'base_2'), (159, 2, 806, 823, 'base_2'), (160, 2, 823, 904, 'base_2'), (161, 2, 904, 978, 'base_2'), (162, 2, 978, 1012, 'base_2'), (163, 2, 1012, 1029, 'base_2'), (164, 2, 1029, 1047, 'base_2'), (165, 2, 1047, 1064, 'base_2'), (166, 2, 1064, 1085, 'base_2'), (167, 2, 1085, 1106, 'base_2'), (168, 2, 1106, 1134, 'base_2'), (169, 2, 1134, 1166, 'base_2'), (170, 2, 1166, 1197, 'base_2'), (171, 2, 1197, 1400, 'base_2'), (172, 2, 1400, 1723, 'base_2'), (173, 2, 1723, 2002, 'base_2'), (174, 2, 2002, 2031, 'base_2'), (175, 2, 2031, 2121, 'base_2'), (176, 2, 2121, 2402, 'base_2'), (177, 2, 2402, 3100, 'base_2'), (178, 2, 3100, 4006, 'base_2'), (179, 2, 4006, 5348, 'base_2'), (180, 2, 5348, 7002, 'base_2'), (181, 2, 7002, 9004, 'base_2'), (182, 2, 9004, 11101, 'base_2'), (183, 2, 11101, 14002, 'base_2'), (184, 2, 14002, 17000, 'base_2'), (185, 2, 17000, 19100, 'base_2'), (186, 2, 19100, 22002, 'base_2'), (187, 2, 22002, 27001, 'base_2'), (188, 2, 27001, 40000, 'base_2'), (189, 2, 40000, 226871, 'base_2'), (190, 2, 226871, 981023, 'base_2'), (191, 2, 981023, 20010705, 'base_2'), (192, 2, 20010705, 480491645, 'base_2'), (193, 2, 480491645, NULL, 'base_2'), (194, 4, NULL, 33, 'base_4'), (195, 4, 33, 67, 'base_4'), (196, 4, 67, 101, 'base_4'), (197, 4, 101, 135, 'base_4'), (198, 4, 135, 169, 'base_4'), (199, 4, 169, 203, 'base_4'), (200, 4, 203, 237, 'base_4'), (201, 4, 237, 271, 'base_4'), (202, 4, 271, 305, 'base_4'), (203, 4, 305, 339, 'base_4'), (204, 4, 339, 373, 'base_4'), (205, 4, 373, 410, 'base_4'), (206, 4, 410, 454, 'base_4'), (207, 4, 454, 587, 'base_4'), (208, 4, 587, 806, 'base_4'), (209, 4, 806, 904, 'base_4'), (210, 4, 904, 1012, 'base_4'), (211, 4, 1012, 1047, 'base_4'), (212, 4, 1047, 1085, 'base_4'), (213, 4, 1085, 1134, 'base_4'), (214, 4, 1134, 1197, 'base_4'), (215, 4, 1197, 1723, 'base_4'), (216, 4, 1723, 2031, 'base_4'), (217, 4, 2031, 2402, 'base_4'), (218, 4, 2402, 4006, 'base_4'), (219, 4, 4006, 7002, 'base_4'), (220, 4, 7002, 11101, 'base_4'), (221, 4, 11101, 17000, 'base_4'), (222, 4, 17000, 22002, 'base_4'), (223, 4, 22002, 40000, 'base_4'), (224, 4, 40000, 981023, 'base_4'), (225, 4, 981023, 480491645, 'base_4'), (226, 4, 480491645, NULL, 'base_4'), (227, 4, NULL, 25, 'offset_4'), (228, 4, 25, 59, 'offset_4'), (229, 4, 59, 93, 'offset_4'), (230, 4, 93, 127, 'offset_4'), (231, 4, 127, 161, 'offset_4'), (232, 4, 161, 195, 'offset_4'), (233, 4, 195, 228, 'offset_4'), (234, 4, 228, 262, 'offset_4'), (235, 4, 262, 296, 'offset_4'), (236, 4, 296, 330, 'offset_4'), (237, 4, 330, 364, 'offset_4'), (238, 4, 364, 400, 'offset_4'), (239, 4, 400, 443, 'offset_4'), (240, 4, 443, 512, 'offset_4'), (241, 4, 512, 793, 'offset_4'), (242, 4, 793, 832, 'offset_4'), (243, 4, 832, 1004, 'offset_4'), (244, 4, 1004, 1038, 'offset_4'), (245, 4, 1038, 1074, 'offset_4'), (246, 4, 1074, 1122, 'offset_4'), (247, 4, 1122, 1176, 'offset_4'), (248, 4, 1176, 1600, 'offset_4'), (249, 4, 1600, 2011, 'offset_4'), (250, 4, 2011, 2201, 'offset_4'), (251, 4, 2201, 3303, 'offset_4'), (252, 4, 3303, 6004, 'offset_4'), (253, 4, 6004, 10101, 'offset_4'), (254, 4, 10101, 15101, 'offset_4'), (255, 4, 15101, 21001, 'offset_4'), (256, 4, 21001, 33000, 'offset_4'), (257, 4, 33000, 971109, 'offset_4'), (258, 4, 971109, 67173578, 'offset_4'), (259, 4, 67173578, NULL, 'offset_4'), (260, 8, NULL, 67, 'base_8'), (261, 8, 67, 135, 'base_8'), (262, 8, 135, 203, 'base_8'), (263, 8, 203, 271, 'base_8'), (264, 8, 271, 339, 'base_8'), (265, 8, 339, 410, 'base_8'), (266, 8, 410, 587, 'base_8'), (267, 8, 587, 904, 'base_8'), (268, 8, 904, 1047, 'base_8'), (269, 8, 1047, 1134, 'base_8'), (270, 8, 1134, 1723, 'base_8'), (271, 8, 1723, 2402, 'base_8'), (272, 8, 2402, 7002, 'base_8'), (273, 8, 7002, 17000, 'base_8'), (274, 8, 17000, 40000, 'base_8'), (275, 8, 40000, 480491645, 'base_8'), (276, 8, 480491645, NULL, 'base_8'), (277, 8, NULL, 42, 'offset_8'), (278, 8, 42, 110, 'offset_8'), (279, 8, 110, 178, 'offset_8'), (280, 8, 178, 245, 'offset_8'), (281, 8, 245, 313, 'offset_8'), (282, 8, 313, 381, 'offset_8'), (283, 8, 381, 467, 'offset_8'), (284, 8, 467, 815, 'offset_8'), (285, 8, 815, 1021, 'offset_8'), (286, 8, 1021, 1095, 'offset_8'), (287, 8, 1095, 1234, 'offset_8'), (288, 8, 1234, 2065, 'offset_8'), (289, 8, 2065, 5000, 'offset_8'), (290, 8, 5000, 13000, 'offset_8'), (291, 8, 13000, 24100, 'offset_8'), (292, 8, 24100, 5296457, 'offset_8'), (293, 8, 5296457, NULL, 'offset_8'), (294, 16, NULL, 135, 'base_16'), (295, 16, 135, 271, 'base_16'), (296, 16, 271, 410, 'base_16'), (297, 16, 410, 904, 'base_16'), (298, 16, 904, 1134, 'base_16'), (299, 16, 1134, 2402, 'base_16'), (300, 16, 2402, 17000, 'base_16'), (301, 16, 17000, 480491645, 'base_16'), (302, 16, 480491645, NULL, 'base_16'), (303, 16, NULL, 76, 'offset_16'), (304, 16, 76, 212, 'offset_16'), (305, 16, 212, 347, 'offset_16'), (306, 16, 347, 612, 'offset_16'), (307, 16, 612, 1056, 'offset_16'), (308, 16, 1056, 1902, 'offset_16'), (309, 16, 1902, 8004, 'offset_16'), (310, 16, 8004, 49000, 'offset_16'), (311, 16, 49000, NULL, 'offset_16'), (312, 32, NULL, 271, 'base_32'), (313, 32, 271, 904, 'base_32'), (314, 32, 904, 2402, 'base_32'), (315, 32, 2402, 480491645, 'base_32'), (316, 32, 480491645, NULL, 'base_32'), (317, 32, NULL, 144, 'offset_32'), (318, 32, 144, 421, 'offset_32'), (319, 32, 421, 1147, 'offset_32'), (320, 32, 1147, 18003, 'offset_32'), (321, 32, 18003, NULL, 'offset_32'), (322, 64, NULL, 904, 'base_64'), (323, 64, 904, 480491645, 'base_64'), (324, 64, 480491645, NULL, 'base_64'), (325, 64, NULL, 279, 'offset_64'), (326, 64, 279, 3000, 'offset_64'), (327, 64, 3000, NULL, 'offset_64'), (328, 128, NULL, 480491645, 'base_128'), (329, 128, 480491645, NULL, 'base_128'), (330, 128, NULL, 937, 'offset_128'), (331, 128, 937, NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS MOVIE_COMPANIES_COMPANY_TYPE_ID_mcv;

-- Create MCV table for MOVIE_COMPANIES.COMPANY_TYPE_ID, with a unique mcv_id
CREATE TABLE MOVIE_COMPANIES_COMPANY_TYPE_ID_mcv AS
WITH base AS (
    SELECT COMPANY_TYPE_ID, COUNT(*) AS freq
    FROM MOVIE_COMPANIES
    WHERE COMPANY_TYPE_ID IS NOT NULL
    GROUP BY COMPANY_TYPE_ID
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    COMPANY_TYPE_ID,
    freq
FROM base;

DROP TABLE IF EXISTS MOVIE_INFO_IDX_INFO_TYPE_ID_mcv;

-- Create MCV table for MOVIE_INFO_IDX.INFO_TYPE_ID, with a unique mcv_id
CREATE TABLE MOVIE_INFO_IDX_INFO_TYPE_ID_mcv AS
WITH base AS (
    SELECT INFO_TYPE_ID, COUNT(*) AS freq
    FROM MOVIE_INFO_IDX
    WHERE INFO_TYPE_ID IS NOT NULL
    GROUP BY INFO_TYPE_ID
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    INFO_TYPE_ID,
    freq
FROM base;

DROP TABLE IF EXISTS MOVIE_KEYWORD_KEYWORD_ID_mcv;

-- Create MCV table for MOVIE_KEYWORD.KEYWORD_ID, with a unique mcv_id
CREATE TABLE MOVIE_KEYWORD_KEYWORD_ID_mcv AS
WITH base AS (
    SELECT KEYWORD_ID, COUNT(*) AS freq
    FROM MOVIE_KEYWORD
    WHERE KEYWORD_ID IS NOT NULL
    GROUP BY KEYWORD_ID
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    KEYWORD_ID,
    freq
FROM base;

DROP TABLE IF EXISTS TITLE_SEASON_NR_mcv;

-- Create MCV table for TITLE.SEASON_NR, with a unique mcv_id
CREATE TABLE TITLE_SEASON_NR_mcv AS
WITH base AS (
    SELECT SEASON_NR, COUNT(*) AS freq
    FROM TITLE
    WHERE SEASON_NR IS NOT NULL
    GROUP BY SEASON_NR
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    SEASON_NR,
    freq
FROM base;

DROP TABLE IF EXISTS TITLE_PRODUCTION_YEAR_mcv;

-- Create MCV table for TITLE.PRODUCTION_YEAR, with a unique mcv_id
CREATE TABLE TITLE_PRODUCTION_YEAR_mcv AS
WITH base AS (
    SELECT PRODUCTION_YEAR, COUNT(*) AS freq
    FROM TITLE
    WHERE PRODUCTION_YEAR IS NOT NULL
    GROUP BY PRODUCTION_YEAR
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    PRODUCTION_YEAR,
    freq
FROM base;

DROP TABLE IF EXISTS TITLE_EPISODE_NR_mcv;

-- Create MCV table for TITLE.EPISODE_NR, with a unique mcv_id
CREATE TABLE TITLE_EPISODE_NR_mcv AS
WITH base AS (
    SELECT EPISODE_NR, COUNT(*) AS freq
    FROM TITLE
    WHERE EPISODE_NR IS NOT NULL
    GROUP BY EPISODE_NR
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    EPISODE_NR,
    freq
FROM base;

DROP TABLE IF EXISTS TITLE_IMDB_INDEX_mcv;

-- Create MCV table for TITLE.IMDB_INDEX, with a unique mcv_id
CREATE TABLE TITLE_IMDB_INDEX_mcv AS
WITH base AS (
    SELECT IMDB_INDEX, COUNT(*) AS freq
    FROM TITLE
    WHERE IMDB_INDEX IS NOT NULL
    GROUP BY IMDB_INDEX
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    IMDB_INDEX,
    freq
FROM base;

DROP TABLE IF EXISTS TITLE_KIND_ID_mcv;

-- Create MCV table for TITLE.KIND_ID, with a unique mcv_id
CREATE TABLE TITLE_KIND_ID_mcv AS
WITH base AS (
    SELECT KIND_ID, COUNT(*) AS freq
    FROM TITLE
    WHERE KIND_ID IS NOT NULL
    GROUP BY KIND_ID
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    KIND_ID,
    freq
FROM base;

DROP TABLE IF EXISTS TITLE_SERIES_YEARS_mcv;

-- Create MCV table for TITLE.SERIES_YEARS, with a unique mcv_id
CREATE TABLE TITLE_SERIES_YEARS_mcv AS
WITH base AS (
    SELECT SERIES_YEARS, COUNT(*) AS freq
    FROM TITLE
    WHERE SERIES_YEARS IS NOT NULL
    GROUP BY SERIES_YEARS
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    SERIES_YEARS,
    freq
FROM base;

DROP TABLE IF EXISTS TITLE_PHONETIC_CODE_mcv;

-- Create MCV table for TITLE.PHONETIC_CODE, with a unique mcv_id
CREATE TABLE TITLE_PHONETIC_CODE_mcv AS
WITH base AS (
    SELECT PHONETIC_CODE, COUNT(*) AS freq
    FROM TITLE
    WHERE PHONETIC_CODE IS NOT NULL
    GROUP BY PHONETIC_CODE
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    PHONETIC_CODE,
    freq
FROM base;

DROP TABLE IF EXISTS TITLE_SEASON_NR_histogram;
CREATE TABLE TITLE_SEASON_NR_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO TITLE_SEASON_NR_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 1, 'base_1'), (1, 1, 1, 2, 'base_1'), (2, 1, 2, 3, 'base_1'), (3, 1, 3, 3, 'base_1'), (4, 1, 3, 4, 'base_1'), (5, 1, 4, 5, 'base_1'), (6, 1, 5, 6, 'base_1'), (7, 1, 6, 6, 'base_1'), (8, 1, 6, 7, 'base_1'), (9, 1, 7, 8, 'base_1'), (10, 1, 8, 9, 'base_1'), (11, 1, 9, 9, 'base_1'), (12, 1, 9, 10, 'base_1'), (13, 1, 10, 11, 'base_1'), (14, 1, 11, 12, 'base_1'), (15, 1, 12, 12, 'base_1'), (16, 1, 12, 13, 'base_1'), (17, 1, 13, 14, 'base_1'), (18, 1, 14, 15, 'base_1'), (19, 1, 15, 15, 'base_1'), (20, 1, 15, 16, 'base_1'), (21, 1, 16, 17, 'base_1'), (22, 1, 17, 18, 'base_1'), (23, 1, 18, 18, 'base_1'), (24, 1, 18, 19, 'base_1'), (25, 1, 19, 20, 'base_1'), (26, 1, 20, 21, 'base_1'), (27, 1, 21, 21, 'base_1'), (28, 1, 21, 22, 'base_1'), (29, 1, 22, 23, 'base_1'), (30, 1, 23, 24, 'base_1'), (31, 1, 24, 24, 'base_1'), (32, 1, 24, 25, 'base_1'), (33, 1, 25, 26, 'base_1'), (34, 1, 26, 27, 'base_1'), (35, 1, 27, 27, 'base_1'), (36, 1, 27, 28, 'base_1'), (37, 1, 28, 29, 'base_1'), (38, 1, 29, 30, 'base_1'), (39, 1, 30, 30, 'base_1'), (40, 1, 30, 31, 'base_1'), (41, 1, 31, 32, 'base_1'), (42, 1, 32, 33, 'base_1'), (43, 1, 33, 33, 'base_1'), (44, 1, 33, 34, 'base_1'), (45, 1, 34, 35, 'base_1'), (46, 1, 35, 35, 'base_1'), (47, 1, 35, 36, 'base_1'), (48, 1, 36, 37, 'base_1'), (49, 1, 37, 38, 'base_1'), (50, 1, 38, 38, 'base_1'), (51, 1, 38, 39, 'base_1'), (52, 1, 39, 40, 'base_1'), (53, 1, 40, 41, 'base_1'), (54, 1, 41, 41, 'base_1'), (55, 1, 41, 42, 'base_1'), (56, 1, 42, 43, 'base_1'), (57, 1, 43, 44, 'base_1'), (58, 1, 44, 44, 'base_1'), (59, 1, 44, 45, 'base_1'), (60, 1, 45, 46, 'base_1'), (61, 1, 46, 47, 'base_1'), (62, 1, 47, 47, 'base_1'), (63, 1, 47, 48, 'base_1'), (64, 1, 48, 49, 'base_1'), (65, 1, 49, 50, 'base_1'), (66, 1, 50, 50, 'base_1'), (67, 1, 50, 51, 'base_1'), (68, 1, 51, 52, 'base_1'), (69, 1, 52, 53, 'base_1'), (70, 1, 53, 53, 'base_1'), (71, 1, 53, 54, 'base_1'), (72, 1, 54, 55, 'base_1'), (73, 1, 55, 56, 'base_1'), (74, 1, 56, 56, 'base_1'), (75, 1, 56, 57, 'base_1'), (76, 1, 57, 58, 'base_1'), (77, 1, 58, 59, 'base_1'), (78, 1, 59, 59, 'base_1'), (79, 1, 59, 60, 'base_1'), (80, 1, 60, 61, 'base_1'), (81, 1, 61, 62, 'base_1'), (82, 1, 62, 62, 'base_1'), (83, 1, 62, 63, 'base_1'), (84, 1, 63, 64, 'base_1'), (85, 1, 64, 65, 'base_1'), (86, 1, 65, 65, 'base_1'), (87, 1, 65, 66, 'base_1'), (88, 1, 66, 67, 'base_1'), (89, 1, 67, 67, 'base_1'), (90, 1, 67, 68, 'base_1'), (91, 1, 68, 69, 'base_1'), (92, 1, 69, 70, 'base_1'), (93, 1, 70, 70, 'base_1'), (94, 1, 70, 71, 'base_1'), (95, 1, 71, 72, 'base_1'), (96, 1, 72, 73, 'base_1'), (97, 1, 73, 73, 'base_1'), (98, 1, 73, 74, 'base_1'), (99, 1, 74, 91, 'base_1'), (100, 1, 91, 102, 'base_1'), (101, 1, 102, 102, 'base_1'), (102, 1, 102, 1981, 'base_1'), (103, 1, 1981, 1984, 'base_1'), (104, 1, 1984, 1987, 'base_1'), (105, 1, 1987, 1987, 'base_1'), (106, 1, 1987, 1988, 'base_1'), (107, 1, 1988, 1989, 'base_1'), (108, 1, 1989, 1990, 'base_1'), (109, 1, 1990, 1990, 'base_1'), (110, 1, 1990, 1991, 'base_1'), (111, 1, 1991, 1992, 'base_1'), (112, 1, 1992, 1994, 'base_1'), (113, 1, 1994, 1994, 'base_1'), (114, 1, 1994, 1997, 'base_1'), (115, 1, 1997, 1998, 'base_1'), (116, 1, 1998, 1999, 'base_1'), (117, 1, 1999, 1999, 'base_1'), (118, 1, 1999, 2006, 'base_1'), (119, 1, 2006, 2007, 'base_1'), (120, 1, 2007, 2008, 'base_1'), (121, 1, 2008, 2008, 'base_1'), (122, 1, 2008, 2009, 'base_1'), (123, 1, 2009, 2010, 'base_1'), (124, 1, 2010, 2011, 'base_1'), (125, 1, 2011, 2011, 'base_1'), (126, 1, 2011, 2012, 'base_1'), (127, 1, 2012, NULL, 'base_1'), (128, 2, NULL, 2, 'base_2'), (129, 2, 2, 3, 'base_2'), (130, 2, 3, 5, 'base_2'), (131, 2, 5, 6, 'base_2'), (132, 2, 6, 8, 'base_2'), (133, 2, 8, 9, 'base_2'), (134, 2, 9, 11, 'base_2'), (135, 2, 11, 12, 'base_2'), (136, 2, 12, 14, 'base_2'), (137, 2, 14, 15, 'base_2'), (138, 2, 15, 17, 'base_2'), (139, 2, 17, 18, 'base_2'), (140, 2, 18, 20, 'base_2'), (141, 2, 20, 21, 'base_2'), (142, 2, 21, 23, 'base_2'), (143, 2, 23, 24, 'base_2'), (144, 2, 24, 26, 'base_2'), (145, 2, 26, 27, 'base_2'), (146, 2, 27, 29, 'base_2'), (147, 2, 29, 30, 'base_2'), (148, 2, 30, 32, 'base_2'), (149, 2, 32, 33, 'base_2'), (150, 2, 33, 35, 'base_2'), (151, 2, 35, 36, 'base_2'), (152, 2, 36, 38, 'base_2'), (153, 2, 38, 39, 'base_2'), (154, 2, 39, 41, 'base_2'), (155, 2, 41, 42, 'base_2'), (156, 2, 42, 44, 'base_2'), (157, 2, 44, 45, 'base_2'), (158, 2, 45, 47, 'base_2'), (159, 2, 47, 48, 'base_2'), (160, 2, 48, 50, 'base_2'), (161, 2, 50, 51, 'base_2'), (162, 2, 51, 53, 'base_2'), (163, 2, 53, 54, 'base_2'), (164, 2, 54, 56, 'base_2'), (165, 2, 56, 57, 'base_2'), (166, 2, 57, 59, 'base_2'), (167, 2, 59, 60, 'base_2'), (168, 2, 60, 62, 'base_2'), (169, 2, 62, 63, 'base_2'), (170, 2, 63, 65, 'base_2'), (171, 2, 65, 66, 'base_2'), (172, 2, 66, 67, 'base_2'), (173, 2, 67, 69, 'base_2'), (174, 2, 69, 70, 'base_2'), (175, 2, 70, 72, 'base_2'), (176, 2, 72, 73, 'base_2'), (177, 2, 73, 91, 'base_2'), (178, 2, 91, 102, 'base_2'), (179, 2, 102, 1984, 'base_2'), (180, 2, 1984, 1987, 'base_2'), (181, 2, 1987, 1989, 'base_2'), (182, 2, 1989, 1990, 'base_2'), (183, 2, 1990, 1992, 'base_2'), (184, 2, 1992, 1994, 'base_2'), (185, 2, 1994, 1998, 'base_2'), (186, 2, 1998, 1999, 'base_2'), (187, 2, 1999, 2007, 'base_2'), (188, 2, 2007, 2008, 'base_2'), (189, 2, 2008, 2010, 'base_2'), (190, 2, 2010, 2011, 'base_2'), (191, 2, 2011, NULL, 'base_2'), (192, 4, NULL, 3, 'base_4'), (193, 4, 3, 6, 'base_4'), (194, 4, 6, 9, 'base_4'), (195, 4, 9, 12, 'base_4'), (196, 4, 12, 15, 'base_4'), (197, 4, 15, 18, 'base_4'), (198, 4, 18, 21, 'base_4'), (199, 4, 21, 24, 'base_4'), (200, 4, 24, 27, 'base_4'), (201, 4, 27, 30, 'base_4'), (202, 4, 30, 33, 'base_4'), (203, 4, 33, 36, 'base_4'), (204, 4, 36, 39, 'base_4'), (205, 4, 39, 42, 'base_4'), (206, 4, 42, 45, 'base_4'), (207, 4, 45, 48, 'base_4'), (208, 4, 48, 51, 'base_4'), (209, 4, 51, 54, 'base_4'), (210, 4, 54, 57, 'base_4'), (211, 4, 57, 60, 'base_4'), (212, 4, 60, 63, 'base_4'), (213, 4, 63, 66, 'base_4'), (214, 4, 66, 69, 'base_4'), (215, 4, 69, 72, 'base_4'), (216, 4, 72, 91, 'base_4'), (217, 4, 91, 1984, 'base_4'), (218, 4, 1984, 1989, 'base_4'), (219, 4, 1989, 1992, 'base_4'), (220, 4, 1992, 1998, 'base_4'), (221, 4, 1998, 2007, 'base_4'), (222, 4, 2007, 2010, 'base_4'), (223, 4, 2010, NULL, 'base_4'), (224, 4, NULL, 3, 'offset_4'), (225, 4, 3, 6, 'offset_4'), (226, 4, 6, 9, 'offset_4'), (227, 4, 9, 12, 'offset_4'), (228, 4, 12, 15, 'offset_4'), (229, 4, 15, 18, 'offset_4'), (230, 4, 18, 21, 'offset_4'), (231, 4, 21, 24, 'offset_4'), (232, 4, 24, 27, 'offset_4'), (233, 4, 27, 30, 'offset_4'), (234, 4, 30, 33, 'offset_4'), (235, 4, 33, 35, 'offset_4'), (236, 4, 35, 38, 'offset_4'), (237, 4, 38, 41, 'offset_4'), (238, 4, 41, 44, 'offset_4'), (239, 4, 44, 47, 'offset_4'), (240, 4, 47, 50, 'offset_4'), (241, 4, 50, 53, 'offset_4'), (242, 4, 53, 56, 'offset_4'), (243, 4, 56, 59, 'offset_4'), (244, 4, 59, 62, 'offset_4'), (245, 4, 62, 65, 'offset_4'), (246, 4, 65, 68, 'offset_4'), (247, 4, 68, 71, 'offset_4'), (248, 4, 71, 74, 'offset_4'), (249, 4, 74, 1981, 'offset_4'), (250, 4, 1981, 1988, 'offset_4'), (251, 4, 1988, 1991, 'offset_4'), (252, 4, 1991, 1997, 'offset_4'), (253, 4, 1997, 2006, 'offset_4'), (254, 4, 2006, 2009, 'offset_4'), (255, 4, 2009, 2012, 'offset_4'), (256, 4, 2012, NULL, 'offset_4'), (257, 8, NULL, 6, 'base_8'), (258, 8, 6, 12, 'base_8'), (259, 8, 12, 18, 'base_8'), (260, 8, 18, 24, 'base_8'), (261, 8, 24, 30, 'base_8'), (262, 8, 30, 36, 'base_8'), (263, 8, 36, 42, 'base_8'), (264, 8, 42, 48, 'base_8'), (265, 8, 48, 54, 'base_8'), (266, 8, 54, 60, 'base_8'), (267, 8, 60, 66, 'base_8'), (268, 8, 66, 72, 'base_8'), (269, 8, 72, 1984, 'base_8'), (270, 8, 1984, 1992, 'base_8'), (271, 8, 1992, 2007, 'base_8'), (272, 8, 2007, NULL, 'base_8'), (273, 8, NULL, 4, 'offset_8'), (274, 8, 4, 10, 'offset_8'), (275, 8, 10, 16, 'offset_8'), (276, 8, 16, 22, 'offset_8'), (277, 8, 22, 28, 'offset_8'), (278, 8, 28, 34, 'offset_8'), (279, 8, 34, 40, 'offset_8'), (280, 8, 40, 46, 'offset_8'), (281, 8, 46, 52, 'offset_8'), (282, 8, 52, 58, 'offset_8'), (283, 8, 58, 64, 'offset_8'), (284, 8, 64, 70, 'offset_8'), (285, 8, 70, 102, 'offset_8'), (286, 8, 102, 1990, 'offset_8'), (287, 8, 1990, 1999, 'offset_8'), (288, 8, 1999, 2011, 'offset_8'), (289, 8, 2011, NULL, 'offset_8'), (290, 16, NULL, 12, 'base_16'), (291, 16, 12, 24, 'base_16'), (292, 16, 24, 36, 'base_16'), (293, 16, 36, 48, 'base_16'), (294, 16, 48, 60, 'base_16'), (295, 16, 60, 72, 'base_16'), (296, 16, 72, 1992, 'base_16'), (297, 16, 1992, NULL, 'base_16'), (298, 16, NULL, 7, 'offset_16'), (299, 16, 7, 19, 'offset_16'), (300, 16, 19, 31, 'offset_16'), (301, 16, 31, 43, 'offset_16'), (302, 16, 43, 55, 'offset_16'), (303, 16, 55, 67, 'offset_16'), (304, 16, 67, 1987, 'offset_16'), (305, 16, 1987, 2008, 'offset_16'), (306, 16, 2008, NULL, 'offset_16'), (307, 32, NULL, 24, 'base_32'), (308, 32, 24, 48, 'base_32'), (309, 32, 48, 72, 'base_32'), (310, 32, 72, NULL, 'base_32'), (311, 32, NULL, 13, 'offset_32'), (312, 32, 13, 37, 'offset_32'), (313, 32, 37, 61, 'offset_32'), (314, 32, 61, 1994, 'offset_32'), (315, 32, 1994, NULL, 'offset_32'), (316, 64, NULL, 48, 'base_64'), (317, 64, 48, NULL, 'base_64'), (318, 64, NULL, 25, 'offset_64'), (319, 64, 25, 73, 'offset_64'), (320, 64, 73, NULL, 'offset_64'), (321, 128, NULL, NULL, 'base_128'), (322, 128, NULL, 49, 'offset_128'), (323, 128, 49, NULL, 'offset_128'), (324, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS TITLE_PRODUCTION_YEAR_histogram;
CREATE TABLE TITLE_PRODUCTION_YEAR_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO TITLE_PRODUCTION_YEAR_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 1888, 'base_1'), (1, 1, 1888, 1889, 'base_1'), (2, 1, 1889, 1890, 'base_1'), (3, 1, 1890, 1891, 'base_1'), (4, 1, 1891, 1892, 'base_1'), (5, 1, 1892, 1893, 'base_1'), (6, 1, 1893, 1894, 'base_1'), (7, 1, 1894, 1895, 'base_1'), (8, 1, 1895, 1896, 'base_1'), (9, 1, 1896, 1897, 'base_1'), (10, 1, 1897, 1898, 'base_1'), (11, 1, 1898, 1899, 'base_1'), (12, 1, 1899, 1900, 'base_1'), (13, 1, 1900, 1901, 'base_1'), (14, 1, 1901, 1902, 'base_1'), (15, 1, 1902, 1903, 'base_1'), (16, 1, 1903, 1904, 'base_1'), (17, 1, 1904, 1905, 'base_1'), (18, 1, 1905, 1906, 'base_1'), (19, 1, 1906, 1907, 'base_1'), (20, 1, 1907, 1908, 'base_1'), (21, 1, 1908, 1909, 'base_1'), (22, 1, 1909, 1910, 'base_1'), (23, 1, 1910, 1911, 'base_1'), (24, 1, 1911, 1912, 'base_1'), (25, 1, 1912, 1913, 'base_1'), (26, 1, 1913, 1914, 'base_1'), (27, 1, 1914, 1915, 'base_1'), (28, 1, 1915, 1916, 'base_1'), (29, 1, 1916, 1917, 'base_1'), (30, 1, 1917, 1918, 'base_1'), (31, 1, 1918, 1919, 'base_1'), (32, 1, 1919, 1920, 'base_1'), (33, 1, 1920, 1921, 'base_1'), (34, 1, 1921, 1922, 'base_1'), (35, 1, 1922, 1923, 'base_1'), (36, 1, 1923, 1924, 'base_1'), (37, 1, 1924, 1925, 'base_1'), (38, 1, 1925, 1926, 'base_1'), (39, 1, 1926, 1927, 'base_1'), (40, 1, 1927, 1928, 'base_1'), (41, 1, 1928, 1929, 'base_1'), (42, 1, 1929, 1931, 'base_1'), (43, 1, 1931, 1932, 'base_1'), (44, 1, 1932, 1933, 'base_1'), (45, 1, 1933, 1934, 'base_1'), (46, 1, 1934, 1935, 'base_1'), (47, 1, 1935, 1936, 'base_1'), (48, 1, 1936, 1937, 'base_1'), (49, 1, 1937, 1938, 'base_1'), (50, 1, 1938, 1939, 'base_1'), (51, 1, 1939, 1940, 'base_1'), (52, 1, 1940, 1941, 'base_1'), (53, 1, 1941, 1942, 'base_1'), (54, 1, 1942, 1943, 'base_1'), (55, 1, 1943, 1944, 'base_1'), (56, 1, 1944, 1945, 'base_1'), (57, 1, 1945, 1946, 'base_1'), (58, 1, 1946, 1947, 'base_1'), (59, 1, 1947, 1948, 'base_1'), (60, 1, 1948, 1949, 'base_1'), (61, 1, 1949, 1950, 'base_1'), (62, 1, 1950, 1951, 'base_1'), (63, 1, 1951, 1952, 'base_1'), (64, 1, 1952, 1953, 'base_1'), (65, 1, 1953, 1954, 'base_1'), (66, 1, 1954, 1955, 'base_1'), (67, 1, 1955, 1956, 'base_1'), (68, 1, 1956, 1957, 'base_1'), (69, 1, 1957, 1958, 'base_1'), (70, 1, 1958, 1959, 'base_1'), (71, 1, 1959, 1960, 'base_1'), (72, 1, 1960, 1961, 'base_1'), (73, 1, 1961, 1962, 'base_1'), (74, 1, 1962, 1963, 'base_1'), (75, 1, 1963, 1964, 'base_1'), (76, 1, 1964, 1965, 'base_1'), (77, 1, 1965, 1966, 'base_1'), (78, 1, 1966, 1967, 'base_1'), (79, 1, 1967, 1968, 'base_1'), (80, 1, 1968, 1969, 'base_1'), (81, 1, 1969, 1970, 'base_1'), (82, 1, 1970, 1971, 'base_1'), (83, 1, 1971, 1972, 'base_1'), (84, 1, 1972, 1973, 'base_1'), (85, 1, 1973, 1975, 'base_1'), (86, 1, 1975, 1976, 'base_1'), (87, 1, 1976, 1977, 'base_1'), (88, 1, 1977, 1978, 'base_1'), (89, 1, 1978, 1979, 'base_1'), (90, 1, 1979, 1980, 'base_1'), (91, 1, 1980, 1981, 'base_1'), (92, 1, 1981, 1982, 'base_1'), (93, 1, 1982, 1983, 'base_1'), (94, 1, 1983, 1984, 'base_1'), (95, 1, 1984, 1985, 'base_1'), (96, 1, 1985, 1986, 'base_1'), (97, 1, 1986, 1987, 'base_1'), (98, 1, 1987, 1988, 'base_1'), (99, 1, 1988, 1989, 'base_1'), (100, 1, 1989, 1990, 'base_1'), (101, 1, 1990, 1991, 'base_1'), (102, 1, 1991, 1992, 'base_1'), (103, 1, 1992, 1993, 'base_1'), (104, 1, 1993, 1994, 'base_1'), (105, 1, 1994, 1995, 'base_1'), (106, 1, 1995, 1996, 'base_1'), (107, 1, 1996, 1997, 'base_1'), (108, 1, 1997, 1998, 'base_1'), (109, 1, 1998, 1999, 'base_1'), (110, 1, 1999, 2000, 'base_1'), (111, 1, 2000, 2001, 'base_1'), (112, 1, 2001, 2002, 'base_1'), (113, 1, 2002, 2003, 'base_1'), (114, 1, 2003, 2004, 'base_1'), (115, 1, 2004, 2005, 'base_1'), (116, 1, 2005, 2006, 'base_1'), (117, 1, 2006, 2007, 'base_1'), (118, 1, 2007, 2008, 'base_1'), (119, 1, 2008, 2009, 'base_1'), (120, 1, 2009, 2010, 'base_1'), (121, 1, 2010, 2011, 'base_1'), (122, 1, 2011, 2012, 'base_1'), (123, 1, 2012, 2013, 'base_1'), (124, 1, 2013, 2014, 'base_1'), (125, 1, 2014, 2015, 'base_1'), (126, 1, 2015, 2016, 'base_1'), (127, 1, 2016, 2017, 'base_1'), (128, 1, 2017, NULL, 'base_1'), (129, 2, NULL, 1889, 'base_2'), (130, 2, 1889, 1891, 'base_2'), (131, 2, 1891, 1893, 'base_2'), (132, 2, 1893, 1895, 'base_2'), (133, 2, 1895, 1897, 'base_2'), (134, 2, 1897, 1899, 'base_2'), (135, 2, 1899, 1901, 'base_2'), (136, 2, 1901, 1903, 'base_2'), (137, 2, 1903, 1905, 'base_2'), (138, 2, 1905, 1907, 'base_2'), (139, 2, 1907, 1909, 'base_2'), (140, 2, 1909, 1911, 'base_2'), (141, 2, 1911, 1913, 'base_2'), (142, 2, 1913, 1915, 'base_2'), (143, 2, 1915, 1917, 'base_2'), (144, 2, 1917, 1919, 'base_2'), (145, 2, 1919, 1921, 'base_2'), (146, 2, 1921, 1923, 'base_2'), (147, 2, 1923, 1925, 'base_2'), (148, 2, 1925, 1927, 'base_2'), (149, 2, 1927, 1929, 'base_2'), (150, 2, 1929, 1932, 'base_2'), (151, 2, 1932, 1934, 'base_2'), (152, 2, 1934, 1936, 'base_2'), (153, 2, 1936, 1938, 'base_2'), (154, 2, 1938, 1940, 'base_2'), (155, 2, 1940, 1942, 'base_2'), (156, 2, 1942, 1944, 'base_2'), (157, 2, 1944, 1946, 'base_2'), (158, 2, 1946, 1948, 'base_2'), (159, 2, 1948, 1950, 'base_2'), (160, 2, 1950, 1952, 'base_2'), (161, 2, 1952, 1954, 'base_2'), (162, 2, 1954, 1956, 'base_2'), (163, 2, 1956, 1958, 'base_2'), (164, 2, 1958, 1960, 'base_2'), (165, 2, 1960, 1962, 'base_2'), (166, 2, 1962, 1964, 'base_2'), (167, 2, 1964, 1966, 'base_2'), (168, 2, 1966, 1968, 'base_2'), (169, 2, 1968, 1970, 'base_2'), (170, 2, 1970, 1972, 'base_2'), (171, 2, 1972, 1975, 'base_2'), (172, 2, 1975, 1977, 'base_2'), (173, 2, 1977, 1979, 'base_2'), (174, 2, 1979, 1981, 'base_2'), (175, 2, 1981, 1983, 'base_2'), (176, 2, 1983, 1985, 'base_2'), (177, 2, 1985, 1987, 'base_2'), (178, 2, 1987, 1989, 'base_2'), (179, 2, 1989, 1991, 'base_2'), (180, 2, 1991, 1993, 'base_2'), (181, 2, 1993, 1995, 'base_2'), (182, 2, 1995, 1997, 'base_2'), (183, 2, 1997, 1999, 'base_2'), (184, 2, 1999, 2001, 'base_2'), (185, 2, 2001, 2003, 'base_2'), (186, 2, 2003, 2005, 'base_2'), (187, 2, 2005, 2007, 'base_2'), (188, 2, 2007, 2009, 'base_2'), (189, 2, 2009, 2011, 'base_2'), (190, 2, 2011, 2013, 'base_2'), (191, 2, 2013, 2015, 'base_2'), (192, 2, 2015, 2017, 'base_2'), (193, 2, 2017, NULL, 'base_2'), (194, 4, NULL, 1891, 'base_4'), (195, 4, 1891, 1895, 'base_4'), (196, 4, 1895, 1899, 'base_4'), (197, 4, 1899, 1903, 'base_4'), (198, 4, 1903, 1907, 'base_4'), (199, 4, 1907, 1911, 'base_4'), (200, 4, 1911, 1915, 'base_4'), (201, 4, 1915, 1919, 'base_4'), (202, 4, 1919, 1923, 'base_4'), (203, 4, 1923, 1927, 'base_4'), (204, 4, 1927, 1932, 'base_4'), (205, 4, 1932, 1936, 'base_4'), (206, 4, 1936, 1940, 'base_4'), (207, 4, 1940, 1944, 'base_4'), (208, 4, 1944, 1948, 'base_4'), (209, 4, 1948, 1952, 'base_4'), (210, 4, 1952, 1956, 'base_4'), (211, 4, 1956, 1960, 'base_4'), (212, 4, 1960, 1964, 'base_4'), (213, 4, 1964, 1968, 'base_4'), (214, 4, 1968, 1972, 'base_4'), (215, 4, 1972, 1977, 'base_4'), (216, 4, 1977, 1981, 'base_4'), (217, 4, 1981, 1985, 'base_4'), (218, 4, 1985, 1989, 'base_4'), (219, 4, 1989, 1993, 'base_4'), (220, 4, 1993, 1997, 'base_4'), (221, 4, 1997, 2001, 'base_4'), (222, 4, 2001, 2005, 'base_4'), (223, 4, 2005, 2009, 'base_4'), (224, 4, 2009, 2013, 'base_4'), (225, 4, 2013, 2017, 'base_4'), (226, 4, 2017, NULL, 'base_4'), (227, 4, NULL, 1890, 'offset_4'), (228, 4, 1890, 1894, 'offset_4'), (229, 4, 1894, 1898, 'offset_4'), (230, 4, 1898, 1902, 'offset_4'), (231, 4, 1902, 1906, 'offset_4'), (232, 4, 1906, 1910, 'offset_4'), (233, 4, 1910, 1914, 'offset_4'), (234, 4, 1914, 1918, 'offset_4'), (235, 4, 1918, 1922, 'offset_4'), (236, 4, 1922, 1926, 'offset_4'), (237, 4, 1926, 1931, 'offset_4'), (238, 4, 1931, 1935, 'offset_4'), (239, 4, 1935, 1939, 'offset_4'), (240, 4, 1939, 1943, 'offset_4'), (241, 4, 1943, 1947, 'offset_4'), (242, 4, 1947, 1951, 'offset_4'), (243, 4, 1951, 1955, 'offset_4'), (244, 4, 1955, 1959, 'offset_4'), (245, 4, 1959, 1963, 'offset_4'), (246, 4, 1963, 1967, 'offset_4'), (247, 4, 1967, 1971, 'offset_4'), (248, 4, 1971, 1976, 'offset_4'), (249, 4, 1976, 1980, 'offset_4'), (250, 4, 1980, 1984, 'offset_4'), (251, 4, 1984, 1988, 'offset_4'), (252, 4, 1988, 1992, 'offset_4'), (253, 4, 1992, 1996, 'offset_4'), (254, 4, 1996, 2000, 'offset_4'), (255, 4, 2000, 2004, 'offset_4'), (256, 4, 2004, 2008, 'offset_4'), (257, 4, 2008, 2012, 'offset_4'), (258, 4, 2012, 2016, 'offset_4'), (259, 4, 2016, NULL, 'offset_4'), (260, 8, NULL, 1895, 'base_8'), (261, 8, 1895, 1903, 'base_8'), (262, 8, 1903, 1911, 'base_8'), (263, 8, 1911, 1919, 'base_8'), (264, 8, 1919, 1927, 'base_8'), (265, 8, 1927, 1936, 'base_8'), (266, 8, 1936, 1944, 'base_8'), (267, 8, 1944, 1952, 'base_8'), (268, 8, 1952, 1960, 'base_8'), (269, 8, 1960, 1968, 'base_8'), (270, 8, 1968, 1977, 'base_8'), (271, 8, 1977, 1985, 'base_8'), (272, 8, 1985, 1993, 'base_8'), (273, 8, 1993, 2001, 'base_8'), (274, 8, 2001, 2009, 'base_8'), (275, 8, 2009, 2017, 'base_8'), (276, 8, 2017, NULL, 'base_8'), (277, 8, NULL, 1892, 'offset_8'), (278, 8, 1892, 1900, 'offset_8'), (279, 8, 1900, 1908, 'offset_8'), (280, 8, 1908, 1916, 'offset_8'), (281, 8, 1916, 1924, 'offset_8'), (282, 8, 1924, 1933, 'offset_8'), (283, 8, 1933, 1941, 'offset_8'), (284, 8, 1941, 1949, 'offset_8'), (285, 8, 1949, 1957, 'offset_8'), (286, 8, 1957, 1965, 'offset_8'), (287, 8, 1965, 1973, 'offset_8'), (288, 8, 1973, 1982, 'offset_8'), (289, 8, 1982, 1990, 'offset_8'), (290, 8, 1990, 1998, 'offset_8'), (291, 8, 1998, 2006, 'offset_8'), (292, 8, 2006, 2014, 'offset_8'), (293, 8, 2014, NULL, 'offset_8'), (294, 16, NULL, 1903, 'base_16'), (295, 16, 1903, 1919, 'base_16'), (296, 16, 1919, 1936, 'base_16'), (297, 16, 1936, 1952, 'base_16'), (298, 16, 1952, 1968, 'base_16'), (299, 16, 1968, 1985, 'base_16'), (300, 16, 1985, 2001, 'base_16'), (301, 16, 2001, 2017, 'base_16'), (302, 16, 2017, NULL, 'base_16'), (303, 16, NULL, 1896, 'offset_16'), (304, 16, 1896, 1912, 'offset_16'), (305, 16, 1912, 1928, 'offset_16'), (306, 16, 1928, 1945, 'offset_16'), (307, 16, 1945, 1961, 'offset_16'), (308, 16, 1961, 1978, 'offset_16'), (309, 16, 1978, 1994, 'offset_16'), (310, 16, 1994, 2010, 'offset_16'), (311, 16, 2010, NULL, 'offset_16'), (312, 32, NULL, 1919, 'base_32'), (313, 32, 1919, 1952, 'base_32'), (314, 32, 1952, 1985, 'base_32'), (315, 32, 1985, 2017, 'base_32'), (316, 32, 2017, NULL, 'base_32'), (317, 32, NULL, 1904, 'offset_32'), (318, 32, 1904, 1937, 'offset_32'), (319, 32, 1937, 1969, 'offset_32'), (320, 32, 1969, 2002, 'offset_32'), (321, 32, 2002, NULL, 'offset_32'), (322, 64, NULL, 1952, 'base_64'), (323, 64, 1952, 2017, 'base_64'), (324, 64, 2017, NULL, 'base_64'), (325, 64, NULL, 1920, 'offset_64'), (326, 64, 1920, 1986, 'offset_64'), (327, 64, 1986, NULL, 'offset_64'), (328, 128, NULL, 2017, 'base_128'), (329, 128, 2017, NULL, 'base_128'), (330, 128, NULL, 1953, 'offset_128'), (331, 128, 1953, NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS TITLE_EPISODE_NR_histogram;
CREATE TABLE TITLE_EPISODE_NR_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound INT,
    upper_bound INT,
    bucket_type TEXT
);


INSERT INTO TITLE_EPISODE_NR_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 116, 'base_1'), (1, 1, 116, 232, 'base_1'), (2, 1, 232, 347, 'base_1'), (3, 1, 347, 463, 'base_1'), (4, 1, 463, 578, 'base_1'), (5, 1, 578, 694, 'base_1'), (6, 1, 694, 809, 'base_1'), (7, 1, 809, 925, 'base_1'), (8, 1, 925, 1040, 'base_1'), (9, 1, 1040, 1156, 'base_1'), (10, 1, 1156, 1272, 'base_1'), (11, 1, 1272, 1387, 'base_1'), (12, 1, 1387, 1503, 'base_1'), (13, 1, 1503, 1618, 'base_1'), (14, 1, 1618, 1734, 'base_1'), (15, 1, 1734, 1849, 'base_1'), (16, 1, 1849, 1965, 'base_1'), (17, 1, 1965, 2080, 'base_1'), (18, 1, 2080, 2196, 'base_1'), (19, 1, 2196, 2312, 'base_1'), (20, 1, 2312, 2427, 'base_1'), (21, 1, 2427, 2543, 'base_1'), (22, 1, 2543, 2658, 'base_1'), (23, 1, 2658, 2774, 'base_1'), (24, 1, 2774, 2889, 'base_1'), (25, 1, 2889, 3005, 'base_1'), (26, 1, 3005, 3120, 'base_1'), (27, 1, 3120, 3236, 'base_1'), (28, 1, 3236, 3351, 'base_1'), (29, 1, 3351, 3467, 'base_1'), (30, 1, 3467, 3583, 'base_1'), (31, 1, 3583, 3698, 'base_1'), (32, 1, 3698, 3814, 'base_1'), (33, 1, 3814, 3929, 'base_1'), (34, 1, 3929, 4045, 'base_1'), (35, 1, 4045, 4160, 'base_1'), (36, 1, 4160, 4276, 'base_1'), (37, 1, 4276, 4391, 'base_1'), (38, 1, 4391, 4507, 'base_1'), (39, 1, 4507, 4623, 'base_1'), (40, 1, 4623, 4738, 'base_1'), (41, 1, 4738, 4854, 'base_1'), (42, 1, 4854, 4969, 'base_1'), (43, 1, 4969, 5085, 'base_1'), (44, 1, 5085, 5200, 'base_1'), (45, 1, 5200, 5316, 'base_1'), (46, 1, 5316, 5431, 'base_1'), (47, 1, 5431, 5547, 'base_1'), (48, 1, 5547, 5662, 'base_1'), (49, 1, 5662, 5778, 'base_1'), (50, 1, 5778, 5894, 'base_1'), (51, 1, 5894, 6009, 'base_1'), (52, 1, 6009, 6125, 'base_1'), (53, 1, 6125, 6240, 'base_1'), (54, 1, 6240, 6356, 'base_1'), (55, 1, 6356, 6471, 'base_1'), (56, 1, 6471, 6587, 'base_1'), (57, 1, 6587, 6702, 'base_1'), (58, 1, 6702, 6818, 'base_1'), (59, 1, 6818, 6934, 'base_1'), (60, 1, 6934, 7049, 'base_1'), (61, 1, 7049, 7165, 'base_1'), (62, 1, 7165, 7280, 'base_1'), (63, 1, 7280, 7396, 'base_1'), (64, 1, 7396, 7511, 'base_1'), (65, 1, 7511, 7627, 'base_1'), (66, 1, 7627, 7742, 'base_1'), (67, 1, 7742, 7858, 'base_1'), (68, 1, 7858, 7973, 'base_1'), (69, 1, 7973, 8089, 'base_1'), (70, 1, 8089, 8205, 'base_1'), (71, 1, 8205, 8320, 'base_1'), (72, 1, 8320, 8436, 'base_1'), (73, 1, 8436, 8551, 'base_1'), (74, 1, 8551, 8667, 'base_1'), (75, 1, 8667, 8782, 'base_1'), (76, 1, 8782, 8898, 'base_1'), (77, 1, 8898, 9013, 'base_1'), (78, 1, 9013, 9129, 'base_1'), (79, 1, 9129, 9245, 'base_1'), (80, 1, 9245, 9360, 'base_1'), (81, 1, 9360, 9476, 'base_1'), (82, 1, 9476, 9591, 'base_1'), (83, 1, 9591, 9707, 'base_1'), (84, 1, 9707, 9822, 'base_1'), (85, 1, 9822, 9938, 'base_1'), (86, 1, 9938, 10053, 'base_1'), (87, 1, 10053, 10169, 'base_1'), (88, 1, 10169, 10284, 'base_1'), (89, 1, 10284, 10400, 'base_1'), (90, 1, 10400, 10516, 'base_1'), (91, 1, 10516, 10631, 'base_1'), (92, 1, 10631, 10747, 'base_1'), (93, 1, 10747, 10862, 'base_1'), (94, 1, 10862, 10978, 'base_1'), (95, 1, 10978, 11093, 'base_1'), (96, 1, 11093, 11209, 'base_1'), (97, 1, 11209, 11324, 'base_1'), (98, 1, 11324, 11440, 'base_1'), (99, 1, 11440, 11556, 'base_1'), (100, 1, 11556, 11671, 'base_1'), (101, 1, 11671, 11787, 'base_1'), (102, 1, 11787, 11902, 'base_1'), (103, 1, 11902, 12018, 'base_1'), (104, 1, 12018, 12133, 'base_1'), (105, 1, 12133, 12249, 'base_1'), (106, 1, 12249, 12364, 'base_1'), (107, 1, 12364, 12480, 'base_1'), (108, 1, 12480, 12596, 'base_1'), (109, 1, 12596, 12713, 'base_1'), (110, 1, 12713, 12862, 'base_1'), (111, 1, 12862, 13014, 'base_1'), (112, 1, 13014, 13131, 'base_1'), (113, 1, 13131, 13246, 'base_1'), (114, 1, 13246, 13363, 'base_1'), (115, 1, 13363, 13478, 'base_1'), (116, 1, 13478, 13595, 'base_1'), (117, 1, 13595, 13710, 'base_1'), (118, 1, 13710, 13826, 'base_1'), (119, 1, 13826, 14318, 'base_1'), (120, 1, 14318, 14623, 'base_1'), (121, 1, 14623, 14931, 'base_1'), (122, 1, 14931, 15070, 'base_1'), (123, 1, 15070, 15189, 'base_1'), (124, 1, 15189, 15304, 'base_1'), (125, 1, 15304, 15420, 'base_1'), (126, 1, 15420, 15535, 'base_1'), (127, 1, 15535, 15651, 'base_1'), (128, 1, 15651, NULL, 'base_1'), (129, 2, NULL, 232, 'base_2'), (130, 2, 232, 463, 'base_2'), (131, 2, 463, 694, 'base_2'), (132, 2, 694, 925, 'base_2'), (133, 2, 925, 1156, 'base_2'), (134, 2, 1156, 1387, 'base_2'), (135, 2, 1387, 1618, 'base_2'), (136, 2, 1618, 1849, 'base_2'), (137, 2, 1849, 2080, 'base_2'), (138, 2, 2080, 2312, 'base_2'), (139, 2, 2312, 2543, 'base_2'), (140, 2, 2543, 2774, 'base_2'), (141, 2, 2774, 3005, 'base_2'), (142, 2, 3005, 3236, 'base_2'), (143, 2, 3236, 3467, 'base_2'), (144, 2, 3467, 3698, 'base_2'), (145, 2, 3698, 3929, 'base_2'), (146, 2, 3929, 4160, 'base_2'), (147, 2, 4160, 4391, 'base_2'), (148, 2, 4391, 4623, 'base_2'), (149, 2, 4623, 4854, 'base_2'), (150, 2, 4854, 5085, 'base_2'), (151, 2, 5085, 5316, 'base_2'), (152, 2, 5316, 5547, 'base_2'), (153, 2, 5547, 5778, 'base_2'), (154, 2, 5778, 6009, 'base_2'), (155, 2, 6009, 6240, 'base_2'), (156, 2, 6240, 6471, 'base_2'), (157, 2, 6471, 6702, 'base_2'), (158, 2, 6702, 6934, 'base_2'), (159, 2, 6934, 7165, 'base_2'), (160, 2, 7165, 7396, 'base_2'), (161, 2, 7396, 7627, 'base_2'), (162, 2, 7627, 7858, 'base_2'), (163, 2, 7858, 8089, 'base_2'), (164, 2, 8089, 8320, 'base_2'), (165, 2, 8320, 8551, 'base_2'), (166, 2, 8551, 8782, 'base_2'), (167, 2, 8782, 9013, 'base_2'), (168, 2, 9013, 9245, 'base_2'), (169, 2, 9245, 9476, 'base_2'), (170, 2, 9476, 9707, 'base_2'), (171, 2, 9707, 9938, 'base_2'), (172, 2, 9938, 10169, 'base_2'), (173, 2, 10169, 10400, 'base_2'), (174, 2, 10400, 10631, 'base_2'), (175, 2, 10631, 10862, 'base_2'), (176, 2, 10862, 11093, 'base_2'), (177, 2, 11093, 11324, 'base_2'), (178, 2, 11324, 11556, 'base_2'), (179, 2, 11556, 11787, 'base_2'), (180, 2, 11787, 12018, 'base_2'), (181, 2, 12018, 12249, 'base_2'), (182, 2, 12249, 12480, 'base_2'), (183, 2, 12480, 12713, 'base_2'), (184, 2, 12713, 13014, 'base_2'), (185, 2, 13014, 13246, 'base_2'), (186, 2, 13246, 13478, 'base_2'), (187, 2, 13478, 13710, 'base_2'), (188, 2, 13710, 14318, 'base_2'), (189, 2, 14318, 14931, 'base_2'), (190, 2, 14931, 15189, 'base_2'), (191, 2, 15189, 15420, 'base_2'), (192, 2, 15420, 15651, 'base_2'), (193, 2, 15651, NULL, 'base_2'), (194, 4, NULL, 463, 'base_4'), (195, 4, 463, 925, 'base_4'), (196, 4, 925, 1387, 'base_4'), (197, 4, 1387, 1849, 'base_4'), (198, 4, 1849, 2312, 'base_4'), (199, 4, 2312, 2774, 'base_4'), (200, 4, 2774, 3236, 'base_4'), (201, 4, 3236, 3698, 'base_4'), (202, 4, 3698, 4160, 'base_4'), (203, 4, 4160, 4623, 'base_4'), (204, 4, 4623, 5085, 'base_4'), (205, 4, 5085, 5547, 'base_4'), (206, 4, 5547, 6009, 'base_4'), (207, 4, 6009, 6471, 'base_4'), (208, 4, 6471, 6934, 'base_4'), (209, 4, 6934, 7396, 'base_4'), (210, 4, 7396, 7858, 'base_4'), (211, 4, 7858, 8320, 'base_4'), (212, 4, 8320, 8782, 'base_4'), (213, 4, 8782, 9245, 'base_4'), (214, 4, 9245, 9707, 'base_4'), (215, 4, 9707, 10169, 'base_4'), (216, 4, 10169, 10631, 'base_4'), (217, 4, 10631, 11093, 'base_4'), (218, 4, 11093, 11556, 'base_4'), (219, 4, 11556, 12018, 'base_4'), (220, 4, 12018, 12480, 'base_4'), (221, 4, 12480, 13014, 'base_4'), (222, 4, 13014, 13478, 'base_4'), (223, 4, 13478, 14318, 'base_4'), (224, 4, 14318, 15189, 'base_4'), (225, 4, 15189, 15651, 'base_4'), (226, 4, 15651, NULL, 'base_4'), (227, 4, NULL, 347, 'offset_4'), (228, 4, 347, 809, 'offset_4'), (229, 4, 809, 1272, 'offset_4'), (230, 4, 1272, 1734, 'offset_4'), (231, 4, 1734, 2196, 'offset_4'), (232, 4, 2196, 2658, 'offset_4'), (233, 4, 2658, 3120, 'offset_4'), (234, 4, 3120, 3583, 'offset_4'), (235, 4, 3583, 4045, 'offset_4'), (236, 4, 4045, 4507, 'offset_4'), (237, 4, 4507, 4969, 'offset_4'), (238, 4, 4969, 5431, 'offset_4'), (239, 4, 5431, 5894, 'offset_4'), (240, 4, 5894, 6356, 'offset_4'), (241, 4, 6356, 6818, 'offset_4'), (242, 4, 6818, 7280, 'offset_4'), (243, 4, 7280, 7742, 'offset_4'), (244, 4, 7742, 8205, 'offset_4'), (245, 4, 8205, 8667, 'offset_4'), (246, 4, 8667, 9129, 'offset_4'), (247, 4, 9129, 9591, 'offset_4'), (248, 4, 9591, 10053, 'offset_4'), (249, 4, 10053, 10516, 'offset_4'), (250, 4, 10516, 10978, 'offset_4'), (251, 4, 10978, 11440, 'offset_4'), (252, 4, 11440, 11902, 'offset_4'), (253, 4, 11902, 12364, 'offset_4'), (254, 4, 12364, 12862, 'offset_4'), (255, 4, 12862, 13363, 'offset_4'), (256, 4, 13363, 13826, 'offset_4'), (257, 4, 13826, 15070, 'offset_4'), (258, 4, 15070, 15535, 'offset_4'), (259, 4, 15535, NULL, 'offset_4'), (260, 8, NULL, 925, 'base_8'), (261, 8, 925, 1849, 'base_8'), (262, 8, 1849, 2774, 'base_8'), (263, 8, 2774, 3698, 'base_8'), (264, 8, 3698, 4623, 'base_8'), (265, 8, 4623, 5547, 'base_8'), (266, 8, 5547, 6471, 'base_8'), (267, 8, 6471, 7396, 'base_8'), (268, 8, 7396, 8320, 'base_8'), (269, 8, 8320, 9245, 'base_8'), (270, 8, 9245, 10169, 'base_8'), (271, 8, 10169, 11093, 'base_8'), (272, 8, 11093, 12018, 'base_8'), (273, 8, 12018, 13014, 'base_8'), (274, 8, 13014, 14318, 'base_8'), (275, 8, 14318, 15651, 'base_8'), (276, 8, 15651, NULL, 'base_8'), (277, 8, NULL, 578, 'offset_8'), (278, 8, 578, 1503, 'offset_8'), (279, 8, 1503, 2427, 'offset_8'), (280, 8, 2427, 3351, 'offset_8'), (281, 8, 3351, 4276, 'offset_8'), (282, 8, 4276, 5200, 'offset_8'), (283, 8, 5200, 6125, 'offset_8'), (284, 8, 6125, 7049, 'offset_8'), (285, 8, 7049, 7973, 'offset_8'), (286, 8, 7973, 8898, 'offset_8'), (287, 8, 8898, 9822, 'offset_8'), (288, 8, 9822, 10747, 'offset_8'), (289, 8, 10747, 11671, 'offset_8'), (290, 8, 11671, 12596, 'offset_8'), (291, 8, 12596, 13595, 'offset_8'), (292, 8, 13595, 15304, 'offset_8'), (293, 8, 15304, NULL, 'offset_8'), (294, 16, NULL, 1849, 'base_16'), (295, 16, 1849, 3698, 'base_16'), (296, 16, 3698, 5547, 'base_16'), (297, 16, 5547, 7396, 'base_16'), (298, 16, 7396, 9245, 'base_16'), (299, 16, 9245, 11093, 'base_16'), (300, 16, 11093, 13014, 'base_16'), (301, 16, 13014, 15651, 'base_16'), (302, 16, 15651, NULL, 'base_16'), (303, 16, NULL, 1040, 'offset_16'), (304, 16, 1040, 2889, 'offset_16'), (305, 16, 2889, 4738, 'offset_16'), (306, 16, 4738, 6587, 'offset_16'), (307, 16, 6587, 8436, 'offset_16'), (308, 16, 8436, 10284, 'offset_16'), (309, 16, 10284, 12133, 'offset_16'), (310, 16, 12133, 14623, 'offset_16'), (311, 16, 14623, NULL, 'offset_16'), (312, 32, NULL, 3698, 'base_32'), (313, 32, 3698, 7396, 'base_32'), (314, 32, 7396, 11093, 'base_32'), (315, 32, 11093, 15651, 'base_32'), (316, 32, 15651, NULL, 'base_32'), (317, 32, NULL, 1965, 'offset_32'), (318, 32, 1965, 5662, 'offset_32'), (319, 32, 5662, 9360, 'offset_32'), (320, 32, 9360, 13131, 'offset_32'), (321, 32, 13131, NULL, 'offset_32'), (322, 64, NULL, 7396, 'base_64'), (323, 64, 7396, 15651, 'base_64'), (324, 64, 15651, NULL, 'base_64'), (325, 64, NULL, 3814, 'offset_64'), (326, 64, 3814, 11209, 'offset_64'), (327, 64, 11209, NULL, 'offset_64'), (328, 128, NULL, 15651, 'base_128'), (329, 128, 15651, NULL, 'base_128'), (330, 128, NULL, 7511, 'offset_128'), (331, 128, 7511, NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS TITLE_IMDB_INDEX_histogram;
CREATE TABLE TITLE_IMDB_INDEX_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound TEXT,
    upper_bound TEXT,
    bucket_type TEXT
);


INSERT INTO TITLE_IMDB_INDEX_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 'I', 'base_1'), (1, 1, 'I', 'II', 'base_1'), (2, 1, 'II', 'III', 'base_1'), (3, 1, 'III', 'III', 'base_1'), (4, 1, 'III', 'IV', 'base_1'), (5, 1, 'IV', 'IX', 'base_1'), (6, 1, 'IX', 'V', 'base_1'), (7, 1, 'V', 'V', 'base_1'), (8, 1, 'V', 'VI', 'base_1'), (9, 1, 'VI', 'VII', 'base_1'), (10, 1, 'VII', 'VIII', 'base_1'), (11, 1, 'VIII', 'VIII', 'base_1'), (12, 1, 'VIII', 'X', 'base_1'), (13, 1, 'X', 'XI', 'base_1'), (14, 1, 'XI', 'XI', 'base_1'), (15, 1, 'XI', 'XII', 'base_1'), (16, 1, 'XII', 'XIII', 'base_1'), (17, 1, 'XIII', 'XIV', 'base_1'), (18, 1, 'XIV', 'XIV', 'base_1'), (19, 1, 'XIV', 'XIX', 'base_1'), (20, 1, 'XIX', 'XV', 'base_1'), (21, 1, 'XV', 'XVI', 'base_1'), (22, 1, 'XVI', 'XVI', 'base_1'), (23, 1, 'XVI', 'XVII', 'base_1'), (24, 1, 'XVII', 'XVIII', 'base_1'), (25, 1, 'XVIII', 'XVIII', 'base_1'), (26, 1, 'XVIII', 'XX', 'base_1'), (27, 1, 'XX', 'XXI', 'base_1'), (28, 1, 'XXI', 'XXII', 'base_1'), (29, 1, 'XXII', 'XXII', 'base_1'), (30, 1, 'XXII', 'XXIII', 'base_1'), (31, 1, 'XXIII', NULL, 'base_1'), (32, 2, NULL, 'II', 'base_2'), (33, 2, 'II', 'III', 'base_2'), (34, 2, 'III', 'IX', 'base_2'), (35, 2, 'IX', 'V', 'base_2'), (36, 2, 'V', 'VII', 'base_2'), (37, 2, 'VII', 'VIII', 'base_2'), (38, 2, 'VIII', 'XI', 'base_2'), (39, 2, 'XI', 'XII', 'base_2'), (40, 2, 'XII', 'XIV', 'base_2'), (41, 2, 'XIV', 'XIX', 'base_2'), (42, 2, 'XIX', 'XVI', 'base_2'), (43, 2, 'XVI', 'XVII', 'base_2'), (44, 2, 'XVII', 'XVIII', 'base_2'), (45, 2, 'XVIII', 'XXI', 'base_2'), (46, 2, 'XXI', 'XXII', 'base_2'), (47, 2, 'XXII', NULL, 'base_2'), (48, 4, NULL, 'III', 'base_4'), (49, 4, 'III', 'V', 'base_4'), (50, 4, 'V', 'VIII', 'base_4'), (51, 4, 'VIII', 'XII', 'base_4'), (52, 4, 'XII', 'XIX', 'base_4'), (53, 4, 'XIX', 'XVII', 'base_4'), (54, 4, 'XVII', 'XXI', 'base_4'), (55, 4, 'XXI', NULL, 'base_4'), (56, 4, NULL, 'III', 'offset_4'), (57, 4, 'III', 'V', 'offset_4'), (58, 4, 'V', 'VIII', 'offset_4'), (59, 4, 'VIII', 'XI', 'offset_4'), (60, 4, 'XI', 'XIV', 'offset_4'), (61, 4, 'XIV', 'XVI', 'offset_4'), (62, 4, 'XVI', 'XX', 'offset_4'), (63, 4, 'XX', 'XXIII', 'offset_4'), (64, 4, 'XXIII', NULL, 'offset_4'), (65, 8, NULL, 'V', 'base_8'), (66, 8, 'V', 'XII', 'base_8'), (67, 8, 'XII', 'XVII', 'base_8'), (68, 8, 'XVII', NULL, 'base_8'), (69, 8, NULL, 'IV', 'offset_8'), (70, 8, 'IV', 'X', 'offset_8'), (71, 8, 'X', 'XV', 'offset_8'), (72, 8, 'XV', 'XXII', 'offset_8'), (73, 8, 'XXII', NULL, 'offset_8'), (74, 16, NULL, 'XII', 'base_16'), (75, 16, 'XII', NULL, 'base_16'), (76, 16, NULL, 'VI', 'offset_16'), (77, 16, 'VI', 'XVIII', 'offset_16'), (78, 16, 'XVIII', NULL, 'offset_16'), (79, 32, NULL, NULL, 'base_32'), (80, 32, NULL, 'XIII', 'offset_32'), (81, 32, 'XIII', NULL, 'offset_32'), (82, 64, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS TITLE_SERIES_YEARS_histogram;
CREATE TABLE TITLE_SERIES_YEARS_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound TEXT,
    upper_bound TEXT,
    bucket_type TEXT
);


INSERT INTO TITLE_SERIES_YEARS_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, '1646-1786', 'base_1'), (1, 1, '1646-1786', '1813-1848', 'base_1'), (2, 1, '1813-1848', '1898-1918', 'base_1'), (3, 1, '1898-1918', '1918-1945', 'base_1'), (4, 1, '1918-1945', '1935-1950', 'base_1'), (5, 1, '1935-1950', '1939-????', 'base_1'), (6, 1, '1939-????', '1945-1946', 'base_1'), (7, 1, '1945-1946', '1946-1956', 'base_1'), (8, 1, '1946-1956', '1947-1957', 'base_1'), (9, 1, '1947-1957', '1948-1955', 'base_1'), (10, 1, '1948-1955', '1948-????', 'base_1'), (11, 1, '1948-????', '1949-1960', 'base_1'), (12, 1, '1949-1960', '1950-1957', 'base_1'), (13, 1, '1950-1957', '1950-1993', 'base_1'), (14, 1, '1950-1993', '1951-1962', 'base_1'), (15, 1, '1951-1962', '1952-1955', 'base_1'), (16, 1, '1952-1955', '1952-1968', 'base_1'), (17, 1, '1952-1968', '1953-1954', 'base_1'), (18, 1, '1953-1954', '1953-1968', 'base_1'), (19, 1, '1953-1968', '1954-1955', 'base_1'), (20, 1, '1954-1955', '1954-1970', 'base_1'), (21, 1, '1954-1970', '1955-1957', 'base_1'), (22, 1, '1955-1957', '1955-1968', 'base_1'), (23, 1, '1955-1968', '1955-1989', 'base_1'), (24, 1, '1955-1989', '1956-1960', 'base_1'), (25, 1, '1956-1960', '1956-1974', 'base_1'), (26, 1, '1956-1974', '1957-1961', 'base_1'), (27, 1, '1957-1961', '1957-1973', 'base_1'), (28, 1, '1957-1973', '1957-1996', 'base_1'), (29, 1, '1957-1996', '1958-1965', 'base_1'), (30, 1, '1958-1965', '1958-1980', 'base_1'), (31, 1, '1958-1980', '1958-????', 'base_1'), (32, 1, '1958-????', '1959-1969', 'base_1'), (33, 1, '1959-1969', '1959-1999', 'base_1'), (34, 1, '1959-1999', '1960-1969', 'base_1'), (35, 1, '1960-1969', '1960-1998', 'base_1'), (36, 1, '1960-1998', '1961-1971', 'base_1'), (37, 1, '1961-1971', '1961-????', 'base_1'), (38, 1, '1961-????', '1962-1973', 'base_1'), (39, 1, '1962-1973', '1962-1989', 'base_1'), (40, 1, '1962-1989', '1963-1967', 'base_1'), (41, 1, '1963-1967', '1963-1978', 'base_1'), (42, 1, '1963-1978', '1963-2001', 'base_1'), (43, 1, '1963-2001', '1964-1972', 'base_1'), (44, 1, '1964-1972', '1964-1991', 'base_1'), (45, 1, '1964-1991', '1965-1969', 'base_1'), (46, 1, '1965-1969', '1965-1981', 'base_1'), (47, 1, '1965-1981', '1965-2012', 'base_1'), (48, 1, '1965-2012', '1966-1977', 'base_1'), (49, 1, '1966-1977', '1966-1997', 'base_1'), (50, 1, '1966-1997', '1967-1975', 'base_1'), (51, 1, '1967-1975', '1967-1996', 'base_1'), (52, 1, '1967-1996', '1968-1975', 'base_1'), (53, 1, '1968-1975', '1968-1986', 'base_1'), (54, 1, '1968-1986', '1969-1970', 'base_1'), (55, 1, '1969-1970', '1969-1981', 'base_1'), (56, 1, '1969-1981', '1969-1996', 'base_1'), (57, 1, '1969-1996', '1970-1976', 'base_1'), (58, 1, '1970-1976', '1970-1988', 'base_1'), (59, 1, '1970-1988', '1971-1974', 'base_1'), (60, 1, '1971-1974', '1971-1987', 'base_1'), (61, 1, '1971-1987', '1971-2007', 'base_1'), (62, 1, '1971-2007', '1972-1980', 'base_1'), (63, 1, '1972-1980', '1972-1992', 'base_1'), (64, 1, '1972-1992', '1972-2008', 'base_1'), (65, 1, '1972-2008', '1973-1982', 'base_1'), (66, 1, '1973-1982', '1973-1996', 'base_1'), (67, 1, '1973-1996', '1974-1981', 'base_1'), (68, 1, '1974-1981', '1974-1993', 'base_1'), (69, 1, '1974-1993', '1975-1981', 'base_1'), (70, 1, '1975-1981', '1975-1993', 'base_1'), (71, 1, '1975-1993', '1976-1981', 'base_1'), (72, 1, '1976-1981', '1976-1999', 'base_1'), (73, 1, '1976-1999', '1977-1983', 'base_1'), (74, 1, '1977-1983', '1977-1995', 'base_1'), (75, 1, '1977-1995', '1978-1984', 'base_1'), (76, 1, '1978-1984', '1978-1997', 'base_1'), (77, 1, '1978-1997', '1979-1984', 'base_1'), (78, 1, '1979-1984', '1979-2000', 'base_1'), (79, 1, '1979-2000', '1980-1989', 'base_1'), (80, 1, '1980-1989', '1980-2003', 'base_1'), (81, 1, '1980-2003', '1981-1985', 'base_1'), (82, 1, '1981-1985', '1981-1996', 'base_1'), (83, 1, '1981-1996', '1982-1983', 'base_1'), (84, 1, '1982-1983', '1982-1995', 'base_1'), (85, 1, '1982-1995', '1983-1983', 'base_1'), (86, 1, '1983-1983', '1983-1993', 'base_1'), (87, 1, '1983-1993', '1983-2005', 'base_1'), (88, 1, '1983-2005', '1984-1992', 'base_1'), (89, 1, '1984-1992', '1984-2005', 'base_1'), (90, 1, '1984-2005', '1985-1990', 'base_1'), (91, 1, '1985-1990', '1985-2002', 'base_1'), (92, 1, '1985-2002', '1986-1990', 'base_1'), (93, 1, '1986-1990', '1986-2001', 'base_1'), (94, 1, '1986-2001', '1987-1988', 'base_1'), (95, 1, '1987-1988', '1987-1999', 'base_1'), (96, 1, '1987-1999', '1988-1988', 'base_1'), (97, 1, '1988-1988', '1988-1999', 'base_1'), (98, 1, '1988-1999', '1988-2012', 'base_1'), (99, 1, '1988-2012', '1989-1998', 'base_1'), (100, 1, '1989-1998', '1989-????', 'base_1'), (101, 1, '1989-????', '1990-2000', 'base_1'), (102, 1, '1990-2000', '1990-????', 'base_1'), (103, 1, '1990-????', '1991-2001', 'base_1'), (104, 1, '1991-2001', '1991-????', 'base_1'), (105, 1, '1991-????', '1992-2002', 'base_1'), (106, 1, '1992-2002', '1993-1995', 'base_1'), (107, 1, '1993-1995', '1993-2005', 'base_1'), (108, 1, '1993-2005', '1994-1997', 'base_1'), (109, 1, '1994-1997', '1994-2008', 'base_1'), (110, 1, '1994-2008', '1995-2002', 'base_1'), (111, 1, '1995-2002', '1996-1998', 'base_1'), (112, 1, '1996-1998', '1996-2010', 'base_1'), (113, 1, '1996-2010', '1997-2006', 'base_1'), (114, 1, '1997-2006', '1998-2001', 'base_1'), (115, 1, '1998-2001', '1998-2012', 'base_1'), (116, 1, '1998-2012', '1999-2008', 'base_1'), (117, 1, '1999-2008', '2000-2006', 'base_1'), (118, 1, '2000-2006', '2001-2002', 'base_1'), (119, 1, '2001-2002', '2001-2013', 'base_1'), (120, 1, '2001-2013', '2002-2010', 'base_1'), (121, 1, '2002-2010', '2003-2009', 'base_1'), (122, 1, '2003-2009', '2004-2009', 'base_1'), (123, 1, '2004-2009', '2005-2010', 'base_1'), (124, 1, '2005-2010', '2006-2012', 'base_1'), (125, 1, '2006-2012', '2008-2008', 'base_1'), (126, 1, '2008-2008', '2009-2013', 'base_1'), (127, 1, '2009-2013', '2011-????', 'base_1'), (128, 1, '2011-????', NULL, 'base_1'), (129, 2, NULL, '1813-1848', 'base_2'), (130, 2, '1813-1848', '1918-1945', 'base_2'), (131, 2, '1918-1945', '1939-????', 'base_2'), (132, 2, '1939-????', '1946-1956', 'base_2'), (133, 2, '1946-1956', '1948-1955', 'base_2'), (134, 2, '1948-1955', '1949-1960', 'base_2'), (135, 2, '1949-1960', '1950-1993', 'base_2'), (136, 2, '1950-1993', '1952-1955', 'base_2'), (137, 2, '1952-1955', '1953-1954', 'base_2'), (138, 2, '1953-1954', '1954-1955', 'base_2'), (139, 2, '1954-1955', '1955-1957', 'base_2'), (140, 2, '1955-1957', '1955-1989', 'base_2'), (141, 2, '1955-1989', '1956-1974', 'base_2'), (142, 2, '1956-1974', '1957-1973', 'base_2'), (143, 2, '1957-1973', '1958-1965', 'base_2'), (144, 2, '1958-1965', '1958-????', 'base_2'), (145, 2, '1958-????', '1959-1999', 'base_2'), (146, 2, '1959-1999', '1960-1998', 'base_2'), (147, 2, '1960-1998', '1961-????', 'base_2'), (148, 2, '1961-????', '1962-1989', 'base_2'), (149, 2, '1962-1989', '1963-1978', 'base_2'), (150, 2, '1963-1978', '1964-1972', 'base_2'), (151, 2, '1964-1972', '1965-1969', 'base_2'), (152, 2, '1965-1969', '1965-2012', 'base_2'), (153, 2, '1965-2012', '1966-1997', 'base_2'), (154, 2, '1966-1997', '1967-1996', 'base_2'), (155, 2, '1967-1996', '1968-1986', 'base_2'), (156, 2, '1968-1986', '1969-1981', 'base_2'), (157, 2, '1969-1981', '1970-1976', 'base_2'), (158, 2, '1970-1976', '1971-1974', 'base_2'), (159, 2, '1971-1974', '1971-2007', 'base_2'), (160, 2, '1971-2007', '1972-1992', 'base_2'), (161, 2, '1972-1992', '1973-1982', 'base_2'), (162, 2, '1973-1982', '1974-1981', 'base_2'), (163, 2, '1974-1981', '1975-1981', 'base_2'), (164, 2, '1975-1981', '1976-1981', 'base_2'), (165, 2, '1976-1981', '1977-1983', 'base_2'), (166, 2, '1977-1983', '1978-1984', 'base_2'), (167, 2, '1978-1984', '1979-1984', 'base_2'), (168, 2, '1979-1984', '1980-1989', 'base_2'), (169, 2, '1980-1989', '1981-1985', 'base_2'), (170, 2, '1981-1985', '1982-1983', 'base_2'), (171, 2, '1982-1983', '1983-1983', 'base_2'), (172, 2, '1983-1983', '1983-2005', 'base_2'), (173, 2, '1983-2005', '1984-2005', 'base_2'), (174, 2, '1984-2005', '1985-2002', 'base_2'), (175, 2, '1985-2002', '1986-2001', 'base_2'), (176, 2, '1986-2001', '1987-1999', 'base_2'), (177, 2, '1987-1999', '1988-1999', 'base_2'), (178, 2, '1988-1999', '1989-1998', 'base_2'), (179, 2, '1989-1998', '1990-2000', 'base_2'), (180, 2, '1990-2000', '1991-2001', 'base_2'), (181, 2, '1991-2001', '1992-2002', 'base_2'), (182, 2, '1992-2002', '1993-2005', 'base_2'), (183, 2, '1993-2005', '1994-2008', 'base_2'), (184, 2, '1994-2008', '1996-1998', 'base_2'), (185, 2, '1996-1998', '1997-2006', 'base_2'), (186, 2, '1997-2006', '1998-2012', 'base_2'), (187, 2, '1998-2012', '2000-2006', 'base_2'), (188, 2, '2000-2006', '2001-2013', 'base_2'), (189, 2, '2001-2013', '2003-2009', 'base_2'), (190, 2, '2003-2009', '2005-2010', 'base_2'), (191, 2, '2005-2010', '2008-2008', 'base_2'), (192, 2, '2008-2008', '2011-????', 'base_2'), (193, 2, '2011-????', NULL, 'base_2'), (194, 4, NULL, '1918-1945', 'base_4'), (195, 4, '1918-1945', '1946-1956', 'base_4'), (196, 4, '1946-1956', '1949-1960', 'base_4'), (197, 4, '1949-1960', '1952-1955', 'base_4'), (198, 4, '1952-1955', '1954-1955', 'base_4'), (199, 4, '1954-1955', '1955-1989', 'base_4'), (200, 4, '1955-1989', '1957-1973', 'base_4'), (201, 4, '1957-1973', '1958-????', 'base_4'), (202, 4, '1958-????', '1960-1998', 'base_4'), (203, 4, '1960-1998', '1962-1989', 'base_4'), (204, 4, '1962-1989', '1964-1972', 'base_4'), (205, 4, '1964-1972', '1965-2012', 'base_4'), (206, 4, '1965-2012', '1967-1996', 'base_4'), (207, 4, '1967-1996', '1969-1981', 'base_4'), (208, 4, '1969-1981', '1971-1974', 'base_4'), (209, 4, '1971-1974', '1972-1992', 'base_4'), (210, 4, '1972-1992', '1974-1981', 'base_4'), (211, 4, '1974-1981', '1976-1981', 'base_4'), (212, 4, '1976-1981', '1978-1984', 'base_4'), (213, 4, '1978-1984', '1980-1989', 'base_4'), (214, 4, '1980-1989', '1982-1983', 'base_4'), (215, 4, '1982-1983', '1983-2005', 'base_4'), (216, 4, '1983-2005', '1985-2002', 'base_4'), (217, 4, '1985-2002', '1987-1999', 'base_4'), (218, 4, '1987-1999', '1989-1998', 'base_4'), (219, 4, '1989-1998', '1991-2001', 'base_4'), (220, 4, '1991-2001', '1993-2005', 'base_4'), (221, 4, '1993-2005', '1996-1998', 'base_4'), (222, 4, '1996-1998', '1998-2012', 'base_4'), (223, 4, '1998-2012', '2001-2013', 'base_4'), (224, 4, '2001-2013', '2005-2010', 'base_4'), (225, 4, '2005-2010', '2011-????', 'base_4'), (226, 4, '2011-????', NULL, 'base_4'), (227, 4, NULL, '1898-1918', 'offset_4'), (228, 4, '1898-1918', '1945-1946', 'offset_4'), (229, 4, '1945-1946', '1948-????', 'offset_4'), (230, 4, '1948-????', '1951-1962', 'offset_4'), (231, 4, '1951-1962', '1953-1968', 'offset_4'), (232, 4, '1953-1968', '1955-1968', 'offset_4'), (233, 4, '1955-1968', '1957-1961', 'offset_4'), (234, 4, '1957-1961', '1958-1980', 'offset_4'), (235, 4, '1958-1980', '1960-1969', 'offset_4'), (236, 4, '1960-1969', '1962-1973', 'offset_4'), (237, 4, '1962-1973', '1963-2001', 'offset_4'), (238, 4, '1963-2001', '1965-1981', 'offset_4'), (239, 4, '1965-1981', '1967-1975', 'offset_4'), (240, 4, '1967-1975', '1969-1970', 'offset_4'), (241, 4, '1969-1970', '1970-1988', 'offset_4'), (242, 4, '1970-1988', '1972-1980', 'offset_4'), (243, 4, '1972-1980', '1973-1996', 'offset_4'), (244, 4, '1973-1996', '1975-1993', 'offset_4'), (245, 4, '1975-1993', '1977-1995', 'offset_4'), (246, 4, '1977-1995', '1979-2000', 'offset_4'), (247, 4, '1979-2000', '1981-1996', 'offset_4'), (248, 4, '1981-1996', '1983-1993', 'offset_4'), (249, 4, '1983-1993', '1985-1990', 'offset_4'), (250, 4, '1985-1990', '1987-1988', 'offset_4'), (251, 4, '1987-1988', '1988-2012', 'offset_4'), (252, 4, '1988-2012', '1990-????', 'offset_4'), (253, 4, '1990-????', '1993-1995', 'offset_4'), (254, 4, '1993-1995', '1995-2002', 'offset_4'), (255, 4, '1995-2002', '1998-2001', 'offset_4'), (256, 4, '1998-2001', '2001-2002', 'offset_4'), (257, 4, '2001-2002', '2004-2009', 'offset_4'), (258, 4, '2004-2009', '2009-2013', 'offset_4'), (259, 4, '2009-2013', NULL, 'offset_4'), (260, 8, NULL, '1946-1956', 'base_8'), (261, 8, '1946-1956', '1952-1955', 'base_8'), (262, 8, '1952-1955', '1955-1989', 'base_8'), (263, 8, '1955-1989', '1958-????', 'base_8'), (264, 8, '1958-????', '1962-1989', 'base_8'), (265, 8, '1962-1989', '1965-2012', 'base_8'), (266, 8, '1965-2012', '1969-1981', 'base_8'), (267, 8, '1969-1981', '1972-1992', 'base_8'), (268, 8, '1972-1992', '1976-1981', 'base_8'), (269, 8, '1976-1981', '1980-1989', 'base_8'), (270, 8, '1980-1989', '1983-2005', 'base_8'), (271, 8, '1983-2005', '1987-1999', 'base_8'), (272, 8, '1987-1999', '1991-2001', 'base_8'), (273, 8, '1991-2001', '1996-1998', 'base_8'), (274, 8, '1996-1998', '2001-2013', 'base_8'), (275, 8, '2001-2013', '2011-????', 'base_8'), (276, 8, '2011-????', NULL, 'base_8'), (277, 8, NULL, '1935-1950', 'offset_8'), (278, 8, '1935-1950', '1950-1957', 'offset_8'), (279, 8, '1950-1957', '1954-1970', 'offset_8'), (280, 8, '1954-1970', '1957-1996', 'offset_8'), (281, 8, '1957-1996', '1961-1971', 'offset_8'), (282, 8, '1961-1971', '1964-1991', 'offset_8'), (283, 8, '1964-1991', '1968-1975', 'offset_8'), (284, 8, '1968-1975', '1971-1987', 'offset_8'), (285, 8, '1971-1987', '1974-1993', 'offset_8'), (286, 8, '1974-1993', '1978-1997', 'offset_8'), (287, 8, '1978-1997', '1982-1995', 'offset_8'), (288, 8, '1982-1995', '1986-1990', 'offset_8'), (289, 8, '1986-1990', '1989-????', 'offset_8'), (290, 8, '1989-????', '1994-1997', 'offset_8'), (291, 8, '1994-1997', '1999-2008', 'offset_8'), (292, 8, '1999-2008', '2006-2012', 'offset_8'), (293, 8, '2006-2012', NULL, 'offset_8'), (294, 16, NULL, '1952-1955', 'base_16'), (295, 16, '1952-1955', '1958-????', 'base_16'), (296, 16, '1958-????', '1965-2012', 'base_16'), (297, 16, '1965-2012', '1972-1992', 'base_16'), (298, 16, '1972-1992', '1980-1989', 'base_16'), (299, 16, '1980-1989', '1987-1999', 'base_16'), (300, 16, '1987-1999', '1996-1998', 'base_16'), (301, 16, '1996-1998', '2011-????', 'base_16'), (302, 16, '2011-????', NULL, 'base_16'), (303, 16, NULL, '1947-1957', 'offset_16'), (304, 16, '1947-1957', '1956-1960', 'offset_16'), (305, 16, '1956-1960', '1963-1967', 'offset_16'), (306, 16, '1963-1967', '1969-1996', 'offset_16'), (307, 16, '1969-1996', '1976-1999', 'offset_16'), (308, 16, '1976-1999', '1984-1992', 'offset_16'), (309, 16, '1984-1992', '1991-????', 'offset_16'), (310, 16, '1991-????', '2002-2010', 'offset_16'), (311, 16, '2002-2010', NULL, 'offset_16'), (312, 32, NULL, '1958-????', 'base_32'), (313, 32, '1958-????', '1972-1992', 'base_32'), (314, 32, '1972-1992', '1987-1999', 'base_32'), (315, 32, '1987-1999', '2011-????', 'base_32'), (316, 32, '2011-????', NULL, 'base_32'), (317, 32, NULL, '1952-1968', 'offset_32'), (318, 32, '1952-1968', '1966-1977', 'offset_32'), (319, 32, '1966-1977', '1980-2003', 'offset_32'), (320, 32, '1980-2003', '1996-2010', 'offset_32'), (321, 32, '1996-2010', NULL, 'offset_32'), (322, 64, NULL, '1972-1992', 'base_64'), (323, 64, '1972-1992', '2011-????', 'base_64'), (324, 64, '2011-????', NULL, 'base_64'), (325, 64, NULL, '1959-1969', 'offset_64'), (326, 64, '1959-1969', '1988-1988', 'offset_64'), (327, 64, '1988-1988', NULL, 'offset_64'), (328, 128, NULL, '2011-????', 'base_128'), (329, 128, '2011-????', NULL, 'base_128'), (330, 128, NULL, '1972-2008', 'offset_128'), (331, 128, '1972-2008', NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS TITLE_PHONETIC_CODE_histogram;
CREATE TABLE TITLE_PHONETIC_CODE_histogram (
    bucket_id   INT NOT NULL,
    layer       INT NOT NULL,
    lower_bound TEXT,
    upper_bound TEXT,
    bucket_type TEXT
);


INSERT INTO TITLE_PHONETIC_CODE_histogram (bucket_id, layer, lower_bound, upper_bound, bucket_type)
VALUES (0, 1, NULL, 'A2153', 'base_1'), (1, 1, 'A2153', 'A3243', 'base_1'), (2, 1, 'A3243', 'A4323', 'base_1'), (3, 1, 'A4323', 'A5413', 'base_1'), (4, 1, 'A5413', 'A6462', 'base_1'), (5, 1, 'A6462', 'B164', 'base_1'), (6, 1, 'B164', 'B3136', 'base_1'), (7, 1, 'B3136', 'B4215', 'base_1'), (8, 1, 'B4215', 'B5265', 'base_1'), (9, 1, 'B5265', 'B6362', 'base_1'), (10, 1, 'B6362', 'C1541', 'base_1'), (11, 1, 'C1541', 'C263', 'base_1'), (12, 1, 'C263', 'C4125', 'base_1'), (13, 1, 'C4125', 'C5165', 'base_1'), (14, 1, 'C5165', 'C6256', 'base_1'), (15, 1, 'C6256', 'D1434', 'base_1'), (16, 1, 'D1434', 'D2525', 'base_1'), (17, 1, 'D2525', 'D3614', 'base_1'), (18, 1, 'D3614', 'D4656', 'base_1'), (19, 1, 'D4656', 'D6154', 'base_1'), (20, 1, 'D6154', 'E1342', 'base_1'), (21, 1, 'E1342', 'E2424', 'base_1'), (22, 1, 'E2424', 'E3515', 'base_1'), (23, 1, 'E3515', 'E4565', 'base_1'), (24, 1, 'E4565', 'E6121', 'base_1'), (25, 1, 'E6121', 'F13', 'base_1'), (26, 1, 'F13', 'F2412', 'base_1'), (27, 1, 'F2412', 'F3463', 'base_1'), (28, 1, 'F3463', 'F4543', 'base_1'), (29, 1, 'F4543', 'F5635', 'base_1'), (30, 1, 'F5635', 'G1232', 'base_1'), (31, 1, 'G1232', 'G2312', 'base_1'), (32, 1, 'G2312', 'G3262', 'base_1'), (33, 1, 'G3262', 'G4356', 'base_1'), (34, 1, 'G4356', 'G5436', 'base_1'), (35, 1, 'G5436', 'G6526', 'base_1'), (36, 1, 'G6526', 'H2124', 'base_1'), (37, 1, 'H2124', 'H3163', 'base_1'), (38, 1, 'H3163', 'H4252', 'base_1'), (39, 1, 'H4252', 'H5343', 'base_1'), (40, 1, 'H5343', 'H6424', 'base_1'), (41, 1, 'H6424', 'I1621', 'base_1'), (42, 1, 'I1621', 'I312', 'base_1'), (43, 1, 'I312', 'I4164', 'base_1'), (44, 1, 'I4164', 'I5324', 'base_1'), (45, 1, 'I5324', 'I6432', 'base_1'), (46, 1, 'I6432', 'J164', 'base_1'), (47, 1, 'J164', 'J3136', 'base_1'), (48, 1, 'J3136', 'J4242', 'base_1'), (49, 1, 'J4242', 'J5345', 'base_1'), (50, 1, 'J5345', 'J643', 'base_1'), (51, 1, 'J643', 'K1631', 'base_1'), (52, 1, 'K1631', 'K313', 'base_1'), (53, 1, 'K313', 'K421', 'base_1'), (54, 1, 'K421', 'K526', 'base_1'), (55, 1, 'K526', 'K635', 'base_1'), (56, 1, 'K635', 'L153', 'base_1'), (57, 1, 'L153', 'L2616', 'base_1'), (58, 1, 'L2616', 'L3656', 'base_1'), (59, 1, 'L3656', 'L5165', 'base_1'), (60, 1, 'L5165', 'L6254', 'base_1'), (61, 1, 'L6254', 'M1434', 'base_1'), (62, 1, 'M1434', 'M2524', 'base_1'), (63, 1, 'M2524', 'M3613', 'base_1'), (64, 1, 'M3613', 'M4653', 'base_1'), (65, 1, 'M4653', 'M6151', 'base_1'), (66, 1, 'M6151', 'N134', 'base_1'), (67, 1, 'N134', 'N2416', 'base_1'), (68, 1, 'N2416', 'N3465', 'base_1'), (69, 1, 'N3465', 'N4546', 'base_1'), (70, 1, 'N4546', 'N6', 'base_1'), (71, 1, 'N6', 'O126', 'base_1'), (72, 1, 'O126', 'O2353', 'base_1'), (73, 1, 'O2353', 'O3435', 'base_1'), (74, 1, 'O3435', 'O4524', 'base_1'), (75, 1, 'O4524', 'O5632', 'base_1'), (76, 1, 'O5632', 'P1235', 'base_1'), (77, 1, 'P1235', 'P2314', 'base_1'), (78, 1, 'P2314', 'P3263', 'base_1'), (79, 1, 'P3263', 'P4356', 'base_1'), (80, 1, 'P4356', 'P5436', 'base_1'), (81, 1, 'P5436', 'P6534', 'base_1'), (82, 1, 'P6534', 'Q2343', 'base_1'), (83, 1, 'Q2343', 'Q35', 'base_1'), (84, 1, 'Q35', 'Q5', 'base_1'), (85, 1, 'Q5', 'Q6231', 'base_1'), (86, 1, 'Q6231', 'R1461', 'base_1'), (87, 1, 'R1461', 'R254', 'base_1'), (88, 1, 'R254', 'R3626', 'base_1'), (89, 1, 'R3626', 'R5126', 'base_1'), (90, 1, 'R5126', 'R6215', 'base_1'), (91, 1, 'R6215', 'S1434', 'base_1'), (92, 1, 'S1434', 'S2524', 'base_1'), (93, 1, 'S2524', 'S3613', 'base_1'), (94, 1, 'S3613', 'S4654', 'base_1'), (95, 1, 'S4654', 'S6153', 'base_1'), (96, 1, 'S6153', 'T1341', 'base_1'), (97, 1, 'T1341', 'T2421', 'base_1'), (98, 1, 'T2421', 'T351', 'base_1'), (99, 1, 'T351', 'T4562', 'base_1'), (100, 1, 'T4562', 'T5643', 'base_1'), (101, 1, 'T5643', 'U124', 'base_1'), (102, 1, 'U124', 'U2342', 'base_1'), (103, 1, 'U2342', 'U3435', 'base_1'), (104, 1, 'U3435', 'U5', 'base_1'), (105, 1, 'U5', 'U6164', 'base_1'), (106, 1, 'U6164', 'V1423', 'base_1'), (107, 1, 'V1423', 'V2521', 'base_1'), (108, 1, 'V2521', 'V3613', 'base_1'), (109, 1, 'V3613', 'V4654', 'base_1'), (110, 1, 'V4654', 'V616', 'base_1'), (111, 1, 'V616', 'W1345', 'base_1'), (112, 1, 'W1345', 'W2434', 'base_1'), (113, 1, 'W2434', 'W3524', 'base_1'), (114, 1, 'W3524', 'W4613', 'base_1'), (115, 1, 'W4613', 'W6121', 'base_1'), (116, 1, 'W6121', 'X1325', 'base_1'), (117, 1, 'X1325', 'X3163', 'base_1'), (118, 1, 'X3163', 'X5354', 'base_1'), (119, 1, 'X5354', 'Y1535', 'base_1'), (120, 1, 'Y1535', 'Y2636', 'base_1'), (121, 1, 'Y2636', 'Y42', 'base_1'), (122, 1, 'Y42', 'Y5325', 'base_1'), (123, 1, 'Y5325', 'Y645', 'base_1'), (124, 1, 'Y645', 'Z1646', 'base_1'), (125, 1, 'Z1646', 'Z316', 'base_1'), (126, 1, 'Z316', 'Z4314', 'base_1'), (127, 1, 'Z4314', 'Z5436', 'base_1'), (128, 1, 'Z5436', NULL, 'base_1'), (129, 2, NULL, 'A3243', 'base_2'), (130, 2, 'A3243', 'A5413', 'base_2'), (131, 2, 'A5413', 'B164', 'base_2'), (132, 2, 'B164', 'B4215', 'base_2'), (133, 2, 'B4215', 'B6362', 'base_2'), (134, 2, 'B6362', 'C263', 'base_2'), (135, 2, 'C263', 'C5165', 'base_2'), (136, 2, 'C5165', 'D1434', 'base_2'), (137, 2, 'D1434', 'D3614', 'base_2'), (138, 2, 'D3614', 'D6154', 'base_2'), (139, 2, 'D6154', 'E2424', 'base_2'), (140, 2, 'E2424', 'E4565', 'base_2'), (141, 2, 'E4565', 'F13', 'base_2'), (142, 2, 'F13', 'F3463', 'base_2'), (143, 2, 'F3463', 'F5635', 'base_2'), (144, 2, 'F5635', 'G2312', 'base_2'), (145, 2, 'G2312', 'G4356', 'base_2'), (146, 2, 'G4356', 'G6526', 'base_2'), (147, 2, 'G6526', 'H3163', 'base_2'), (148, 2, 'H3163', 'H5343', 'base_2'), (149, 2, 'H5343', 'I1621', 'base_2'), (150, 2, 'I1621', 'I4164', 'base_2'), (151, 2, 'I4164', 'I6432', 'base_2'), (152, 2, 'I6432', 'J3136', 'base_2'), (153, 2, 'J3136', 'J5345', 'base_2'), (154, 2, 'J5345', 'K1631', 'base_2'), (155, 2, 'K1631', 'K421', 'base_2'), (156, 2, 'K421', 'K635', 'base_2'), (157, 2, 'K635', 'L2616', 'base_2'), (158, 2, 'L2616', 'L5165', 'base_2'), (159, 2, 'L5165', 'M1434', 'base_2'), (160, 2, 'M1434', 'M3613', 'base_2'), (161, 2, 'M3613', 'M6151', 'base_2'), (162, 2, 'M6151', 'N2416', 'base_2'), (163, 2, 'N2416', 'N4546', 'base_2'), (164, 2, 'N4546', 'O126', 'base_2'), (165, 2, 'O126', 'O3435', 'base_2'), (166, 2, 'O3435', 'O5632', 'base_2'), (167, 2, 'O5632', 'P2314', 'base_2'), (168, 2, 'P2314', 'P4356', 'base_2'), (169, 2, 'P4356', 'P6534', 'base_2'), (170, 2, 'P6534', 'Q35', 'base_2'), (171, 2, 'Q35', 'Q6231', 'base_2'), (172, 2, 'Q6231', 'R254', 'base_2'), (173, 2, 'R254', 'R5126', 'base_2'), (174, 2, 'R5126', 'S1434', 'base_2'), (175, 2, 'S1434', 'S3613', 'base_2'), (176, 2, 'S3613', 'S6153', 'base_2'), (177, 2, 'S6153', 'T2421', 'base_2'), (178, 2, 'T2421', 'T4562', 'base_2'), (179, 2, 'T4562', 'U124', 'base_2'), (180, 2, 'U124', 'U3435', 'base_2'), (181, 2, 'U3435', 'U6164', 'base_2'), (182, 2, 'U6164', 'V2521', 'base_2'), (183, 2, 'V2521', 'V4654', 'base_2'), (184, 2, 'V4654', 'W1345', 'base_2'), (185, 2, 'W1345', 'W3524', 'base_2'), (186, 2, 'W3524', 'W6121', 'base_2'), (187, 2, 'W6121', 'X3163', 'base_2'), (188, 2, 'X3163', 'Y1535', 'base_2'), (189, 2, 'Y1535', 'Y42', 'base_2'), (190, 2, 'Y42', 'Y645', 'base_2'), (191, 2, 'Y645', 'Z316', 'base_2'), (192, 2, 'Z316', 'Z5436', 'base_2'), (193, 2, 'Z5436', NULL, 'base_2'), (194, 4, NULL, 'A5413', 'base_4'), (195, 4, 'A5413', 'B4215', 'base_4'), (196, 4, 'B4215', 'C263', 'base_4'), (197, 4, 'C263', 'D1434', 'base_4'), (198, 4, 'D1434', 'D6154', 'base_4'), (199, 4, 'D6154', 'E4565', 'base_4'), (200, 4, 'E4565', 'F3463', 'base_4'), (201, 4, 'F3463', 'G2312', 'base_4'), (202, 4, 'G2312', 'G6526', 'base_4'), (203, 4, 'G6526', 'H5343', 'base_4'), (204, 4, 'H5343', 'I4164', 'base_4'), (205, 4, 'I4164', 'J3136', 'base_4'), (206, 4, 'J3136', 'K1631', 'base_4'), (207, 4, 'K1631', 'K635', 'base_4'), (208, 4, 'K635', 'L5165', 'base_4'), (209, 4, 'L5165', 'M3613', 'base_4'), (210, 4, 'M3613', 'N2416', 'base_4'), (211, 4, 'N2416', 'O126', 'base_4'), (212, 4, 'O126', 'O5632', 'base_4'), (213, 4, 'O5632', 'P4356', 'base_4'), (214, 4, 'P4356', 'Q35', 'base_4'), (215, 4, 'Q35', 'R254', 'base_4'), (216, 4, 'R254', 'S1434', 'base_4'), (217, 4, 'S1434', 'S6153', 'base_4'), (218, 4, 'S6153', 'T4562', 'base_4'), (219, 4, 'T4562', 'U3435', 'base_4'), (220, 4, 'U3435', 'V2521', 'base_4'), (221, 4, 'V2521', 'W1345', 'base_4'), (222, 4, 'W1345', 'W6121', 'base_4'), (223, 4, 'W6121', 'Y1535', 'base_4'), (224, 4, 'Y1535', 'Y645', 'base_4'), (225, 4, 'Y645', 'Z5436', 'base_4'), (226, 4, 'Z5436', NULL, 'base_4'), (227, 4, NULL, 'A4323', 'offset_4'), (228, 4, 'A4323', 'B3136', 'offset_4'), (229, 4, 'B3136', 'C1541', 'offset_4'), (230, 4, 'C1541', 'C6256', 'offset_4'), (231, 4, 'C6256', 'D4656', 'offset_4'), (232, 4, 'D4656', 'E3515', 'offset_4'), (233, 4, 'E3515', 'F2412', 'offset_4'), (234, 4, 'F2412', 'G1232', 'offset_4'), (235, 4, 'G1232', 'G5436', 'offset_4'), (236, 4, 'G5436', 'H4252', 'offset_4'), (237, 4, 'H4252', 'I312', 'offset_4'), (238, 4, 'I312', 'J164', 'offset_4'), (239, 4, 'J164', 'J643', 'offset_4'), (240, 4, 'J643', 'K526', 'offset_4'), (241, 4, 'K526', 'L3656', 'offset_4'), (242, 4, 'L3656', 'M2524', 'offset_4'), (243, 4, 'M2524', 'N134', 'offset_4'), (244, 4, 'N134', 'N6', 'offset_4'), (245, 4, 'N6', 'O4524', 'offset_4'), (246, 4, 'O4524', 'P3263', 'offset_4'), (247, 4, 'P3263', 'Q2343', 'offset_4'), (248, 4, 'Q2343', 'R1461', 'offset_4'), (249, 4, 'R1461', 'R6215', 'offset_4'), (250, 4, 'R6215', 'S4654', 'offset_4'), (251, 4, 'S4654', 'T351', 'offset_4'), (252, 4, 'T351', 'U2342', 'offset_4'), (253, 4, 'U2342', 'V1423', 'offset_4'), (254, 4, 'V1423', 'V616', 'offset_4'), (255, 4, 'V616', 'W4613', 'offset_4'), (256, 4, 'W4613', 'X5354', 'offset_4'), (257, 4, 'X5354', 'Y5325', 'offset_4'), (258, 4, 'Y5325', 'Z4314', 'offset_4'), (259, 4, 'Z4314', NULL, 'offset_4'), (260, 8, NULL, 'B4215', 'base_8'), (261, 8, 'B4215', 'D1434', 'base_8'), (262, 8, 'D1434', 'E4565', 'base_8'), (263, 8, 'E4565', 'G2312', 'base_8'), (264, 8, 'G2312', 'H5343', 'base_8'), (265, 8, 'H5343', 'J3136', 'base_8'), (266, 8, 'J3136', 'K635', 'base_8'), (267, 8, 'K635', 'M3613', 'base_8'), (268, 8, 'M3613', 'O126', 'base_8'), (269, 8, 'O126', 'P4356', 'base_8'), (270, 8, 'P4356', 'R254', 'base_8'), (271, 8, 'R254', 'S6153', 'base_8'), (272, 8, 'S6153', 'U3435', 'base_8'), (273, 8, 'U3435', 'W1345', 'base_8'), (274, 8, 'W1345', 'Y1535', 'base_8'), (275, 8, 'Y1535', 'Z5436', 'base_8'), (276, 8, 'Z5436', NULL, 'base_8'), (277, 8, NULL, 'A6462', 'offset_8'), (278, 8, 'A6462', 'C4125', 'offset_8'), (279, 8, 'C4125', 'E1342', 'offset_8'), (280, 8, 'E1342', 'F4543', 'offset_8'), (281, 8, 'F4543', 'H2124', 'offset_8'), (282, 8, 'H2124', 'I5324', 'offset_8'), (283, 8, 'I5324', 'K313', 'offset_8'), (284, 8, 'K313', 'L6254', 'offset_8'), (285, 8, 'L6254', 'N3465', 'offset_8'), (286, 8, 'N3465', 'P1235', 'offset_8'), (287, 8, 'P1235', 'Q5', 'offset_8'), (288, 8, 'Q5', 'S2524', 'offset_8'), (289, 8, 'S2524', 'T5643', 'offset_8'), (290, 8, 'T5643', 'V3613', 'offset_8'), (291, 8, 'V3613', 'X1325', 'offset_8'), (292, 8, 'X1325', 'Z1646', 'offset_8'), (293, 8, 'Z1646', NULL, 'offset_8'), (294, 16, NULL, 'D1434', 'base_16'), (295, 16, 'D1434', 'G2312', 'base_16'), (296, 16, 'G2312', 'J3136', 'base_16'), (297, 16, 'J3136', 'M3613', 'base_16'), (298, 16, 'M3613', 'P4356', 'base_16'), (299, 16, 'P4356', 'S6153', 'base_16'), (300, 16, 'S6153', 'W1345', 'base_16'), (301, 16, 'W1345', 'Z5436', 'base_16'), (302, 16, 'Z5436', NULL, 'base_16'), (303, 16, NULL, 'B5265', 'offset_16'), (304, 16, 'B5265', 'E6121', 'offset_16'), (305, 16, 'E6121', 'H6424', 'offset_16'), (306, 16, 'H6424', 'L153', 'offset_16'), (307, 16, 'L153', 'O2353', 'offset_16'), (308, 16, 'O2353', 'R3626', 'offset_16'), (309, 16, 'R3626', 'U5', 'offset_16'), (310, 16, 'U5', 'Y2636', 'offset_16'), (311, 16, 'Y2636', NULL, 'offset_16'), (312, 32, NULL, 'G2312', 'base_32'), (313, 32, 'G2312', 'M3613', 'base_32'), (314, 32, 'M3613', 'S6153', 'base_32'), (315, 32, 'S6153', 'Z5436', 'base_32'), (316, 32, 'Z5436', NULL, 'base_32'), (317, 32, NULL, 'D2525', 'offset_32'), (318, 32, 'D2525', 'J4242', 'offset_32'), (319, 32, 'J4242', 'P5436', 'offset_32'), (320, 32, 'P5436', 'W2434', 'offset_32'), (321, 32, 'W2434', NULL, 'offset_32'), (322, 64, NULL, 'M3613', 'base_64'), (323, 64, 'M3613', 'Z5436', 'base_64'), (324, 64, 'Z5436', NULL, 'base_64'), (325, 64, NULL, 'G3262', 'offset_64'), (326, 64, 'G3262', 'T1341', 'offset_64'), (327, 64, 'T1341', NULL, 'offset_64'), (328, 128, NULL, 'Z5436', 'base_128'), (329, 128, 'Z5436', NULL, 'base_128'), (330, 128, NULL, 'M4653', 'offset_128'), (331, 128, 'M4653', NULL, 'offset_128'), (332, 256, NULL, NULL, 'N/A')
;
    

DROP TABLE IF EXISTS MOVIE_INFO_INFO_TYPE_ID_mcv;

-- Create MCV table for MOVIE_INFO.INFO_TYPE_ID, with a unique mcv_id
CREATE TABLE MOVIE_INFO_INFO_TYPE_ID_mcv AS
WITH base AS (
    SELECT INFO_TYPE_ID, COUNT(*) AS freq
    FROM MOVIE_INFO
    WHERE INFO_TYPE_ID IS NOT NULL
    GROUP BY INFO_TYPE_ID
    ORDER BY freq DESC
    LIMIT 5000
)
SELECT
    ROW_NUMBER() OVER (ORDER BY freq DESC) AS mcv_id,
    INFO_TYPE_ID,
    freq
FROM base;

----------------------------------
-- END: generate all mcvs and histograms
----------------------------------


----------------------------------
-- START: generate all lpnorm queries for CAST_INFO
----------------------------------


DROP TABLE IF EXISTS CAST_INFO_MOVIE_ID_ID_TITLE;

-- Create temp table CAST_INFO_MOVIE_ID_ID_TITLE (FK->PK join)
CREATE TEMP TABLE CAST_INFO_MOVIE_ID_ID_TITLE AS
SELECT
    CAST_INFO.MOVIE_ID AS MOVIE_ID,
    TITLE.PHONETIC_CODE AS TITLE_PHONETIC_CODE, TITLE.SERIES_YEARS AS TITLE_SERIES_YEARS, TITLE.KIND_ID AS TITLE_KIND_ID, TITLE.EPISODE_NR AS TITLE_EPISODE_NR, TITLE.SEASON_NR AS TITLE_SEASON_NR, TITLE.IMDB_INDEX AS TITLE_IMDB_INDEX, TITLE.PRODUCTION_YEAR AS TITLE_PRODUCTION_YEAR
FROM CAST_INFO
JOIN TITLE
  ON CAST_INFO.MOVIE_ID = TITLE.ID
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID AS
SELECT
    CAST_INFO.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO

WHERE CAST_INFO.MOVIE_ID IS NOT NULL
GROUP BY
    CAST_INFO.MOVIE_ID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    65536 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 65536
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    131072 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 131072
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    262144 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 262144
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    524288 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 524288
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1048576 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 1048576
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2097152 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 2097152
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2331601 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_CAST_INFO_MOVIE_ID
  LIMIT 2331601
);

DROP TABLE IF EXISTS Degree_CAST_INFO_NR_ORDER_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_NR_ORDER_MOVIE_ID for MCV CAST_INFO.NR_ORDER -- MCV
CREATE TEMP TABLE Degree_CAST_INFO_NR_ORDER_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    CAST_INFO.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO
JOIN CAST_INFO_NR_ORDER_mcv mcvt ON CAST_INFO.NR_ORDER = mcvt.NR_ORDER
WHERE CAST_INFO.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, CAST_INFO.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'NR_ORDER' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_CAST_INFO_NR_ORDER_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_NR_ORDER_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_NR_ORDER_MOVIE_ID for NONMCV CAST_INFO.NR_ORDER -- MCV
CREATE TEMP TABLE Degree_CAST_INFO_NR_ORDER_MOVIE_ID AS
SELECT
    CAST_INFO.NR_ORDER AS NR_ORDER,
    CAST_INFO.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO
LEFT JOIN CAST_INFO_NR_ORDER_mcv mcvt ON CAST_INFO.NR_ORDER = mcvt.NR_ORDER
WHERE CAST_INFO.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    CAST_INFO.NR_ORDER, CAST_INFO.MOVIE_ID
;

-- Insert into norms for Non-MCV CAST_INFO NR_ORDER MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_CAST_INFO_NR_ORDER_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    NR_ORDER,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_CAST_INFO_NR_ORDER_MOVIE_ID
  GROUP BY NR_ORDER
  HAVING NR_ORDER IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'NR_ORDER' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_CAST_INFO_ROLE_ID_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_ROLE_ID_MOVIE_ID for MCV CAST_INFO.ROLE_ID -- MCV
CREATE TEMP TABLE Degree_CAST_INFO_ROLE_ID_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    CAST_INFO.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO
JOIN CAST_INFO_ROLE_ID_mcv mcvt ON CAST_INFO.ROLE_ID = mcvt.ROLE_ID
WHERE CAST_INFO.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, CAST_INFO.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'ROLE_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_CAST_INFO_ROLE_ID_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_ROLE_ID_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_ROLE_ID_MOVIE_ID for NONMCV CAST_INFO.ROLE_ID -- MCV
CREATE TEMP TABLE Degree_CAST_INFO_ROLE_ID_MOVIE_ID AS
SELECT
    CAST_INFO.ROLE_ID AS ROLE_ID,
    CAST_INFO.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO
LEFT JOIN CAST_INFO_ROLE_ID_mcv mcvt ON CAST_INFO.ROLE_ID = mcvt.ROLE_ID
WHERE CAST_INFO.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    CAST_INFO.ROLE_ID, CAST_INFO.MOVIE_ID
;

-- Insert into norms for Non-MCV CAST_INFO ROLE_ID MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_CAST_INFO_ROLE_ID_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    ROLE_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_CAST_INFO_ROLE_ID_MOVIE_ID
  GROUP BY ROLE_ID
  HAVING ROLE_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'ROLE_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_CAST_INFO_NR_ORDER_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_NR_ORDER_MOVIE_ID for Histogram CAST_INFO.NR_ORDER -- RANGE
CREATE TEMP TABLE Degree_CAST_INFO_NR_ORDER_MOVIE_ID AS
SELECT
    CAST_INFO.NR_ORDER AS NR_ORDER,
    CAST_INFO.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO

WHERE CAST_INFO.MOVIE_ID IS NOT NULL
GROUP BY
    CAST_INFO.NR_ORDER, CAST_INFO.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'NR_ORDER' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_CAST_INFO_NR_ORDER_MOVIE_ID d
        JOIN CAST_INFO_NR_ORDER_histogram h
        ON (h.lower_bound IS NULL OR d.NR_ORDER >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.NR_ORDER <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for MCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_SEASON_NR_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR = mcvt.SEASON_NR
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for NONMCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR AS SEASON_NR,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_SEASON_NR_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR = mcvt.SEASON_NR
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV CAST_INFO_MOVIE_ID_ID_TITLE SEASON_NR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SEASON_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID
  GROUP BY SEASON_NR
  HAVING SEASON_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for MCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for NONMCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR AS PRODUCTION_YEAR,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV CAST_INFO_MOVIE_ID_ID_TITLE PRODUCTION_YEAR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PRODUCTION_YEAR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID
  GROUP BY PRODUCTION_YEAR
  HAVING PRODUCTION_YEAR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for MCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_EPISODE_NR_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR = mcvt.EPISODE_NR
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for NONMCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR AS EPISODE_NR,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_EPISODE_NR_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR = mcvt.EPISODE_NR
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV CAST_INFO_MOVIE_ID_ID_TITLE EPISODE_NR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    EPISODE_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID
  GROUP BY EPISODE_NR
  HAVING EPISODE_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for MCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_IMDB_INDEX_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX = mcvt.IMDB_INDEX
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for NONMCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX AS IMDB_INDEX,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_IMDB_INDEX_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX = mcvt.IMDB_INDEX
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV CAST_INFO_MOVIE_ID_ID_TITLE IMDB_INDEX MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    IMDB_INDEX,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID
  GROUP BY IMDB_INDEX
  HAVING IMDB_INDEX IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID for MCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_KIND_ID_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID = mcvt.KIND_ID
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID for NONMCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID AS KIND_ID,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_KIND_ID_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID = mcvt.KIND_ID
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV CAST_INFO_MOVIE_ID_ID_TITLE KIND_ID MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_CAST_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    KIND_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID
  GROUP BY KIND_ID
  HAVING KIND_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for MCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_SERIES_YEARS_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS = mcvt.SERIES_YEARS
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for NONMCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS AS SERIES_YEARS,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_SERIES_YEARS_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS = mcvt.SERIES_YEARS
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV CAST_INFO_MOVIE_ID_ID_TITLE SERIES_YEARS MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SERIES_YEARS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID
  GROUP BY SERIES_YEARS
  HAVING SERIES_YEARS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for MCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_PHONETIC_CODE_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for NONMCV CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_MCV
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE AS PHONETIC_CODE,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_PHONETIC_CODE_mcv mcvt ON CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV CAST_INFO_MOVIE_ID_ID_TITLE PHONETIC_CODE MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PHONETIC_CODE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID
  GROUP BY PHONETIC_CODE
  HAVING PHONETIC_CODE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for Histogram CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_RANGE
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR AS SEASON_NR,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE

WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID d
        JOIN TITLE_SEASON_NR_histogram h
        ON (h.lower_bound IS NULL OR d.SEASON_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SEASON_NR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for Histogram CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_RANGE
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR AS PRODUCTION_YEAR,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE

WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID d
        JOIN TITLE_PRODUCTION_YEAR_histogram h
        ON (h.lower_bound IS NULL OR d.PRODUCTION_YEAR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PRODUCTION_YEAR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for Histogram CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_RANGE
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR AS EPISODE_NR,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE

WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID d
        JOIN TITLE_EPISODE_NR_histogram h
        ON (h.lower_bound IS NULL OR d.EPISODE_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.EPISODE_NR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for Histogram CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_RANGE
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX AS IMDB_INDEX,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE

WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID d
        JOIN TITLE_IMDB_INDEX_histogram h
        ON (h.lower_bound IS NULL OR d.IMDB_INDEX >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.IMDB_INDEX <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for Histogram CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_RANGE
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS AS SERIES_YEARS,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE

WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID d
        JOIN TITLE_SERIES_YEARS_histogram h
        ON (h.lower_bound IS NULL OR d.SERIES_YEARS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SERIES_YEARS <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for Histogram CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_RANGE
CREATE TEMP TABLE Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE AS PHONETIC_CODE,
    CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM CAST_INFO_MOVIE_ID_ID_TITLE

WHERE CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    CAST_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE, CAST_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'CAST_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_CAST_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID d
        JOIN TITLE_PHONETIC_CODE_histogram h
        ON (h.lower_bound IS NULL OR d.PHONETIC_CODE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PHONETIC_CODE <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for MOVIE_COMPANIES
----------------------------------


DROP TABLE IF EXISTS MOVIE_COMPANIES_MOVIE_ID_ID_TITLE;

-- Create temp table MOVIE_COMPANIES_MOVIE_ID_ID_TITLE (FK->PK join)
CREATE TEMP TABLE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE AS
SELECT
    MOVIE_COMPANIES.MOVIE_ID AS MOVIE_ID,
    TITLE.PHONETIC_CODE AS TITLE_PHONETIC_CODE, TITLE.SERIES_YEARS AS TITLE_SERIES_YEARS, TITLE.KIND_ID AS TITLE_KIND_ID, TITLE.EPISODE_NR AS TITLE_EPISODE_NR, TITLE.SEASON_NR AS TITLE_SEASON_NR, TITLE.IMDB_INDEX AS TITLE_IMDB_INDEX, TITLE.PRODUCTION_YEAR AS TITLE_PRODUCTION_YEAR
FROM MOVIE_COMPANIES
JOIN TITLE
  ON MOVIE_COMPANIES.MOVIE_ID = TITLE.ID
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES

WHERE MOVIE_COMPANIES.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_COMPANIES.MOVIE_ID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    65536 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 65536
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    131072 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 131072
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    262144 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 262144
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    524288 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 524288
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1048576 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 1048576
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1087236 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_COMPANIES_MOVIE_ID
  LIMIT 1087236
);

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_COMPANY_TYPE_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_COMPANY_TYPE_ID_MOVIE_ID for MCV MOVIE_COMPANIES.COMPANY_TYPE_ID -- MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_COMPANY_TYPE_ID_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_COMPANIES.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES
JOIN MOVIE_COMPANIES_COMPANY_TYPE_ID_mcv mcvt ON MOVIE_COMPANIES.COMPANY_TYPE_ID = mcvt.COMPANY_TYPE_ID
WHERE MOVIE_COMPANIES.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_COMPANIES.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'COMPANY_TYPE_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_COMPANIES_COMPANY_TYPE_ID_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_COMPANY_TYPE_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_COMPANY_TYPE_ID_MOVIE_ID for NONMCV MOVIE_COMPANIES.COMPANY_TYPE_ID -- MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_COMPANY_TYPE_ID_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES.COMPANY_TYPE_ID AS COMPANY_TYPE_ID,
    MOVIE_COMPANIES.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES
LEFT JOIN MOVIE_COMPANIES_COMPANY_TYPE_ID_mcv mcvt ON MOVIE_COMPANIES.COMPANY_TYPE_ID = mcvt.COMPANY_TYPE_ID
WHERE MOVIE_COMPANIES.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_COMPANIES.COMPANY_TYPE_ID, MOVIE_COMPANIES.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_COMPANIES COMPANY_TYPE_ID MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_COMPANIES_COMPANY_TYPE_ID_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    COMPANY_TYPE_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_COMPANIES_COMPANY_TYPE_ID_MOVIE_ID
  GROUP BY COMPANY_TYPE_ID
  HAVING COMPANY_TYPE_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'COMPANY_TYPE_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
JOIN TITLE_SEASON_NR_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR = mcvt.SEASON_NR
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for NONMCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR AS SEASON_NR,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_SEASON_NR_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR = mcvt.SEASON_NR
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE SEASON_NR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SEASON_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID
  GROUP BY SEASON_NR
  HAVING SEASON_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for NONMCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR AS PRODUCTION_YEAR,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE PRODUCTION_YEAR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PRODUCTION_YEAR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID
  GROUP BY PRODUCTION_YEAR
  HAVING PRODUCTION_YEAR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
JOIN TITLE_EPISODE_NR_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR = mcvt.EPISODE_NR
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for NONMCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR AS EPISODE_NR,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_EPISODE_NR_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR = mcvt.EPISODE_NR
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE EPISODE_NR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    EPISODE_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID
  GROUP BY EPISODE_NR
  HAVING EPISODE_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
JOIN TITLE_IMDB_INDEX_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX = mcvt.IMDB_INDEX
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for NONMCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX AS IMDB_INDEX,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_IMDB_INDEX_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX = mcvt.IMDB_INDEX
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE IMDB_INDEX MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    IMDB_INDEX,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID
  GROUP BY IMDB_INDEX
  HAVING IMDB_INDEX IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID for MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_KIND_ID -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
JOIN TITLE_KIND_ID_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_KIND_ID = mcvt.KIND_ID
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID for NONMCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_KIND_ID -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_KIND_ID AS KIND_ID,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_KIND_ID_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_KIND_ID = mcvt.KIND_ID
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_KIND_ID, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE KIND_ID MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    KIND_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID
  GROUP BY KIND_ID
  HAVING KIND_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
JOIN TITLE_SERIES_YEARS_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS = mcvt.SERIES_YEARS
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for NONMCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS AS SERIES_YEARS,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_SERIES_YEARS_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS = mcvt.SERIES_YEARS
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE SERIES_YEARS MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SERIES_YEARS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID
  GROUP BY SERIES_YEARS
  HAVING SERIES_YEARS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
JOIN TITLE_PHONETIC_CODE_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for NONMCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE AS PHONETIC_CODE,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_PHONETIC_CODE_mcv mcvt ON MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_COMPANIES_MOVIE_ID_ID_TITLE PHONETIC_CODE MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PHONETIC_CODE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID
  GROUP BY PHONETIC_CODE
  HAVING PHONETIC_CODE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for Histogram MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR AS SEASON_NR,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE

WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID d
        JOIN TITLE_SEASON_NR_histogram h
        ON (h.lower_bound IS NULL OR d.SEASON_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SEASON_NR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for Histogram MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR AS PRODUCTION_YEAR,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE

WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID d
        JOIN TITLE_PRODUCTION_YEAR_histogram h
        ON (h.lower_bound IS NULL OR d.PRODUCTION_YEAR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PRODUCTION_YEAR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for Histogram MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR AS EPISODE_NR,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE

WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID d
        JOIN TITLE_EPISODE_NR_histogram h
        ON (h.lower_bound IS NULL OR d.EPISODE_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.EPISODE_NR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for Histogram MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX AS IMDB_INDEX,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE

WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID d
        JOIN TITLE_IMDB_INDEX_histogram h
        ON (h.lower_bound IS NULL OR d.IMDB_INDEX >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.IMDB_INDEX <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for Histogram MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS AS SERIES_YEARS,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE

WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID d
        JOIN TITLE_SERIES_YEARS_histogram h
        ON (h.lower_bound IS NULL OR d.SERIES_YEARS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SERIES_YEARS <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for Histogram MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE AS PHONETIC_CODE,
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_COMPANIES_MOVIE_ID_ID_TITLE

WHERE MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE, MOVIE_COMPANIES_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_COMPANIES' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_COMPANIES_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID d
        JOIN TITLE_PHONETIC_CODE_histogram h
        ON (h.lower_bound IS NULL OR d.PHONETIC_CODE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PHONETIC_CODE <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for MOVIE_INFO_IDX
----------------------------------


DROP TABLE IF EXISTS MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE;

-- Create temp table MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE (FK->PK join)
CREATE TEMP TABLE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE AS
SELECT
    MOVIE_INFO_IDX.MOVIE_ID AS MOVIE_ID,
    TITLE.PHONETIC_CODE AS TITLE_PHONETIC_CODE, TITLE.SERIES_YEARS AS TITLE_SERIES_YEARS, TITLE.KIND_ID AS TITLE_KIND_ID, TITLE.EPISODE_NR AS TITLE_EPISODE_NR, TITLE.SEASON_NR AS TITLE_SEASON_NR, TITLE.IMDB_INDEX AS TITLE_IMDB_INDEX, TITLE.PRODUCTION_YEAR AS TITLE_PRODUCTION_YEAR
FROM MOVIE_INFO_IDX
JOIN TITLE
  ON MOVIE_INFO_IDX.MOVIE_ID = TITLE.ID
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX

WHERE MOVIE_INFO_IDX.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_IDX.MOVIE_ID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    65536 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 65536
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    131072 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 131072
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    262144 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 262144
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    459925 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_IDX_MOVIE_ID
  LIMIT 459925
);

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_INFO_TYPE_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_INFO_TYPE_ID_MOVIE_ID for MCV MOVIE_INFO_IDX.INFO_TYPE_ID -- MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_INFO_TYPE_ID_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_IDX.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX
JOIN MOVIE_INFO_IDX_INFO_TYPE_ID_mcv mcvt ON MOVIE_INFO_IDX.INFO_TYPE_ID = mcvt.INFO_TYPE_ID
WHERE MOVIE_INFO_IDX.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_IDX.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'INFO_TYPE_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_IDX_INFO_TYPE_ID_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_INFO_TYPE_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_INFO_TYPE_ID_MOVIE_ID for NONMCV MOVIE_INFO_IDX.INFO_TYPE_ID -- MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_INFO_TYPE_ID_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX.INFO_TYPE_ID AS INFO_TYPE_ID,
    MOVIE_INFO_IDX.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX
LEFT JOIN MOVIE_INFO_IDX_INFO_TYPE_ID_mcv mcvt ON MOVIE_INFO_IDX.INFO_TYPE_ID = mcvt.INFO_TYPE_ID
WHERE MOVIE_INFO_IDX.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_IDX.INFO_TYPE_ID, MOVIE_INFO_IDX.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_IDX INFO_TYPE_ID MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_IDX_INFO_TYPE_ID_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    INFO_TYPE_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_IDX_INFO_TYPE_ID_MOVIE_ID
  GROUP BY INFO_TYPE_ID
  HAVING INFO_TYPE_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'INFO_TYPE_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
JOIN TITLE_SEASON_NR_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR = mcvt.SEASON_NR
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for NONMCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR AS SEASON_NR,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_SEASON_NR_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR = mcvt.SEASON_NR
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE SEASON_NR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SEASON_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID
  GROUP BY SEASON_NR
  HAVING SEASON_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for NONMCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR AS PRODUCTION_YEAR,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE PRODUCTION_YEAR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PRODUCTION_YEAR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID
  GROUP BY PRODUCTION_YEAR
  HAVING PRODUCTION_YEAR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
JOIN TITLE_EPISODE_NR_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR = mcvt.EPISODE_NR
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for NONMCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR AS EPISODE_NR,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_EPISODE_NR_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR = mcvt.EPISODE_NR
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE EPISODE_NR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    EPISODE_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID
  GROUP BY EPISODE_NR
  HAVING EPISODE_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
JOIN TITLE_IMDB_INDEX_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX = mcvt.IMDB_INDEX
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for NONMCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX AS IMDB_INDEX,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_IMDB_INDEX_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX = mcvt.IMDB_INDEX
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE IMDB_INDEX MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    IMDB_INDEX,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID
  GROUP BY IMDB_INDEX
  HAVING IMDB_INDEX IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID for MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_KIND_ID -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
JOIN TITLE_KIND_ID_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_KIND_ID = mcvt.KIND_ID
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID for NONMCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_KIND_ID -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_KIND_ID AS KIND_ID,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_KIND_ID_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_KIND_ID = mcvt.KIND_ID
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_KIND_ID, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE KIND_ID MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    KIND_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID
  GROUP BY KIND_ID
  HAVING KIND_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
JOIN TITLE_SERIES_YEARS_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS = mcvt.SERIES_YEARS
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for NONMCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS AS SERIES_YEARS,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_SERIES_YEARS_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS = mcvt.SERIES_YEARS
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE SERIES_YEARS MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SERIES_YEARS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID
  GROUP BY SERIES_YEARS
  HAVING SERIES_YEARS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
JOIN TITLE_PHONETIC_CODE_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for NONMCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE AS PHONETIC_CODE,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_PHONETIC_CODE_mcv mcvt ON MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE PHONETIC_CODE MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PHONETIC_CODE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID
  GROUP BY PHONETIC_CODE
  HAVING PHONETIC_CODE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for Histogram MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR AS SEASON_NR,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID d
        JOIN TITLE_SEASON_NR_histogram h
        ON (h.lower_bound IS NULL OR d.SEASON_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SEASON_NR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for Histogram MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR AS PRODUCTION_YEAR,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID d
        JOIN TITLE_PRODUCTION_YEAR_histogram h
        ON (h.lower_bound IS NULL OR d.PRODUCTION_YEAR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PRODUCTION_YEAR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for Histogram MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR AS EPISODE_NR,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID d
        JOIN TITLE_EPISODE_NR_histogram h
        ON (h.lower_bound IS NULL OR d.EPISODE_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.EPISODE_NR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for Histogram MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX AS IMDB_INDEX,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID d
        JOIN TITLE_IMDB_INDEX_histogram h
        ON (h.lower_bound IS NULL OR d.IMDB_INDEX >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.IMDB_INDEX <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for Histogram MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS AS SERIES_YEARS,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID d
        JOIN TITLE_SERIES_YEARS_histogram h
        ON (h.lower_bound IS NULL OR d.SERIES_YEARS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SERIES_YEARS <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for Histogram MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE AS PHONETIC_CODE,
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE, MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO_IDX' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_IDX_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID d
        JOIN TITLE_PHONETIC_CODE_histogram h
        ON (h.lower_bound IS NULL OR d.PHONETIC_CODE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PHONETIC_CODE <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for MOVIE_KEYWORD
----------------------------------


DROP TABLE IF EXISTS MOVIE_KEYWORD_MOVIE_ID_ID_TITLE;

-- Create temp table MOVIE_KEYWORD_MOVIE_ID_ID_TITLE (FK->PK join)
CREATE TEMP TABLE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE AS
SELECT
    MOVIE_KEYWORD.MOVIE_ID AS MOVIE_ID,
    TITLE.PHONETIC_CODE AS TITLE_PHONETIC_CODE, TITLE.SERIES_YEARS AS TITLE_SERIES_YEARS, TITLE.KIND_ID AS TITLE_KIND_ID, TITLE.EPISODE_NR AS TITLE_EPISODE_NR, TITLE.SEASON_NR AS TITLE_SEASON_NR, TITLE.IMDB_INDEX AS TITLE_IMDB_INDEX, TITLE.PRODUCTION_YEAR AS TITLE_PRODUCTION_YEAR
FROM MOVIE_KEYWORD
JOIN TITLE
  ON MOVIE_KEYWORD.MOVIE_ID = TITLE.ID
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD

WHERE MOVIE_KEYWORD.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_KEYWORD.MOVIE_ID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    65536 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 65536
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    131072 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 131072
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    262144 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 262144
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    476794 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_KEYWORD_MOVIE_ID
  LIMIT 476794
);

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_KEYWORD_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_KEYWORD_ID_MOVIE_ID for MCV MOVIE_KEYWORD.KEYWORD_ID -- MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_KEYWORD_ID_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_KEYWORD.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD
JOIN MOVIE_KEYWORD_KEYWORD_ID_mcv mcvt ON MOVIE_KEYWORD.KEYWORD_ID = mcvt.KEYWORD_ID
WHERE MOVIE_KEYWORD.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_KEYWORD.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'KEYWORD_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_KEYWORD_KEYWORD_ID_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_KEYWORD_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_KEYWORD_ID_MOVIE_ID for NONMCV MOVIE_KEYWORD.KEYWORD_ID -- MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_KEYWORD_ID_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD.KEYWORD_ID AS KEYWORD_ID,
    MOVIE_KEYWORD.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD
LEFT JOIN MOVIE_KEYWORD_KEYWORD_ID_mcv mcvt ON MOVIE_KEYWORD.KEYWORD_ID = mcvt.KEYWORD_ID
WHERE MOVIE_KEYWORD.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_KEYWORD.KEYWORD_ID, MOVIE_KEYWORD.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_KEYWORD KEYWORD_ID MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_KEYWORD_KEYWORD_ID_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    KEYWORD_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_KEYWORD_KEYWORD_ID_MOVIE_ID
  GROUP BY KEYWORD_ID
  HAVING KEYWORD_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'KEYWORD_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
JOIN TITLE_SEASON_NR_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR = mcvt.SEASON_NR
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for NONMCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR AS SEASON_NR,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_SEASON_NR_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR = mcvt.SEASON_NR
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE SEASON_NR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SEASON_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID
  GROUP BY SEASON_NR
  HAVING SEASON_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for NONMCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR AS PRODUCTION_YEAR,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE PRODUCTION_YEAR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PRODUCTION_YEAR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID
  GROUP BY PRODUCTION_YEAR
  HAVING PRODUCTION_YEAR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
JOIN TITLE_EPISODE_NR_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR = mcvt.EPISODE_NR
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for NONMCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR AS EPISODE_NR,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_EPISODE_NR_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR = mcvt.EPISODE_NR
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE EPISODE_NR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    EPISODE_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID
  GROUP BY EPISODE_NR
  HAVING EPISODE_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
JOIN TITLE_IMDB_INDEX_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX = mcvt.IMDB_INDEX
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for NONMCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX AS IMDB_INDEX,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_IMDB_INDEX_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX = mcvt.IMDB_INDEX
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE IMDB_INDEX MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    IMDB_INDEX,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID
  GROUP BY IMDB_INDEX
  HAVING IMDB_INDEX IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID for MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_KIND_ID -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
JOIN TITLE_KIND_ID_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_KIND_ID = mcvt.KIND_ID
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID for NONMCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_KIND_ID -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_KIND_ID AS KIND_ID,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_KIND_ID_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_KIND_ID = mcvt.KIND_ID
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_KIND_ID, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE KIND_ID MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    KIND_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID
  GROUP BY KIND_ID
  HAVING KIND_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
JOIN TITLE_SERIES_YEARS_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS = mcvt.SERIES_YEARS
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for NONMCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS AS SERIES_YEARS,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_SERIES_YEARS_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS = mcvt.SERIES_YEARS
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE SERIES_YEARS MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SERIES_YEARS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID
  GROUP BY SERIES_YEARS
  HAVING SERIES_YEARS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
JOIN TITLE_PHONETIC_CODE_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for NONMCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE AS PHONETIC_CODE,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_PHONETIC_CODE_mcv mcvt ON MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_KEYWORD_MOVIE_ID_ID_TITLE PHONETIC_CODE MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PHONETIC_CODE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID
  GROUP BY PHONETIC_CODE
  HAVING PHONETIC_CODE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for Histogram MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR AS SEASON_NR,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE

WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID d
        JOIN TITLE_SEASON_NR_histogram h
        ON (h.lower_bound IS NULL OR d.SEASON_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SEASON_NR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for Histogram MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR AS PRODUCTION_YEAR,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE

WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID d
        JOIN TITLE_PRODUCTION_YEAR_histogram h
        ON (h.lower_bound IS NULL OR d.PRODUCTION_YEAR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PRODUCTION_YEAR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for Histogram MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR AS EPISODE_NR,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE

WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID d
        JOIN TITLE_EPISODE_NR_histogram h
        ON (h.lower_bound IS NULL OR d.EPISODE_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.EPISODE_NR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for Histogram MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX AS IMDB_INDEX,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE

WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID d
        JOIN TITLE_IMDB_INDEX_histogram h
        ON (h.lower_bound IS NULL OR d.IMDB_INDEX >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.IMDB_INDEX <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for Histogram MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS AS SERIES_YEARS,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE

WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID d
        JOIN TITLE_SERIES_YEARS_histogram h
        ON (h.lower_bound IS NULL OR d.SERIES_YEARS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SERIES_YEARS <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for Histogram MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE AS PHONETIC_CODE,
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_KEYWORD_MOVIE_ID_ID_TITLE

WHERE MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE, MOVIE_KEYWORD_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_KEYWORD' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_KEYWORD_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID d
        JOIN TITLE_PHONETIC_CODE_histogram h
        ON (h.lower_bound IS NULL OR d.PHONETIC_CODE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PHONETIC_CODE <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for TITLE
----------------------------------


DROP TABLE IF EXISTS Degree_TITLE_ID;

-- Create aggregator table Degree_TITLE_ID
CREATE TEMP TABLE Degree_TITLE_ID AS
SELECT
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE

WHERE TITLE.ID IS NOT NULL
GROUP BY
    TITLE.ID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    65536 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 65536
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    131072 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 131072
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    262144 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 262144
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    524288 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 524288
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1048576 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 1048576
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2097152 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 2097152
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2528312 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_TITLE_ID
  LIMIT 2528312
);

DROP TABLE IF EXISTS Degree_TITLE_SEASON_NR_ID;

-- Create aggregator table Degree_TITLE_SEASON_NR_ID for MCV TITLE.SEASON_NR -- MCV
CREATE TEMP TABLE Degree_TITLE_SEASON_NR_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
JOIN TITLE_SEASON_NR_mcv mcvt ON TITLE.SEASON_NR = mcvt.SEASON_NR
WHERE TITLE.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TITLE.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TITLE_SEASON_NR_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TITLE_SEASON_NR_ID;

-- Create aggregator table Degree_TITLE_SEASON_NR_ID for NONMCV TITLE.SEASON_NR -- MCV
CREATE TEMP TABLE Degree_TITLE_SEASON_NR_ID AS
SELECT
    TITLE.SEASON_NR AS SEASON_NR,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
LEFT JOIN TITLE_SEASON_NR_mcv mcvt ON TITLE.SEASON_NR = mcvt.SEASON_NR
WHERE TITLE.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TITLE.SEASON_NR, TITLE.ID
;

-- Insert into norms for Non-MCV TITLE SEASON_NR ID NONMCV
-- Among all non-MCV values in Degree_TITLE_SEASON_NR_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SEASON_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TITLE_SEASON_NR_ID
  GROUP BY SEASON_NR
  HAVING SEASON_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TITLE_PRODUCTION_YEAR_ID;

-- Create aggregator table Degree_TITLE_PRODUCTION_YEAR_ID for MCV TITLE.PRODUCTION_YEAR -- MCV
CREATE TEMP TABLE Degree_TITLE_PRODUCTION_YEAR_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON TITLE.PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE TITLE.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TITLE.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TITLE_PRODUCTION_YEAR_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TITLE_PRODUCTION_YEAR_ID;

-- Create aggregator table Degree_TITLE_PRODUCTION_YEAR_ID for NONMCV TITLE.PRODUCTION_YEAR -- MCV
CREATE TEMP TABLE Degree_TITLE_PRODUCTION_YEAR_ID AS
SELECT
    TITLE.PRODUCTION_YEAR AS PRODUCTION_YEAR,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
LEFT JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON TITLE.PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE TITLE.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TITLE.PRODUCTION_YEAR, TITLE.ID
;

-- Insert into norms for Non-MCV TITLE PRODUCTION_YEAR ID NONMCV
-- Among all non-MCV values in Degree_TITLE_PRODUCTION_YEAR_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PRODUCTION_YEAR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TITLE_PRODUCTION_YEAR_ID
  GROUP BY PRODUCTION_YEAR
  HAVING PRODUCTION_YEAR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TITLE_EPISODE_NR_ID;

-- Create aggregator table Degree_TITLE_EPISODE_NR_ID for MCV TITLE.EPISODE_NR -- MCV
CREATE TEMP TABLE Degree_TITLE_EPISODE_NR_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
JOIN TITLE_EPISODE_NR_mcv mcvt ON TITLE.EPISODE_NR = mcvt.EPISODE_NR
WHERE TITLE.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TITLE.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TITLE_EPISODE_NR_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TITLE_EPISODE_NR_ID;

-- Create aggregator table Degree_TITLE_EPISODE_NR_ID for NONMCV TITLE.EPISODE_NR -- MCV
CREATE TEMP TABLE Degree_TITLE_EPISODE_NR_ID AS
SELECT
    TITLE.EPISODE_NR AS EPISODE_NR,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
LEFT JOIN TITLE_EPISODE_NR_mcv mcvt ON TITLE.EPISODE_NR = mcvt.EPISODE_NR
WHERE TITLE.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TITLE.EPISODE_NR, TITLE.ID
;

-- Insert into norms for Non-MCV TITLE EPISODE_NR ID NONMCV
-- Among all non-MCV values in Degree_TITLE_EPISODE_NR_ID, find max of each Lp
WITH perValue AS (
  SELECT
    EPISODE_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TITLE_EPISODE_NR_ID
  GROUP BY EPISODE_NR
  HAVING EPISODE_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TITLE_IMDB_INDEX_ID;

-- Create aggregator table Degree_TITLE_IMDB_INDEX_ID for MCV TITLE.IMDB_INDEX -- MCV
CREATE TEMP TABLE Degree_TITLE_IMDB_INDEX_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
JOIN TITLE_IMDB_INDEX_mcv mcvt ON TITLE.IMDB_INDEX = mcvt.IMDB_INDEX
WHERE TITLE.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TITLE.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TITLE_IMDB_INDEX_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TITLE_IMDB_INDEX_ID;

-- Create aggregator table Degree_TITLE_IMDB_INDEX_ID for NONMCV TITLE.IMDB_INDEX -- MCV
CREATE TEMP TABLE Degree_TITLE_IMDB_INDEX_ID AS
SELECT
    TITLE.IMDB_INDEX AS IMDB_INDEX,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
LEFT JOIN TITLE_IMDB_INDEX_mcv mcvt ON TITLE.IMDB_INDEX = mcvt.IMDB_INDEX
WHERE TITLE.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TITLE.IMDB_INDEX, TITLE.ID
;

-- Insert into norms for Non-MCV TITLE IMDB_INDEX ID NONMCV
-- Among all non-MCV values in Degree_TITLE_IMDB_INDEX_ID, find max of each Lp
WITH perValue AS (
  SELECT
    IMDB_INDEX,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TITLE_IMDB_INDEX_ID
  GROUP BY IMDB_INDEX
  HAVING IMDB_INDEX IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TITLE_KIND_ID_ID;

-- Create aggregator table Degree_TITLE_KIND_ID_ID for MCV TITLE.KIND_ID -- MCV
CREATE TEMP TABLE Degree_TITLE_KIND_ID_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
JOIN TITLE_KIND_ID_mcv mcvt ON TITLE.KIND_ID = mcvt.KIND_ID
WHERE TITLE.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TITLE.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TITLE_KIND_ID_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TITLE_KIND_ID_ID;

-- Create aggregator table Degree_TITLE_KIND_ID_ID for NONMCV TITLE.KIND_ID -- MCV
CREATE TEMP TABLE Degree_TITLE_KIND_ID_ID AS
SELECT
    TITLE.KIND_ID AS KIND_ID,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
LEFT JOIN TITLE_KIND_ID_mcv mcvt ON TITLE.KIND_ID = mcvt.KIND_ID
WHERE TITLE.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TITLE.KIND_ID, TITLE.ID
;

-- Insert into norms for Non-MCV TITLE KIND_ID ID NONMCV
-- Among all non-MCV values in Degree_TITLE_KIND_ID_ID, find max of each Lp
WITH perValue AS (
  SELECT
    KIND_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TITLE_KIND_ID_ID
  GROUP BY KIND_ID
  HAVING KIND_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TITLE_SERIES_YEARS_ID;

-- Create aggregator table Degree_TITLE_SERIES_YEARS_ID for MCV TITLE.SERIES_YEARS -- MCV
CREATE TEMP TABLE Degree_TITLE_SERIES_YEARS_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
JOIN TITLE_SERIES_YEARS_mcv mcvt ON TITLE.SERIES_YEARS = mcvt.SERIES_YEARS
WHERE TITLE.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TITLE.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TITLE_SERIES_YEARS_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TITLE_SERIES_YEARS_ID;

-- Create aggregator table Degree_TITLE_SERIES_YEARS_ID for NONMCV TITLE.SERIES_YEARS -- MCV
CREATE TEMP TABLE Degree_TITLE_SERIES_YEARS_ID AS
SELECT
    TITLE.SERIES_YEARS AS SERIES_YEARS,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
LEFT JOIN TITLE_SERIES_YEARS_mcv mcvt ON TITLE.SERIES_YEARS = mcvt.SERIES_YEARS
WHERE TITLE.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TITLE.SERIES_YEARS, TITLE.ID
;

-- Insert into norms for Non-MCV TITLE SERIES_YEARS ID NONMCV
-- Among all non-MCV values in Degree_TITLE_SERIES_YEARS_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SERIES_YEARS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TITLE_SERIES_YEARS_ID
  GROUP BY SERIES_YEARS
  HAVING SERIES_YEARS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TITLE_PHONETIC_CODE_ID;

-- Create aggregator table Degree_TITLE_PHONETIC_CODE_ID for MCV TITLE.PHONETIC_CODE -- MCV
CREATE TEMP TABLE Degree_TITLE_PHONETIC_CODE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
JOIN TITLE_PHONETIC_CODE_mcv mcvt ON TITLE.PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE TITLE.ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, TITLE.ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_TITLE_PHONETIC_CODE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_TITLE_PHONETIC_CODE_ID;

-- Create aggregator table Degree_TITLE_PHONETIC_CODE_ID for NONMCV TITLE.PHONETIC_CODE -- MCV
CREATE TEMP TABLE Degree_TITLE_PHONETIC_CODE_ID AS
SELECT
    TITLE.PHONETIC_CODE AS PHONETIC_CODE,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE
LEFT JOIN TITLE_PHONETIC_CODE_mcv mcvt ON TITLE.PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE TITLE.ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    TITLE.PHONETIC_CODE, TITLE.ID
;

-- Insert into norms for Non-MCV TITLE PHONETIC_CODE ID NONMCV
-- Among all non-MCV values in Degree_TITLE_PHONETIC_CODE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PHONETIC_CODE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_TITLE_PHONETIC_CODE_ID
  GROUP BY PHONETIC_CODE
  HAVING PHONETIC_CODE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_TITLE_SEASON_NR_ID;

-- Create aggregator table Degree_TITLE_SEASON_NR_ID for Histogram TITLE.SEASON_NR -- RANGE
CREATE TEMP TABLE Degree_TITLE_SEASON_NR_ID AS
SELECT
    TITLE.SEASON_NR AS SEASON_NR,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE

WHERE TITLE.ID IS NOT NULL
GROUP BY
    TITLE.SEASON_NR, TITLE.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_TITLE_SEASON_NR_ID d
        JOIN TITLE_SEASON_NR_histogram h
        ON (h.lower_bound IS NULL OR d.SEASON_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SEASON_NR <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_TITLE_PRODUCTION_YEAR_ID;

-- Create aggregator table Degree_TITLE_PRODUCTION_YEAR_ID for Histogram TITLE.PRODUCTION_YEAR -- RANGE
CREATE TEMP TABLE Degree_TITLE_PRODUCTION_YEAR_ID AS
SELECT
    TITLE.PRODUCTION_YEAR AS PRODUCTION_YEAR,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE

WHERE TITLE.ID IS NOT NULL
GROUP BY
    TITLE.PRODUCTION_YEAR, TITLE.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_TITLE_PRODUCTION_YEAR_ID d
        JOIN TITLE_PRODUCTION_YEAR_histogram h
        ON (h.lower_bound IS NULL OR d.PRODUCTION_YEAR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PRODUCTION_YEAR <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_TITLE_EPISODE_NR_ID;

-- Create aggregator table Degree_TITLE_EPISODE_NR_ID for Histogram TITLE.EPISODE_NR -- RANGE
CREATE TEMP TABLE Degree_TITLE_EPISODE_NR_ID AS
SELECT
    TITLE.EPISODE_NR AS EPISODE_NR,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE

WHERE TITLE.ID IS NOT NULL
GROUP BY
    TITLE.EPISODE_NR, TITLE.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_TITLE_EPISODE_NR_ID d
        JOIN TITLE_EPISODE_NR_histogram h
        ON (h.lower_bound IS NULL OR d.EPISODE_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.EPISODE_NR <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_TITLE_IMDB_INDEX_ID;

-- Create aggregator table Degree_TITLE_IMDB_INDEX_ID for Histogram TITLE.IMDB_INDEX -- RANGE
CREATE TEMP TABLE Degree_TITLE_IMDB_INDEX_ID AS
SELECT
    TITLE.IMDB_INDEX AS IMDB_INDEX,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE

WHERE TITLE.ID IS NOT NULL
GROUP BY
    TITLE.IMDB_INDEX, TITLE.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_TITLE_IMDB_INDEX_ID d
        JOIN TITLE_IMDB_INDEX_histogram h
        ON (h.lower_bound IS NULL OR d.IMDB_INDEX >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.IMDB_INDEX <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_TITLE_SERIES_YEARS_ID;

-- Create aggregator table Degree_TITLE_SERIES_YEARS_ID for Histogram TITLE.SERIES_YEARS -- RANGE
CREATE TEMP TABLE Degree_TITLE_SERIES_YEARS_ID AS
SELECT
    TITLE.SERIES_YEARS AS SERIES_YEARS,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE

WHERE TITLE.ID IS NOT NULL
GROUP BY
    TITLE.SERIES_YEARS, TITLE.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_TITLE_SERIES_YEARS_ID d
        JOIN TITLE_SERIES_YEARS_histogram h
        ON (h.lower_bound IS NULL OR d.SERIES_YEARS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SERIES_YEARS <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_TITLE_PHONETIC_CODE_ID;

-- Create aggregator table Degree_TITLE_PHONETIC_CODE_ID for Histogram TITLE.PHONETIC_CODE -- RANGE
CREATE TEMP TABLE Degree_TITLE_PHONETIC_CODE_ID AS
SELECT
    TITLE.PHONETIC_CODE AS PHONETIC_CODE,
    TITLE.ID AS ID,
    COUNT(*) AS deg
FROM TITLE

WHERE TITLE.ID IS NOT NULL
GROUP BY
    TITLE.PHONETIC_CODE, TITLE.ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'TITLE' AS relation_name,
    'ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        ID, bucket_id, SUM(deg) as deg
        FROM Degree_TITLE_PHONETIC_CODE_ID d
        JOIN TITLE_PHONETIC_CODE_histogram h
        ON (h.lower_bound IS NULL OR d.PHONETIC_CODE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PHONETIC_CODE <= h.upper_bound)
    WHERE ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

----------------------------------
-- START: generate all lpnorm queries for MOVIE_INFO
----------------------------------


DROP TABLE IF EXISTS MOVIE_INFO_MOVIE_ID_ID_TITLE;

-- Create temp table MOVIE_INFO_MOVIE_ID_ID_TITLE (FK->PK join)
CREATE TEMP TABLE MOVIE_INFO_MOVIE_ID_ID_TITLE AS
SELECT
    MOVIE_INFO.MOVIE_ID AS MOVIE_ID,
    TITLE.PHONETIC_CODE AS TITLE_PHONETIC_CODE, TITLE.SERIES_YEARS AS TITLE_SERIES_YEARS, TITLE.KIND_ID AS TITLE_KIND_ID, TITLE.EPISODE_NR AS TITLE_EPISODE_NR, TITLE.SEASON_NR AS TITLE_SEASON_NR, TITLE.IMDB_INDEX AS TITLE_IMDB_INDEX, TITLE.PRODUCTION_YEAR AS TITLE_PRODUCTION_YEAR
FROM MOVIE_INFO
JOIN TITLE
  ON MOVIE_INFO.MOVIE_ID = TITLE.ID
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID AS
SELECT
    MOVIE_INFO.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO

WHERE MOVIE_INFO.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO.MOVIE_ID
HAVING COUNT(*) > 0
ORDER BY deg DESC
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 1
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 2
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 4
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 8
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 16
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 32
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    64 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 64
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    128 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 128
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    256 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 256
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    512 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 512
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1024 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 1024
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2048 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 2048
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    4096 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 4096
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    8192 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 8192
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    16384 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 16384
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    32768 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 32768
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    65536 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 65536
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    131072 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 131072
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    262144 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 262144
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    524288 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 524288
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    1048576 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 1048576
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2097152 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 2097152
);

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    
    pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NOPRED' AS aggregator_name,
    NULL AS pred_col_name,
    
    2468825 AS pred_value_id,
  COUNT(*) AS l0,
  SUM(POWER(deg, 1)) AS l1,
  SUM(POWER(deg, 2)) AS l2,
  SUM(POWER(deg, 3)) AS l3,
  SUM(POWER(deg, 4)) AS l4,
  SUM(POWER(deg, 5)) AS l5,
  SUM(POWER(deg, 6)) AS l6,
  SUM(POWER(deg, 7)) AS l7,
  SUM(POWER(deg, 8)) AS l8,
  SUM(POWER(deg, 9)) AS l9,
  SUM(POWER(deg, 10)) AS l10,
  MAX(deg) AS l_inf
FROM (
  SELECT * FROM Degree_MOVIE_INFO_MOVIE_ID
  LIMIT 2468825
);

DROP TABLE IF EXISTS Degree_MOVIE_INFO_INFO_TYPE_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_INFO_TYPE_ID_MOVIE_ID for MCV MOVIE_INFO.INFO_TYPE_ID -- MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_INFO_TYPE_ID_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO
JOIN MOVIE_INFO_INFO_TYPE_ID_mcv mcvt ON MOVIE_INFO.INFO_TYPE_ID = mcvt.INFO_TYPE_ID
WHERE MOVIE_INFO.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'INFO_TYPE_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_INFO_TYPE_ID_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_INFO_TYPE_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_INFO_TYPE_ID_MOVIE_ID for NONMCV MOVIE_INFO.INFO_TYPE_ID -- MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_INFO_TYPE_ID_MOVIE_ID AS
SELECT
    MOVIE_INFO.INFO_TYPE_ID AS INFO_TYPE_ID,
    MOVIE_INFO.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO
LEFT JOIN MOVIE_INFO_INFO_TYPE_ID_mcv mcvt ON MOVIE_INFO.INFO_TYPE_ID = mcvt.INFO_TYPE_ID
WHERE MOVIE_INFO.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO.INFO_TYPE_ID, MOVIE_INFO.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO INFO_TYPE_ID MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_INFO_TYPE_ID_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    INFO_TYPE_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_INFO_TYPE_ID_MOVIE_ID
  GROUP BY INFO_TYPE_ID
  HAVING INFO_TYPE_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'INFO_TYPE_ID' AS pred_col_name,
    NULL AS fk_join_var_name,
    NULL AS pk_relation_name,
    NULL AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for MCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_SEASON_NR_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR = mcvt.SEASON_NR
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for NONMCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR AS SEASON_NR,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_SEASON_NR_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR = mcvt.SEASON_NR
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_MOVIE_ID_ID_TITLE SEASON_NR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SEASON_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID
  GROUP BY SEASON_NR
  HAVING SEASON_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for MCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for NONMCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR AS PRODUCTION_YEAR,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_PRODUCTION_YEAR_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR = mcvt.PRODUCTION_YEAR
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_MOVIE_ID_ID_TITLE PRODUCTION_YEAR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PRODUCTION_YEAR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID
  GROUP BY PRODUCTION_YEAR
  HAVING PRODUCTION_YEAR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for MCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_EPISODE_NR_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR = mcvt.EPISODE_NR
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for NONMCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR AS EPISODE_NR,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_EPISODE_NR_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR = mcvt.EPISODE_NR
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_MOVIE_ID_ID_TITLE EPISODE_NR MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    EPISODE_NR,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID
  GROUP BY EPISODE_NR
  HAVING EPISODE_NR IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for MCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_IMDB_INDEX_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX = mcvt.IMDB_INDEX
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for NONMCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX AS IMDB_INDEX,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_IMDB_INDEX_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX = mcvt.IMDB_INDEX
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_MOVIE_ID_ID_TITLE IMDB_INDEX MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    IMDB_INDEX,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID
  GROUP BY IMDB_INDEX
  HAVING IMDB_INDEX IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID for MCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_KIND_ID_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID = mcvt.KIND_ID
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID for NONMCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID AS KIND_ID,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_KIND_ID_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID = mcvt.KIND_ID
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_KIND_ID, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_MOVIE_ID_ID_TITLE KIND_ID MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    KIND_ID,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_KIND_ID_MOVIE_ID
  GROUP BY KIND_ID
  HAVING KIND_ID IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'KIND_ID' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for MCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_SERIES_YEARS_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS = mcvt.SERIES_YEARS
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for NONMCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS AS SERIES_YEARS,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_SERIES_YEARS_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS = mcvt.SERIES_YEARS
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_MOVIE_ID_ID_TITLE SERIES_YEARS MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    SERIES_YEARS,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID
  GROUP BY SERIES_YEARS
  HAVING SERIES_YEARS IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for MCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    mcvt.mcv_id AS mcv_id,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
JOIN TITLE_PHONETIC_CODE_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    mcvt.mcv_id, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'MCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    mcv_id AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID
GROUP BY mcv_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for NONMCV MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_MCV
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE AS PHONETIC_CODE,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE
LEFT JOIN TITLE_PHONETIC_CODE_mcv mcvt ON MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE = mcvt.PHONETIC_CODE
WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL AND mcvt.mcv_id IS NULL 
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

-- Insert into norms for Non-MCV MOVIE_INFO_MOVIE_ID_ID_TITLE PHONETIC_CODE MOVIE_ID NONMCV
-- Among all non-MCV values in Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID, find max of each Lp
WITH perValue AS (
  SELECT
    PHONETIC_CODE,
    COUNT(*) AS l0, SUM(POWER(deg, 1)) AS l1, SUM(POWER(deg, 2)) AS l2, SUM(POWER(deg, 3)) AS l3, SUM(POWER(deg, 4)) AS l4, SUM(POWER(deg, 5)) AS l5, SUM(POWER(deg, 6)) AS l6, SUM(POWER(deg, 7)) AS l7, SUM(POWER(deg, 8)) AS l8, SUM(POWER(deg, 9)) AS l9, SUM(POWER(deg, 10)) AS l10, MAX(deg) AS l_inf
  FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID
  GROUP BY PHONETIC_CODE
  HAVING PHONETIC_CODE IS NOT NULL
)
INSERT INTO norms(
    
    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
  pred_value_id,
  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'NONMCV' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
  NULL              AS pred_value_id,
  MAX(l0) AS l0, MAX(l1) AS l1, MAX(l2) AS l2, MAX(l3) AS l3, MAX(l4) AS l4, MAX(l5) AS l5, MAX(l6) AS l6, MAX(l7) AS l7, MAX(l8) AS l8, MAX(l9) AS l9, MAX(l10) AS l10, MAX(l_inf) AS l_inf
FROM perValue
HAVING COUNT(*) > 0  -- If you need to ensure some rows are returned
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID for Histogram MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR AS SEASON_NR,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SEASON_NR, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SEASON_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SEASON_NR_MOVIE_ID d
        JOIN TITLE_SEASON_NR_histogram h
        ON (h.lower_bound IS NULL OR d.SEASON_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SEASON_NR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID for Histogram MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR AS PRODUCTION_YEAR,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PRODUCTION_YEAR, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PRODUCTION_YEAR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PRODUCTION_YEAR_MOVIE_ID d
        JOIN TITLE_PRODUCTION_YEAR_histogram h
        ON (h.lower_bound IS NULL OR d.PRODUCTION_YEAR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PRODUCTION_YEAR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID for Histogram MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR AS EPISODE_NR,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_EPISODE_NR, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'EPISODE_NR' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_EPISODE_NR_MOVIE_ID d
        JOIN TITLE_EPISODE_NR_histogram h
        ON (h.lower_bound IS NULL OR d.EPISODE_NR >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.EPISODE_NR <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID for Histogram MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX AS IMDB_INDEX,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_IMDB_INDEX, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'IMDB_INDEX' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_IMDB_INDEX_MOVIE_ID d
        JOIN TITLE_IMDB_INDEX_histogram h
        ON (h.lower_bound IS NULL OR d.IMDB_INDEX >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.IMDB_INDEX <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID for Histogram MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS AS SERIES_YEARS,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_SERIES_YEARS, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'SERIES_YEARS' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_SERIES_YEARS_MOVIE_ID d
        JOIN TITLE_SERIES_YEARS_histogram h
        ON (h.lower_bound IS NULL OR d.SERIES_YEARS >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.SERIES_YEARS <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

DROP TABLE IF EXISTS Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID;

-- Create aggregator table Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID for Histogram MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE -- FKPK_RANGE
CREATE TEMP TABLE Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID AS
SELECT
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE AS PHONETIC_CODE,
    MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID AS MOVIE_ID,
    COUNT(*) AS deg
FROM MOVIE_INFO_MOVIE_ID_ID_TITLE

WHERE MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID IS NOT NULL
GROUP BY
    MOVIE_INFO_MOVIE_ID_ID_TITLE.TITLE_PHONETIC_CODE, MOVIE_INFO_MOVIE_ID_ID_TITLE.MOVIE_ID
;

INSERT INTO norms(

    relation_name,
    join_var_name,
    aggregator_name,
    pred_col_name,
    fk_join_var_name,
    pk_relation_name,
    pk_join_var_name,
    
pred_value_id,
l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l_inf
)
SELECT
    
    'MOVIE_INFO' AS relation_name,
    'MOVIE_ID' AS join_var_name,
    'RANGE' AS aggregator_name,
    'PHONETIC_CODE' AS pred_col_name,
    'MOVIE_ID' AS fk_join_var_name,
    'TITLE' AS pk_relation_name,
    'ID' AS pk_join_var_name,
    
    bucket_id     AS pred_value,
    COUNT(*) AS l0,
    SUM(POWER(deg, 1)) AS l1,
    SUM(POWER(deg, 2)) AS l2,
    SUM(POWER(deg, 3)) AS l3,
    SUM(POWER(deg, 4)) AS l4,
    SUM(POWER(deg, 5)) AS l5,
    SUM(POWER(deg, 6)) AS l6,
    SUM(POWER(deg, 7)) AS l7,
    SUM(POWER(deg, 8)) AS l8,
    SUM(POWER(deg, 9)) AS l9,
    SUM(POWER(deg, 10)) AS l10,
    MAX(deg) AS l_inf
FROM 
(
  SELECT
        MOVIE_ID, bucket_id, SUM(deg) as deg
        FROM Degree_MOVIE_INFO_MOVIE_ID_ID_TITLE_PHONETIC_CODE_MOVIE_ID d
        JOIN TITLE_PHONETIC_CODE_histogram h
        ON (h.lower_bound IS NULL OR d.PHONETIC_CODE >= h.lower_bound)
        AND (h.upper_bound IS NULL OR d.PHONETIC_CODE <= h.upper_bound)
    WHERE MOVIE_ID IS NOT NULL AND bucket_id IS NOT NULL
    GROUP BY MOVIE_ID, bucket_id
)
GROUP BY bucket_id
ORDER BY bucket_id
;

